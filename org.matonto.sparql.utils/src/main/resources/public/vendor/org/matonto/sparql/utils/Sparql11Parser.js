/*-
 * #%L
 * org.matonto.sparql.utils
 * $Id:$
 * $HeadURL:$
 * %%
 * Copyright (C) 2016 - 2017 iNovex Information Systems, Inc.
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * #L%
 */
// Generated from org/matonto/sparql/utils/Sparql11.g4 by ANTLR 4.6
// jshint ignore: start
var antlr4 = require('antlr4/index');
var Sparql11Listener = require('./Sparql11Listener').Sparql11Listener;
var grammarFileName = "Sparql11.g4";

var serializedATN = ["\u0003\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd",
    "\u0003\u00af\u0625\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004",
    "x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004",
    "\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t",
    "\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004",
    "\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004\u0089\t",
    "\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t\u008c\u0004",
    "\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0003\u0002\u0003",
    "\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0005",
    "\u0003\u0126\n\u0003\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004",
    "\u0003\u0005\u0003\u0005\u0007\u0005\u012e\n\u0005\f\u0005\u000e\u0005",
    "\u0131\u000b\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\b\u0003\b\u0007\b\u013c\n\b\f\b",
    "\u000e\b\u013f\u000b\b\u0003\b\u0003\b\u0003\b\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\n\u0003\n\u0005\n\u014b\n\n\u0003\n\u0003\n",
    "\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0006\n\u0154\n\n\r\n\u000e",
    "\n\u0155\u0003\n\u0005\n\u0159\n\n\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0007\u000b\u015e\n\u000b\f\u000b\u000e\u000b\u0161\u000b\u000b\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0007\u000b\u0167\n\u000b",
    "\f\u000b\u000e\u000b\u016a\u000b\u000b\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0005\u000b\u016f\n\u000b\u0003\u000b\u0003\u000b\u0005\u000b",
    "\u0173\n\u000b\u0003\f\u0003\f\u0006\f\u0177\n\f\r\f\u000e\f\u0178\u0003",
    "\f\u0005\f\u017c\n\f\u0003\f\u0007\f\u017f\n\f\f\f\u000e\f\u0182\u000b",
    "\f\u0003\f\u0005\f\u0185\n\f\u0003\f\u0003\f\u0003\r\u0003\r\u0007\r",
    "\u018b\n\r\f\r\u000e\r\u018e\u000b\r\u0003\r\u0003\r\u0003\r\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0005\u000e\u0196\n\u000e\u0003\u000f\u0003",
    "\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003",
    "\u0012\u0005\u0012\u01a0\n\u0012\u0003\u0012\u0003\u0012\u0003\u0013",
    "\u0005\u0013\u01a5\n\u0013\u0003\u0013\u0005\u0013\u01a8\n\u0013\u0003",
    "\u0013\u0005\u0013\u01ab\n\u0013\u0003\u0013\u0005\u0013\u01ae\n\u0013",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0006\u0014\u01b3\n\u0014\r\u0014",
    "\u000e\u0014\u01b4\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0005\u0015\u01bd\n\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0005\u0015\u01c2\n\u0015\u0003\u0016\u0003\u0016\u0006",
    "\u0016\u01c6\n\u0016\r\u0016\u000e\u0016\u01c7\u0003\u0017\u0003\u0017",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0006\u0018\u01cf\n\u0018\r\u0018",
    "\u000e\u0018\u01d0\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005",
    "\u0019\u01d7\n\u0019\u0005\u0019\u01d9\n\u0019\u0003\u001a\u0003\u001a",
    "\u0005\u001a\u01dd\n\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u01e1",
    "\n\u001a\u0005\u001a\u01e3\n\u001a\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0005\u001d",
    "\u01ed\n\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005",
    "\u001e\u01f3\n\u001e\u0005\u001e\u01f5\n\u001e\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u0202\n\u001f\u0003",
    " \u0003 \u0005 \u0206\n \u0003 \u0003 \u0003 \u0005 \u020b\n \u0003",
    "!\u0003!\u0005!\u020f\n!\u0003!\u0003!\u0003\"\u0003\"\u0005\"\u0215",
    "\n\"\u0003\"\u0003\"\u0003#\u0003#\u0005#\u021b\n#\u0003#\u0003#\u0003",
    "$\u0003$\u0005$\u0221\n$\u0003$\u0003$\u0003$\u0003$\u0003%\u0003%\u0005",
    "%\u0229\n%\u0003%\u0003%\u0003%\u0003%\u0003&\u0003&\u0005&\u0231\n",
    "&\u0003&\u0003&\u0003&\u0003&\u0003\'\u0003\'\u0003\'\u0003(\u0003(",
    "\u0003(\u0003)\u0003)\u0003)\u0003*\u0003*\u0005*\u0242\n*\u0003*\u0003",
    "*\u0005*\u0246\n*\u0003*\u0005*\u0249\n*\u0003*\u0007*\u024c\n*\f*\u000e",
    "*\u024f\u000b*\u0003*\u0003*\u0003*\u0003+\u0003+\u0003+\u0003,\u0003",
    ",\u0003,\u0003-\u0003-\u0003-\u0003-\u0005-\u025e\n-\u0003.\u0003.\u0005",
    ".\u0262\n.\u0003.\u0005.\u0265\n.\u0003/\u0003/\u0005/\u0269\n/\u0003",
    "0\u00030\u00030\u00030\u00050\u026f\n0\u00031\u00031\u00031\u00031\u0003",
    "2\u00032\u00032\u00032\u00033\u00053\u027a\n3\u00033\u00033\u00053\u027e",
    "\n3\u00033\u00053\u0281\n3\u00073\u0283\n3\f3\u000e3\u0286\u000b3\u0003",
    "4\u00034\u00034\u00034\u00054\u028c\n4\u00034\u00034\u00035\u00035\u0003",
    "5\u00055\u0293\n5\u00055\u0295\n5\u00036\u00036\u00036\u00056\u029a",
    "\n6\u00036\u00036\u00036\u00037\u00057\u02a0\n7\u00037\u00037\u0005",
    "7\u02a4\n7\u00037\u00057\u02a7\n7\u00077\u02a9\n7\f7\u000e7\u02ac\u000b",
    "7\u00038\u00038\u00038\u00058\u02b1\n8\u00058\u02b3\n8\u00039\u0003",
    "9\u00039\u00039\u00039\u00039\u00039\u00039\u00059\u02bd\n9\u0003:\u0003",
    ":\u0003:\u0003;\u0003;\u0003;\u0003;\u0003<\u0003<\u0005<\u02c8\n<\u0003",
    "<\u0003<\u0003<\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003",
    ">\u0003>\u0003>\u0003?\u0003?\u0005?\u02d9\n?\u0003@\u0003@\u0003@\u0007",
    "@\u02de\n@\f@\u000e@\u02e1\u000b@\u0003@\u0003@\u0003A\u0003A\u0003",
    "A\u0007A\u02e8\nA\fA\u000eA\u02eb\u000bA\u0003A\u0005A\u02ee\nA\u0003",
    "A\u0003A\u0003A\u0007A\u02f3\nA\fA\u000eA\u02f6\u000bA\u0003A\u0003",
    "A\u0007A\u02fa\nA\fA\u000eA\u02fd\u000bA\u0003A\u0003A\u0003B\u0003",
    "B\u0003B\u0003B\u0003B\u0005B\u0306\nB\u0003C\u0003C\u0003C\u0003D\u0003",
    "D\u0003D\u0007D\u030e\nD\fD\u000eD\u0311\u000bD\u0003E\u0003E\u0003",
    "E\u0003F\u0003F\u0003F\u0005F\u0319\nF\u0003G\u0003G\u0003G\u0003H\u0003",
    "H\u0003H\u0005H\u0321\nH\u0003H\u0003H\u0003H\u0007H\u0326\nH\fH\u000e",
    "H\u0329\u000bH\u0003H\u0003H\u0005H\u032d\nH\u0003I\u0003I\u0003I\u0003",
    "I\u0003I\u0007I\u0334\nI\fI\u000eI\u0337\u000bI\u0003I\u0003I\u0005",
    "I\u033b\nI\u0003J\u0003J\u0005J\u033f\nJ\u0003J\u0003J\u0003K\u0003",
    "K\u0003K\u0005K\u0346\nK\u0005K\u0348\nK\u0003L\u0003L\u0003L\u0003",
    "L\u0003L\u0003L\u0005L\u0350\nL\u0003M\u0005M\u0353\nM\u0003N\u0003",
    "N\u0003N\u0003N\u0003N\u0003N\u0005N\u035b\nN\u0007N\u035d\nN\fN\u000e",
    "N\u0360\u000bN\u0003O\u0003O\u0005O\u0364\nO\u0003P\u0003P\u0003P\u0007",
    "P\u0369\nP\fP\u000eP\u036c\u000bP\u0003Q\u0003Q\u0003R\u0003R\u0003",
    "R\u0003R\u0003R\u0003R\u0005R\u0376\nR\u0003S\u0005S\u0379\nS\u0003",
    "T\u0003T\u0005T\u037d\nT\u0003T\u0003T\u0003T\u0003T\u0005T\u0383\n",
    "T\u0003T\u0003T\u0005T\u0387\nT\u0007T\u0389\nT\fT\u000eT\u038c\u000b",
    "T\u0003U\u0003U\u0003V\u0003V\u0003W\u0003W\u0003W\u0007W\u0395\nW\f",
    "W\u000eW\u0398\u000bW\u0003X\u0003X\u0003Y\u0003Y\u0003Z\u0003Z\u0003",
    "Z\u0007Z\u03a1\nZ\fZ\u000eZ\u03a4\u000bZ\u0003[\u0003[\u0003[\u0007",
    "[\u03a9\n[\f[\u000e[\u03ac\u000b[\u0003\\\u0003\\\u0005\\\u03b0\n\\",
    "\u0003]\u0003]\u0003]\u0005]\u03b5\n]\u0003^\u0003^\u0003_\u0003_\u0003",
    "_\u0003_\u0003_\u0003_\u0003_\u0003_\u0005_\u03c1\n_\u0003`\u0003`\u0003",
    "`\u0003`\u0003`\u0007`\u03c8\n`\f`\u000e`\u03cb\u000b`\u0005`\u03cd",
    "\n`\u0003`\u0005`\u03d0\n`\u0003a\u0003a\u0003a\u0003a\u0003a\u0005",
    "a\u03d7\na\u0005a\u03d9\na\u0003b\u0003b\u0003c\u0003c\u0005c\u03df",
    "\nc\u0003d\u0003d\u0003d\u0003d\u0003e\u0003e\u0005e\u03e7\ne\u0003",
    "f\u0003f\u0003f\u0003f\u0003g\u0003g\u0006g\u03ef\ng\rg\u000eg\u03f0",
    "\u0003g\u0003g\u0003h\u0003h\u0006h\u03f7\nh\rh\u000eh\u03f8\u0003h",
    "\u0003h\u0003i\u0003i\u0005i\u03ff\ni\u0003j\u0003j\u0005j\u0403\nj",
    "\u0003k\u0003k\u0005k\u0407\nk\u0003l\u0003l\u0005l\u040b\nl\u0003m",
    "\u0003m\u0005m\u040f\nm\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0005",
    "n\u0417\nn\u0003o\u0003o\u0003p\u0003p\u0003p\u0007p\u041e\np\fp\u000e",
    "p\u0421\u000bp\u0003q\u0003q\u0003q\u0007q\u0426\nq\fq\u000eq\u0429",
    "\u000bq\u0003r\u0003r\u0003s\u0003s\u0003s\u0003s\u0003s\u0003s\u0003",
    "s\u0003s\u0003s\u0003s\u0003s\u0003s\u0003s\u0003s\u0003s\u0003s\u0003",
    "s\u0003s\u0005s\u043f\ns\u0003t\u0003t\u0003u\u0003u\u0003u\u0003u\u0003",
    "u\u0003u\u0003u\u0005u\u044a\nu\u0003u\u0003u\u0003u\u0003u\u0007u\u0450",
    "\nu\fu\u000eu\u0453\u000bu\u0007u\u0455\nu\fu\u000eu\u0458\u000bu\u0003",
    "v\u0003v\u0003v\u0003v\u0003v\u0007v\u045f\nv\fv\u000ev\u0462\u000b",
    "v\u0003w\u0003w\u0003w\u0003w\u0003w\u0003w\u0003w\u0005w\u046b\nw\u0003",
    "x\u0003x\u0003x\u0003x\u0003x\u0003x\u0003x\u0005x\u0474\nx\u0003y\u0003",
    "y\u0003y\u0003y\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0005z\u04a6\nz\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0005z\u057c\nz\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0005",
    "{\u0585\n{\u0003{\u0003{\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0003",
    "|\u0005|\u0590\n|\u0003|\u0003|\u0003}\u0003}\u0003}\u0003}\u0003}\u0003",
    "}\u0003}\u0003}\u0003}\u0005}\u059d\n}\u0003}\u0003}\u0003~\u0003~\u0003",
    "~\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u0080\u0003",
    "\u0080\u0003\u0080\u0005\u0080\u05ab\n\u0080\u0003\u0080\u0003\u0080",
    "\u0005\u0080\u05af\n\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003",
    "\u0080\u0005\u0080\u05b5\n\u0080\u0003\u0080\u0003\u0080\u0003\u0080",
    "\u0003\u0080\u0003\u0080\u0003\u0080\u0005\u0080\u05bd\n\u0080\u0003",
    "\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0005",
    "\u0080\u05c5\n\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080",
    "\u0003\u0080\u0003\u0080\u0005\u0080\u05cd\n\u0080\u0003\u0080\u0003",
    "\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0005\u0080\u05d5",
    "\n\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080",
    "\u0003\u0080\u0005\u0080\u05dd\n\u0080\u0003\u0080\u0003\u0080\u0003",
    "\u0080\u0003\u0080\u0003\u0080\u0005\u0080\u05e4\n\u0080\u0003\u0080",
    "\u0003\u0080\u0005\u0080\u05e8\n\u0080\u0003\u0081\u0003\u0081\u0005",
    "\u0081\u05ec\n\u0081\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082",
    "\u0005\u0082\u05f2\n\u0082\u0003\u0083\u0003\u0083\u0003\u0083\u0005",
    "\u0083\u05f7\n\u0083\u0003\u0084\u0003\u0084\u0003\u0085\u0003\u0085",
    "\u0003\u0086\u0003\u0086\u0003\u0087\u0003\u0087\u0003\u0088\u0003\u0088",
    "\u0003\u0089\u0003\u0089\u0005\u0089\u0605\n\u0089\u0003\u008a\u0003",
    "\u008a\u0003\u008b\u0003\u008b\u0005\u008b\u060b\n\u008b\u0003\u008c",
    "\u0003\u008c\u0003\u008c\u0003\u008d\u0003\u008d\u0003\u008d\u0003\u008e",
    "\u0003\u008e\u0007\u008e\u0615\n\u008e\f\u008e\u000e\u008e\u0618\u000b",
    "\u008e\u0003\u008e\u0003\u008e\u0003\u008f\u0003\u008f\u0007\u008f\u061e",
    "\n\u008f\f\u008f\u000e\u008f\u0621\u000b\u008f\u0003\u008f\u0003\u008f",
    "\u0003\u008f\u0002\u0002\u0090\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012",
    "\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ",
    "\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e",
    "\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6",
    "\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be",
    "\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6",
    "\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee",
    "\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106",
    "\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u0002",
    "\u000b\u0003\u0002\u0006\u0007\u0003\u0002\u0013\u0014\u0004\u0002\u0096",
    "\u0097\u009f\u009f\u0003\u0002z|\u0003\u0002}\u007f\u0003\u0002\u0080",
    "\u0082\u0003\u0002st\u0003\u0002\u0084\u0087\u0003\u0002vw\u069c\u0002",
    "\u011e\u0003\u0002\u0002\u0002\u0004\u0120\u0003\u0002\u0002\u0002\u0006",
    "\u0129\u0003\u0002\u0002\u0002\b\u012f\u0003\u0002\u0002\u0002\n\u0132",
    "\u0003\u0002\u0002\u0002\f\u0135\u0003\u0002\u0002\u0002\u000e\u0139",
    "\u0003\u0002\u0002\u0002\u0010\u0143\u0003\u0002\u0002\u0002\u0012\u0148",
    "\u0003\u0002\u0002\u0002\u0014\u015a\u0003\u0002\u0002\u0002\u0016\u0174",
    "\u0003\u0002\u0002\u0002\u0018\u0188\u0003\u0002\u0002\u0002\u001a\u0192",
    "\u0003\u0002\u0002\u0002\u001c\u0197\u0003\u0002\u0002\u0002\u001e\u0199",
    "\u0003\u0002\u0002\u0002 \u019c\u0003\u0002\u0002\u0002\"\u019f\u0003",
    "\u0002\u0002\u0002$\u01a4\u0003\u0002\u0002\u0002&\u01af\u0003\u0002",
    "\u0002\u0002(\u01c1\u0003\u0002\u0002\u0002*\u01c3\u0003\u0002\u0002",
    "\u0002,\u01c9\u0003\u0002\u0002\u0002.\u01cb\u0003\u0002\u0002\u0002",
    "0\u01d8\u0003\u0002\u0002\u00022\u01e2\u0003\u0002\u0002\u00024\u01e4",
    "\u0003\u0002\u0002\u00026\u01e7\u0003\u0002\u0002\u00028\u01ec\u0003",
    "\u0002\u0002\u0002:\u01ee\u0003\u0002\u0002\u0002<\u0201\u0003\u0002",
    "\u0002\u0002>\u0203\u0003\u0002\u0002\u0002@\u020c\u0003\u0002\u0002",
    "\u0002B\u0212\u0003\u0002\u0002\u0002D\u0218\u0003\u0002\u0002\u0002",
    "F\u021e\u0003\u0002\u0002\u0002H\u0226\u0003\u0002\u0002\u0002J\u022e",
    "\u0003\u0002\u0002\u0002L\u0236\u0003\u0002\u0002\u0002N\u0239\u0003",
    "\u0002\u0002\u0002P\u023c\u0003\u0002\u0002\u0002R\u0241\u0003\u0002",
    "\u0002\u0002T\u0253\u0003\u0002\u0002\u0002V\u0256\u0003\u0002\u0002",
    "\u0002X\u0259\u0003\u0002\u0002\u0002Z\u0264\u0003\u0002\u0002\u0002",
    "\\\u0268\u0003\u0002\u0002\u0002^\u026e\u0003\u0002\u0002\u0002`\u0270",
    "\u0003\u0002\u0002\u0002b\u0274\u0003\u0002\u0002\u0002d\u0279\u0003",
    "\u0002\u0002\u0002f\u0287\u0003\u0002\u0002\u0002h\u028f\u0003\u0002",
    "\u0002\u0002j\u0296\u0003\u0002\u0002\u0002l\u029f\u0003\u0002\u0002",
    "\u0002n\u02ad\u0003\u0002\u0002\u0002p\u02bc\u0003\u0002\u0002\u0002",
    "r\u02be\u0003\u0002\u0002\u0002t\u02c1\u0003\u0002\u0002\u0002v\u02c5",
    "\u0003\u0002\u0002\u0002x\u02cc\u0003\u0002\u0002\u0002z\u02d3\u0003",
    "\u0002\u0002\u0002|\u02d8\u0003\u0002\u0002\u0002~\u02da\u0003\u0002",
    "\u0002\u0002\u0080\u02ed\u0003\u0002\u0002\u0002\u0082\u0305\u0003\u0002",
    "\u0002\u0002\u0084\u0307\u0003\u0002\u0002\u0002\u0086\u030a\u0003\u0002",
    "\u0002\u0002\u0088\u0312\u0003\u0002\u0002\u0002\u008a\u0318\u0003\u0002",
    "\u0002\u0002\u008c\u031a\u0003\u0002\u0002\u0002\u008e\u032c\u0003\u0002",
    "\u0002\u0002\u0090\u033a\u0003\u0002\u0002\u0002\u0092\u033c\u0003\u0002",
    "\u0002\u0002\u0094\u0342\u0003\u0002\u0002\u0002\u0096\u034f\u0003\u0002",
    "\u0002\u0002\u0098\u0352\u0003\u0002\u0002\u0002\u009a\u0354\u0003\u0002",
    "\u0002\u0002\u009c\u0363\u0003\u0002\u0002\u0002\u009e\u0365\u0003\u0002",
    "\u0002\u0002\u00a0\u036d\u0003\u0002\u0002\u0002\u00a2\u0375\u0003\u0002",
    "\u0002\u0002\u00a4\u0378\u0003\u0002\u0002\u0002\u00a6\u037c\u0003\u0002",
    "\u0002\u0002\u00a8\u038d\u0003\u0002\u0002\u0002\u00aa\u038f\u0003\u0002",
    "\u0002\u0002\u00ac\u0391\u0003\u0002\u0002\u0002\u00ae\u0399\u0003\u0002",
    "\u0002\u0002\u00b0\u039b\u0003\u0002\u0002\u0002\u00b2\u039d\u0003\u0002",
    "\u0002\u0002\u00b4\u03a5\u0003\u0002\u0002\u0002\u00b6\u03ad\u0003\u0002",
    "\u0002\u0002\u00b8\u03b4\u0003\u0002\u0002\u0002\u00ba\u03b6\u0003\u0002",
    "\u0002\u0002\u00bc\u03c0\u0003\u0002\u0002\u0002\u00be\u03cf\u0003\u0002",
    "\u0002\u0002\u00c0\u03d8\u0003\u0002\u0002\u0002\u00c2\u03da\u0003\u0002",
    "\u0002\u0002\u00c4\u03de\u0003\u0002\u0002\u0002\u00c6\u03e0\u0003\u0002",
    "\u0002\u0002\u00c8\u03e6\u0003\u0002\u0002\u0002\u00ca\u03e8\u0003\u0002",
    "\u0002\u0002\u00cc\u03ec\u0003\u0002\u0002\u0002\u00ce\u03f4\u0003\u0002",
    "\u0002\u0002\u00d0\u03fe\u0003\u0002\u0002\u0002\u00d2\u0402\u0003\u0002",
    "\u0002\u0002\u00d4\u0406\u0003\u0002\u0002\u0002\u00d6\u040a\u0003\u0002",
    "\u0002\u0002\u00d8\u040e\u0003\u0002\u0002\u0002\u00da\u0416\u0003\u0002",
    "\u0002\u0002\u00dc\u0418\u0003\u0002\u0002\u0002\u00de\u041a\u0003\u0002",
    "\u0002\u0002\u00e0\u0422\u0003\u0002\u0002\u0002\u00e2\u042a\u0003\u0002",
    "\u0002\u0002\u00e4\u042c\u0003\u0002\u0002\u0002\u00e6\u0440\u0003\u0002",
    "\u0002\u0002\u00e8\u0442\u0003\u0002\u0002\u0002\u00ea\u0459\u0003\u0002",
    "\u0002\u0002\u00ec\u046a\u0003\u0002\u0002\u0002\u00ee\u0473\u0003\u0002",
    "\u0002\u0002\u00f0\u0475\u0003\u0002\u0002\u0002\u00f2\u057b\u0003\u0002",
    "\u0002\u0002\u00f4\u057d\u0003\u0002\u0002\u0002\u00f6\u0588\u0003\u0002",
    "\u0002\u0002\u00f8\u0593\u0003\u0002\u0002\u0002\u00fa\u05a0\u0003\u0002",
    "\u0002\u0002\u00fc\u05a3\u0003\u0002\u0002\u0002\u00fe\u05e7\u0003\u0002",
    "\u0002\u0002\u0100\u05e9\u0003\u0002\u0002\u0002\u0102\u05ed\u0003\u0002",
    "\u0002\u0002\u0104\u05f6\u0003\u0002\u0002\u0002\u0106\u05f8\u0003\u0002",
    "\u0002\u0002\u0108\u05fa\u0003\u0002\u0002\u0002\u010a\u05fc\u0003\u0002",
    "\u0002\u0002\u010c\u05fe\u0003\u0002\u0002\u0002\u010e\u0600\u0003\u0002",
    "\u0002\u0002\u0110\u0604\u0003\u0002\u0002\u0002\u0112\u0606\u0003\u0002",
    "\u0002\u0002\u0114\u060a\u0003\u0002\u0002\u0002\u0116\u060c\u0003\u0002",
    "\u0002\u0002\u0118\u060f\u0003\u0002\u0002\u0002\u011a\u0612\u0003\u0002",
    "\u0002\u0002\u011c\u061b\u0003\u0002\u0002\u0002\u011e\u011f\u0005\u0004",
    "\u0003\u0002\u011f\u0003\u0003\u0002\u0002\u0002\u0120\u0125\u0005\b",
    "\u0005\u0002\u0121\u0126\u0005\u000e\b\u0002\u0122\u0126\u0005\u0014",
    "\u000b\u0002\u0123\u0126\u0005\u0016\f\u0002\u0124\u0126\u0005\u0018",
    "\r\u0002\u0125\u0121\u0003\u0002\u0002\u0002\u0125\u0122\u0003\u0002",
    "\u0002\u0002\u0125\u0123\u0003\u0002\u0002\u0002\u0125\u0124\u0003\u0002",
    "\u0002\u0002\u0126\u0127\u0003\u0002\u0002\u0002\u0127\u0128\u00058",
    "\u001d\u0002\u0128\u0005\u0003\u0002\u0002\u0002\u0129\u012a\u0005:",
    "\u001e\u0002\u012a\u0007\u0003\u0002\u0002\u0002\u012b\u012e\u0005\n",
    "\u0006\u0002\u012c\u012e\u0005\f\u0007\u0002\u012d\u012b\u0003\u0002",
    "\u0002\u0002\u012d\u012c\u0003\u0002\u0002\u0002\u012e\u0131\u0003\u0002",
    "\u0002\u0002\u012f\u012d\u0003\u0002\u0002\u0002\u012f\u0130\u0003\u0002",
    "\u0002\u0002\u0130\t\u0003\u0002\u0002\u0002\u0131\u012f\u0003\u0002",
    "\u0002\u0002\u0132\u0133\u0007\u0003\u0002\u0002\u0133\u0134\u0007u",
    "\u0002\u0002\u0134\u000b\u0003\u0002\u0002\u0002\u0135\u0136\u0007\u0004",
    "\u0002\u0002\u0136\u0137\u0007v\u0002\u0002\u0137\u0138\u0007u\u0002",
    "\u0002\u0138\r\u0003\u0002\u0002\u0002\u0139\u013d\u0005\u0012\n\u0002",
    "\u013a\u013c\u0005\u001a\u000e\u0002\u013b\u013a\u0003\u0002\u0002\u0002",
    "\u013c\u013f\u0003\u0002\u0002\u0002\u013d\u013b\u0003\u0002\u0002\u0002",
    "\u013d\u013e\u0003\u0002\u0002\u0002\u013e\u0140\u0003\u0002\u0002\u0002",
    "\u013f\u013d\u0003\u0002\u0002\u0002\u0140\u0141\u0005\"\u0012\u0002",
    "\u0141\u0142\u0005$\u0013\u0002\u0142\u000f\u0003\u0002\u0002\u0002",
    "\u0143\u0144\u0005\u0012\n\u0002\u0144\u0145\u0005\"\u0012\u0002\u0145",
    "\u0146\u0005$\u0013\u0002\u0146\u0147\u00058\u001d\u0002\u0147\u0011",
    "\u0003\u0002\u0002\u0002\u0148\u014a\u0007\u0005\u0002\u0002\u0149\u014b",
    "\t\u0002\u0002\u0002\u014a\u0149\u0003\u0002\u0002\u0002\u014a\u014b",
    "\u0003\u0002\u0002\u0002\u014b\u0158\u0003\u0002\u0002\u0002\u014c\u0154",
    "\u0005\u00d8m\u0002\u014d\u014e\u0007\u0092\u0002\u0002\u014e\u014f",
    "\u0005\u00dco\u0002\u014f\u0150\u0007\b\u0002\u0002\u0150\u0151\u0005",
    "\u00d8m\u0002\u0151\u0152\u0007\u0093\u0002\u0002\u0152\u0154\u0003",
    "\u0002\u0002\u0002\u0153\u014c\u0003\u0002\u0002\u0002\u0153\u014d\u0003",
    "\u0002\u0002\u0002\u0154\u0155\u0003\u0002\u0002\u0002\u0155\u0153\u0003",
    "\u0002\u0002\u0002\u0155\u0156\u0003\u0002\u0002\u0002\u0156\u0159\u0003",
    "\u0002\u0002\u0002\u0157\u0159\u0007\u0096\u0002\u0002\u0158\u0153\u0003",
    "\u0002\u0002\u0002\u0158\u0157\u0003\u0002\u0002\u0002\u0159\u0013\u0003",
    "\u0002\u0002\u0002\u015a\u0172\u0007\t\u0002\u0002\u015b\u015f\u0005",
    "\u0092J\u0002\u015c\u015e\u0005\u001a\u000e\u0002\u015d\u015c\u0003",
    "\u0002\u0002\u0002\u015e\u0161\u0003\u0002\u0002\u0002\u015f\u015d\u0003",
    "\u0002\u0002\u0002\u015f\u0160\u0003\u0002\u0002\u0002\u0160\u0162\u0003",
    "\u0002\u0002\u0002\u0161\u015f\u0003\u0002\u0002\u0002\u0162\u0163\u0005",
    "\"\u0012\u0002\u0163\u0164\u0005$\u0013\u0002\u0164\u0173\u0003\u0002",
    "\u0002\u0002\u0165\u0167\u0005\u001a\u000e\u0002\u0166\u0165\u0003\u0002",
    "\u0002\u0002\u0167\u016a\u0003\u0002\u0002\u0002\u0168\u0166\u0003\u0002",
    "\u0002\u0002\u0168\u0169\u0003\u0002\u0002\u0002\u0169\u016b\u0003\u0002",
    "\u0002\u0002\u016a\u0168\u0003\u0002\u0002\u0002\u016b\u016c\u0007\n",
    "\u0002\u0002\u016c\u016e\u0007\u0094\u0002\u0002\u016d\u016f\u0005h",
    "5\u0002\u016e\u016d\u0003\u0002\u0002\u0002\u016e\u016f\u0003\u0002",
    "\u0002\u0002\u016f\u0170\u0003\u0002\u0002\u0002\u0170\u0171\u0007\u0095",
    "\u0002\u0002\u0171\u0173\u0005$\u0013\u0002\u0172\u015b\u0003\u0002",
    "\u0002\u0002\u0172\u0168\u0003\u0002\u0002\u0002\u0173\u0015\u0003\u0002",
    "\u0002\u0002\u0174\u017b\u0007\u000b\u0002\u0002\u0175\u0177\u0005\u00d6",
    "l\u0002\u0176\u0175\u0003\u0002\u0002\u0002\u0177\u0178\u0003\u0002",
    "\u0002\u0002\u0178\u0176\u0003\u0002\u0002\u0002\u0178\u0179\u0003\u0002",
    "\u0002\u0002\u0179\u017c\u0003\u0002\u0002\u0002\u017a\u017c\u0007\u0096",
    "\u0002\u0002\u017b\u0176\u0003\u0002\u0002\u0002\u017b\u017a\u0003\u0002",
    "\u0002\u0002\u017c\u0180\u0003\u0002\u0002\u0002\u017d\u017f\u0005\u001a",
    "\u000e\u0002\u017e\u017d\u0003\u0002\u0002\u0002\u017f\u0182\u0003\u0002",
    "\u0002\u0002\u0180\u017e\u0003\u0002\u0002\u0002\u0180\u0181\u0003\u0002",
    "\u0002\u0002\u0181\u0184\u0003\u0002\u0002\u0002\u0182\u0180\u0003\u0002",
    "\u0002\u0002\u0183\u0185\u0005\"\u0012\u0002\u0184\u0183\u0003\u0002",
    "\u0002\u0002\u0184\u0185\u0003\u0002\u0002\u0002\u0185\u0186\u0003\u0002",
    "\u0002\u0002\u0186\u0187\u0005$\u0013\u0002\u0187\u0017\u0003\u0002",
    "\u0002\u0002\u0188\u018c\u0007\f\u0002\u0002\u0189\u018b\u0005\u001a",
    "\u000e\u0002\u018a\u0189\u0003\u0002\u0002\u0002\u018b\u018e\u0003\u0002",
    "\u0002\u0002\u018c\u018a\u0003\u0002\u0002\u0002\u018c\u018d\u0003\u0002",
    "\u0002\u0002\u018d\u018f\u0003\u0002\u0002\u0002\u018e\u018c\u0003\u0002",
    "\u0002\u0002\u018f\u0190\u0005\"\u0012\u0002\u0190\u0191\u0005$\u0013",
    "\u0002\u0191\u0019\u0003\u0002\u0002\u0002\u0192\u0195\u0007\r\u0002",
    "\u0002\u0193\u0196\u0005\u001c\u000f\u0002\u0194\u0196\u0005\u001e\u0010",
    "\u0002\u0195\u0193\u0003\u0002\u0002\u0002\u0195\u0194\u0003\u0002\u0002",
    "\u0002\u0196\u001b\u0003\u0002\u0002\u0002\u0197\u0198\u0005 \u0011",
    "\u0002\u0198\u001d\u0003\u0002\u0002\u0002\u0199\u019a\u0007\u000e\u0002",
    "\u0002\u019a\u019b\u0005 \u0011\u0002\u019b\u001f\u0003\u0002\u0002",
    "\u0002\u019c\u019d\u0005\u0110\u0089\u0002\u019d!\u0003\u0002\u0002",
    "\u0002\u019e\u01a0\u0007\n\u0002\u0002\u019f\u019e\u0003\u0002\u0002",
    "\u0002\u019f\u01a0\u0003\u0002\u0002\u0002\u01a0\u01a1\u0003\u0002\u0002",
    "\u0002\u01a1\u01a2\u0005j6\u0002\u01a2#\u0003\u0002\u0002\u0002\u01a3",
    "\u01a5\u0005&\u0014\u0002\u01a4\u01a3\u0003\u0002\u0002\u0002\u01a4",
    "\u01a5\u0003\u0002\u0002\u0002\u01a5\u01a7\u0003\u0002\u0002\u0002\u01a6",
    "\u01a8\u0005*\u0016\u0002\u01a7\u01a6\u0003\u0002\u0002\u0002\u01a7",
    "\u01a8\u0003\u0002\u0002\u0002\u01a8\u01aa\u0003\u0002\u0002\u0002\u01a9",
    "\u01ab\u0005.\u0018\u0002\u01aa\u01a9\u0003\u0002\u0002\u0002\u01aa",
    "\u01ab\u0003\u0002\u0002\u0002\u01ab\u01ad\u0003\u0002\u0002\u0002\u01ac",
    "\u01ae\u00052\u001a\u0002\u01ad\u01ac\u0003\u0002\u0002\u0002\u01ad",
    "\u01ae\u0003\u0002\u0002\u0002\u01ae%\u0003\u0002\u0002\u0002\u01af",
    "\u01b0\u0007\u000f\u0002\u0002\u01b0\u01b2\u0007\u0010\u0002\u0002\u01b1",
    "\u01b3\u0005(\u0015\u0002\u01b2\u01b1\u0003\u0002\u0002\u0002\u01b3",
    "\u01b4\u0003\u0002\u0002\u0002\u01b4\u01b2\u0003\u0002\u0002\u0002\u01b4",
    "\u01b5\u0003\u0002\u0002\u0002\u01b5\'\u0003\u0002\u0002\u0002\u01b6",
    "\u01c2\u0005\u00f2z\u0002\u01b7\u01c2\u0005\u008cG\u0002\u01b8\u01b9",
    "\u0007\u0092\u0002\u0002\u01b9\u01bc\u0005\u00dco\u0002\u01ba\u01bb",
    "\u0007\b\u0002\u0002\u01bb\u01bd\u0005\u00d8m\u0002\u01bc\u01ba\u0003",
    "\u0002\u0002\u0002\u01bc\u01bd\u0003\u0002\u0002\u0002\u01bd\u01be\u0003",
    "\u0002\u0002\u0002\u01be\u01bf\u0007\u0093\u0002\u0002\u01bf\u01c2\u0003",
    "\u0002\u0002\u0002\u01c0\u01c2\u0005\u00d8m\u0002\u01c1\u01b6\u0003",
    "\u0002\u0002\u0002\u01c1\u01b7\u0003\u0002\u0002\u0002\u01c1\u01b8\u0003",
    "\u0002\u0002\u0002\u01c1\u01c0\u0003\u0002\u0002\u0002\u01c2)\u0003",
    "\u0002\u0002\u0002\u01c3\u01c5\u0007\u0011\u0002\u0002\u01c4\u01c6\u0005",
    ",\u0017\u0002\u01c5\u01c4\u0003\u0002\u0002\u0002\u01c6\u01c7\u0003",
    "\u0002\u0002\u0002\u01c7\u01c5\u0003\u0002\u0002\u0002\u01c7\u01c8\u0003",
    "\u0002\u0002\u0002\u01c8+\u0003\u0002\u0002\u0002\u01c9\u01ca\u0005",
    "\u008aF\u0002\u01ca-\u0003\u0002\u0002\u0002\u01cb\u01cc\u0007\u0012",
    "\u0002\u0002\u01cc\u01ce\u0007\u0010\u0002\u0002\u01cd\u01cf\u00050",
    "\u0019\u0002\u01ce\u01cd\u0003\u0002\u0002\u0002\u01cf\u01d0\u0003\u0002",
    "\u0002\u0002\u01d0\u01ce\u0003\u0002\u0002\u0002\u01d0\u01d1\u0003\u0002",
    "\u0002\u0002\u01d1/\u0003\u0002\u0002\u0002\u01d2\u01d3\t\u0003\u0002",
    "\u0002\u01d3\u01d9\u0005\u00f0y\u0002\u01d4\u01d7\u0005\u008aF\u0002",
    "\u01d5\u01d7\u0005\u00d8m\u0002\u01d6\u01d4\u0003\u0002\u0002\u0002",
    "\u01d6\u01d5\u0003\u0002\u0002\u0002\u01d7\u01d9\u0003\u0002\u0002\u0002",
    "\u01d8\u01d2\u0003\u0002\u0002\u0002\u01d8\u01d6\u0003\u0002\u0002\u0002",
    "\u01d91\u0003\u0002\u0002\u0002\u01da\u01dc\u00054\u001b\u0002\u01db",
    "\u01dd\u00056\u001c\u0002\u01dc\u01db\u0003\u0002\u0002\u0002\u01dc",
    "\u01dd\u0003\u0002\u0002\u0002\u01dd\u01e3\u0003\u0002\u0002\u0002\u01de",
    "\u01e0\u00056\u001c\u0002\u01df\u01e1\u00054\u001b\u0002\u01e0\u01df",
    "\u0003\u0002\u0002\u0002\u01e0\u01e1\u0003\u0002\u0002\u0002\u01e1\u01e3",
    "\u0003\u0002\u0002\u0002\u01e2\u01da\u0003\u0002\u0002\u0002\u01e2\u01de",
    "\u0003\u0002\u0002\u0002\u01e33\u0003\u0002\u0002\u0002\u01e4\u01e5",
    "\u0007\u0015\u0002\u0002\u01e5\u01e6\u0007z\u0002\u0002\u01e65\u0003",
    "\u0002\u0002\u0002\u01e7\u01e8\u0007\u0016\u0002\u0002\u01e8\u01e9\u0007",
    "z\u0002\u0002\u01e97\u0003\u0002\u0002\u0002\u01ea\u01eb\u0007\u0017",
    "\u0002\u0002\u01eb\u01ed\u0005|?\u0002\u01ec\u01ea\u0003\u0002\u0002",
    "\u0002\u01ec\u01ed\u0003\u0002\u0002\u0002\u01ed9\u0003\u0002\u0002",
    "\u0002\u01ee\u01f4\u0005\b\u0005\u0002\u01ef\u01f2\u0005<\u001f\u0002",
    "\u01f0\u01f1\u0007\u009b\u0002\u0002\u01f1\u01f3\u0005:\u001e\u0002",
    "\u01f2\u01f0\u0003\u0002\u0002\u0002\u01f2\u01f3\u0003\u0002\u0002\u0002",
    "\u01f3\u01f5\u0003\u0002\u0002\u0002\u01f4\u01ef\u0003\u0002\u0002\u0002",
    "\u01f4\u01f5\u0003\u0002\u0002\u0002\u01f5;\u0003\u0002\u0002\u0002",
    "\u01f6\u0202\u0005> \u0002\u01f7\u0202\u0005@!\u0002\u01f8\u0202\u0005",
    "B\"\u0002\u01f9\u0202\u0005F$\u0002\u01fa\u0202\u0005H%\u0002\u01fb",
    "\u0202\u0005J&\u0002\u01fc\u0202\u0005D#\u0002\u01fd\u0202\u0005L\'",
    "\u0002\u01fe\u0202\u0005N(\u0002\u01ff\u0202\u0005P)\u0002\u0200\u0202",
    "\u0005R*\u0002\u0201\u01f6\u0003\u0002\u0002\u0002\u0201\u01f7\u0003",
    "\u0002\u0002\u0002\u0201\u01f8\u0003\u0002\u0002\u0002\u0201\u01f9\u0003",
    "\u0002\u0002\u0002\u0201\u01fa\u0003\u0002\u0002\u0002\u0201\u01fb\u0003",
    "\u0002\u0002\u0002\u0201\u01fc\u0003\u0002\u0002\u0002\u0201\u01fd\u0003",
    "\u0002\u0002\u0002\u0201\u01fe\u0003\u0002\u0002\u0002\u0201\u01ff\u0003",
    "\u0002\u0002\u0002\u0201\u0200\u0003\u0002\u0002\u0002\u0202=\u0003",
    "\u0002\u0002\u0002\u0203\u0205\u0007\u0018\u0002\u0002\u0204\u0206\u0007",
    "\u0019\u0002\u0002\u0205\u0204\u0003\u0002\u0002\u0002\u0205\u0206\u0003",
    "\u0002\u0002\u0002\u0206\u0207\u0003\u0002\u0002\u0002\u0207\u020a\u0005",
    "\u0110\u0089\u0002\u0208\u0209\u0007\u001a\u0002\u0002\u0209\u020b\u0005",
    "\\/\u0002\u020a\u0208\u0003\u0002\u0002\u0002\u020a\u020b\u0003\u0002",
    "\u0002\u0002\u020b?\u0003\u0002\u0002\u0002\u020c\u020e\u0007\u001b",
    "\u0002\u0002\u020d\u020f\u0007\u0019\u0002\u0002\u020e\u020d\u0003\u0002",
    "\u0002\u0002\u020e\u020f\u0003\u0002\u0002\u0002\u020f\u0210\u0003\u0002",
    "\u0002\u0002\u0210\u0211\u0005^0\u0002\u0211A\u0003\u0002\u0002\u0002",
    "\u0212\u0214\u0007\u001c\u0002\u0002\u0213\u0215\u0007\u0019\u0002\u0002",
    "\u0214\u0213\u0003\u0002\u0002\u0002\u0214\u0215\u0003\u0002\u0002\u0002",
    "\u0215\u0216\u0003\u0002\u0002\u0002\u0216\u0217\u0005^0\u0002\u0217",
    "C\u0003\u0002\u0002\u0002\u0218\u021a\u0007\u001d\u0002\u0002\u0219",
    "\u021b\u0007\u0019\u0002\u0002\u021a\u0219\u0003\u0002\u0002\u0002\u021a",
    "\u021b\u0003\u0002\u0002\u0002\u021b\u021c\u0003\u0002\u0002\u0002\u021c",
    "\u021d\u0005\\/\u0002\u021dE\u0003\u0002\u0002\u0002\u021e\u0220\u0007",
    "\u001e\u0002\u0002\u021f\u0221\u0007\u0019\u0002\u0002\u0220\u021f\u0003",
    "\u0002\u0002\u0002\u0220\u0221\u0003\u0002\u0002\u0002\u0221\u0222\u0003",
    "\u0002\u0002\u0002\u0222\u0223\u0005Z.\u0002\u0223\u0224\u0007\u001f",
    "\u0002\u0002\u0224\u0225\u0005Z.\u0002\u0225G\u0003\u0002\u0002\u0002",
    "\u0226\u0228\u0007 \u0002\u0002\u0227\u0229\u0007\u0019\u0002\u0002",
    "\u0228\u0227\u0003\u0002\u0002\u0002\u0228\u0229\u0003\u0002\u0002\u0002",
    "\u0229\u022a\u0003\u0002\u0002\u0002\u022a\u022b\u0005Z.\u0002\u022b",
    "\u022c\u0007\u001f\u0002\u0002\u022c\u022d\u0005Z.\u0002\u022dI\u0003",
    "\u0002\u0002\u0002\u022e\u0230\u0007!\u0002\u0002\u022f\u0231\u0007",
    "\u0019\u0002\u0002\u0230\u022f\u0003\u0002\u0002\u0002\u0230\u0231\u0003",
    "\u0002\u0002\u0002\u0231\u0232\u0003\u0002\u0002\u0002\u0232\u0233\u0005",
    "Z.\u0002\u0233\u0234\u0007\u001f\u0002\u0002\u0234\u0235\u0005Z.\u0002",
    "\u0235K\u0003\u0002\u0002\u0002\u0236\u0237\u0007\"\u0002\u0002\u0237",
    "\u0238\u0005b2\u0002\u0238M\u0003\u0002\u0002\u0002\u0239\u023a\u0007",
    "#\u0002\u0002\u023a\u023b\u0005b2\u0002\u023bO\u0003\u0002\u0002\u0002",
    "\u023c\u023d\u0007$\u0002\u0002\u023d\u023e\u0005`1\u0002\u023eQ\u0003",
    "\u0002\u0002\u0002\u023f\u0240\u0007%\u0002\u0002\u0240\u0242\u0005",
    "\u0110\u0089\u0002\u0241\u023f\u0003\u0002\u0002\u0002\u0241\u0242\u0003",
    "\u0002\u0002\u0002\u0242\u0248\u0003\u0002\u0002\u0002\u0243\u0245\u0005",
    "T+\u0002\u0244\u0246\u0005V,\u0002\u0245\u0244\u0003\u0002\u0002\u0002",
    "\u0245\u0246\u0003\u0002\u0002\u0002\u0246\u0249\u0003\u0002\u0002\u0002",
    "\u0247\u0249\u0005V,\u0002\u0248\u0243\u0003\u0002\u0002\u0002\u0248",
    "\u0247\u0003\u0002\u0002\u0002\u0249\u024d\u0003\u0002\u0002\u0002\u024a",
    "\u024c\u0005X-\u0002\u024b\u024a\u0003\u0002\u0002\u0002\u024c\u024f",
    "\u0003\u0002\u0002\u0002\u024d\u024b\u0003\u0002\u0002\u0002\u024d\u024e",
    "\u0003\u0002\u0002\u0002\u024e\u0250\u0003\u0002\u0002\u0002\u024f\u024d",
    "\u0003\u0002\u0002\u0002\u0250\u0251\u0007\n\u0002\u0002\u0251\u0252",
    "\u0005j6\u0002\u0252S\u0003\u0002\u0002\u0002\u0253\u0254\u0007&\u0002",
    "\u0002\u0254\u0255\u0005`1\u0002\u0255U\u0003\u0002\u0002\u0002\u0256",
    "\u0257\u0007\'\u0002\u0002\u0257\u0258\u0005`1\u0002\u0258W\u0003\u0002",
    "\u0002\u0002\u0259\u025d\u0007(\u0002\u0002\u025a\u025e\u0005\u0110",
    "\u0089\u0002\u025b\u025c\u0007\u000e\u0002\u0002\u025c\u025e\u0005\u0110",
    "\u0089\u0002\u025d\u025a\u0003\u0002\u0002\u0002\u025d\u025b\u0003\u0002",
    "\u0002\u0002\u025eY\u0003\u0002\u0002\u0002\u025f\u0265\u0007)\u0002",
    "\u0002\u0260\u0262\u0007*\u0002\u0002\u0261\u0260\u0003\u0002\u0002",
    "\u0002\u0261\u0262\u0003\u0002\u0002\u0002\u0262\u0263\u0003\u0002\u0002",
    "\u0002\u0263\u0265\u0005\u0110\u0089\u0002\u0264\u025f\u0003\u0002\u0002",
    "\u0002\u0264\u0261\u0003\u0002\u0002\u0002\u0265[\u0003\u0002\u0002",
    "\u0002\u0266\u0269\u0007*\u0002\u0002\u0267\u0269\u0005\u0110\u0089",
    "\u0002\u0268\u0266\u0003\u0002\u0002\u0002\u0268\u0267\u0003\u0002\u0002",
    "\u0002\u0269]\u0003\u0002\u0002\u0002\u026a\u026f\u0005\\/\u0002\u026b",
    "\u026f\u0007)\u0002\u0002\u026c\u026f\u0007\u000e\u0002\u0002\u026d",
    "\u026f\u0007+\u0002\u0002\u026e\u026a\u0003\u0002\u0002\u0002\u026e",
    "\u026b\u0003\u0002\u0002\u0002\u026e\u026c\u0003\u0002\u0002\u0002\u026e",
    "\u026d\u0003\u0002\u0002\u0002\u026f_\u0003\u0002\u0002\u0002\u0270",
    "\u0271\u0007\u0094\u0002\u0002\u0271\u0272\u0005d3\u0002\u0272\u0273",
    "\u0007\u0095\u0002\u0002\u0273a\u0003\u0002\u0002\u0002\u0274\u0275",
    "\u0007\u0094\u0002\u0002\u0275\u0276\u0005d3\u0002\u0276\u0277\u0007",
    "\u0095\u0002\u0002\u0277c\u0003\u0002\u0002\u0002\u0278\u027a\u0005",
    "h5\u0002\u0279\u0278\u0003\u0002\u0002\u0002\u0279\u027a\u0003\u0002",
    "\u0002\u0002\u027a\u0284\u0003\u0002\u0002\u0002\u027b\u027d\u0005f",
    "4\u0002\u027c\u027e\u0007\u0099\u0002\u0002\u027d\u027c\u0003\u0002",
    "\u0002\u0002\u027d\u027e\u0003\u0002\u0002\u0002\u027e\u0280\u0003\u0002",
    "\u0002\u0002\u027f\u0281\u0005h5\u0002\u0280\u027f\u0003\u0002\u0002",
    "\u0002\u0280\u0281\u0003\u0002\u0002\u0002\u0281\u0283\u0003\u0002\u0002",
    "\u0002\u0282\u027b\u0003\u0002\u0002\u0002\u0283\u0286\u0003\u0002\u0002",
    "\u0002\u0284\u0282\u0003\u0002\u0002\u0002\u0284\u0285\u0003\u0002\u0002",
    "\u0002\u0285e\u0003\u0002\u0002\u0002\u0286\u0284\u0003\u0002\u0002",
    "\u0002\u0287\u0288\u0007*\u0002\u0002\u0288\u0289\u0005\u00d6l\u0002",
    "\u0289\u028b\u0007\u0094\u0002\u0002\u028a\u028c\u0005h5\u0002\u028b",
    "\u028a\u0003\u0002\u0002\u0002\u028b\u028c\u0003\u0002\u0002\u0002\u028c",
    "\u028d\u0003\u0002\u0002\u0002\u028d\u028e\u0007\u0095\u0002\u0002\u028e",
    "g\u0003\u0002\u0002\u0002\u028f\u0294\u0005\u0096L\u0002\u0290\u0292",
    "\u0007\u0099\u0002\u0002\u0291\u0293\u0005h5\u0002\u0292\u0291\u0003",
    "\u0002\u0002\u0002\u0292\u0293\u0003\u0002\u0002\u0002\u0293\u0295\u0003",
    "\u0002\u0002\u0002\u0294\u0290\u0003\u0002\u0002\u0002\u0294\u0295\u0003",
    "\u0002\u0002\u0002\u0295i\u0003\u0002\u0002\u0002\u0296\u0299\u0007",
    "\u0094\u0002\u0002\u0297\u029a\u0005\u0010\t\u0002\u0298\u029a\u0005",
    "l7\u0002\u0299\u0297\u0003\u0002\u0002\u0002\u0299\u0298\u0003\u0002",
    "\u0002\u0002\u029a\u029b\u0003\u0002\u0002\u0002\u029b\u029c\u0005l",
    "7\u0002\u029c\u029d\u0007\u0095\u0002\u0002\u029dk\u0003\u0002\u0002",
    "\u0002\u029e\u02a0\u0005n8\u0002\u029f\u029e\u0003\u0002\u0002\u0002",
    "\u029f\u02a0\u0003\u0002\u0002\u0002\u02a0\u02aa\u0003\u0002\u0002\u0002",
    "\u02a1\u02a3\u0005p9\u0002\u02a2\u02a4\u0007\u0099\u0002\u0002\u02a3",
    "\u02a2\u0003\u0002\u0002\u0002\u02a3\u02a4\u0003\u0002\u0002\u0002\u02a4",
    "\u02a6\u0003\u0002\u0002\u0002\u02a5\u02a7\u0005n8\u0002\u02a6\u02a5",
    "\u0003\u0002\u0002\u0002\u02a6\u02a7\u0003\u0002\u0002\u0002\u02a7\u02a9",
    "\u0003\u0002\u0002\u0002\u02a8\u02a1\u0003\u0002\u0002\u0002\u02a9\u02ac",
    "\u0003\u0002\u0002\u0002\u02aa\u02a8\u0003\u0002\u0002\u0002\u02aa\u02ab",
    "\u0003\u0002\u0002\u0002\u02abm\u0003\u0002\u0002\u0002\u02ac\u02aa",
    "\u0003\u0002\u0002\u0002\u02ad\u02b2\u0005\u00a2R\u0002\u02ae\u02b0",
    "\u0007\u0099\u0002\u0002\u02af\u02b1\u0005n8\u0002\u02b0\u02af\u0003",
    "\u0002\u0002\u0002\u02b0\u02b1\u0003\u0002\u0002\u0002\u02b1\u02b3\u0003",
    "\u0002\u0002\u0002\u02b2\u02ae\u0003\u0002\u0002\u0002\u02b2\u02b3\u0003",
    "\u0002\u0002\u0002\u02b3o\u0003\u0002\u0002\u0002\u02b4\u02bd\u0005",
    "\u0086D\u0002\u02b5\u02bd\u0005r:\u0002\u02b6\u02bd\u0005\u0084C\u0002",
    "\u02b7\u02bd\u0005t;\u0002\u02b8\u02bd\u0005v<\u0002\u02b9\u02bd\u0005",
    "\u0088E\u0002\u02ba\u02bd\u0005x=\u0002\u02bb\u02bd\u0005z>\u0002\u02bc",
    "\u02b4\u0003\u0002\u0002\u0002\u02bc\u02b5\u0003\u0002\u0002\u0002\u02bc",
    "\u02b6\u0003\u0002\u0002\u0002\u02bc\u02b7\u0003\u0002\u0002\u0002\u02bc",
    "\u02b8\u0003\u0002\u0002\u0002\u02bc\u02b9\u0003\u0002\u0002\u0002\u02bc",
    "\u02ba\u0003\u0002\u0002\u0002\u02bc\u02bb\u0003\u0002\u0002\u0002\u02bd",
    "q\u0003\u0002\u0002\u0002\u02be\u02bf\u0007,\u0002\u0002\u02bf\u02c0",
    "\u0005j6\u0002\u02c0s\u0003\u0002\u0002\u0002\u02c1\u02c2\u0007*\u0002",
    "\u0002\u02c2\u02c3\u0005\u00d6l\u0002\u02c3\u02c4\u0005j6\u0002\u02c4",
    "u\u0003\u0002\u0002\u0002\u02c5\u02c7\u0007-\u0002\u0002\u02c6\u02c8",
    "\u0007\u0019\u0002\u0002\u02c7\u02c6\u0003\u0002\u0002\u0002\u02c7\u02c8",
    "\u0003\u0002\u0002\u0002\u02c8\u02c9\u0003\u0002\u0002\u0002\u02c9\u02ca",
    "\u0005\u00d6l\u0002\u02ca\u02cb\u0005j6\u0002\u02cbw\u0003\u0002\u0002",
    "\u0002\u02cc\u02cd\u0007.\u0002\u0002\u02cd\u02ce\u0007\u0092\u0002",
    "\u0002\u02ce\u02cf\u0005\u00dco\u0002\u02cf\u02d0\u0007\b\u0002\u0002",
    "\u02d0\u02d1\u0005\u00d8m\u0002\u02d1\u02d2\u0007\u0093\u0002\u0002",
    "\u02d2y\u0003\u0002\u0002\u0002\u02d3\u02d4\u0007\u0017\u0002\u0002",
    "\u02d4\u02d5\u0005|?\u0002\u02d5{\u0003\u0002\u0002\u0002\u02d6\u02d9",
    "\u0005~@\u0002\u02d7\u02d9\u0005\u0080A\u0002\u02d8\u02d6\u0003\u0002",
    "\u0002\u0002\u02d8\u02d7\u0003\u0002\u0002\u0002\u02d9}\u0003\u0002",
    "\u0002\u0002\u02da\u02db\u0005\u00d8m\u0002\u02db\u02df\u0007\u0094",
    "\u0002\u0002\u02dc\u02de\u0005\u0082B\u0002\u02dd\u02dc\u0003\u0002",
    "\u0002\u0002\u02de\u02e1\u0003\u0002\u0002\u0002\u02df\u02dd\u0003\u0002",
    "\u0002\u0002\u02df\u02e0\u0003\u0002\u0002\u0002\u02e0\u02e2\u0003\u0002",
    "\u0002\u0002\u02e1\u02df\u0003\u0002\u0002\u0002\u02e2\u02e3\u0007\u0095",
    "\u0002\u0002\u02e3\u007f\u0003\u0002\u0002\u0002\u02e4\u02ee\u0005\u011a",
    "\u008e\u0002\u02e5\u02e9\u0007\u0092\u0002\u0002\u02e6\u02e8\u0005\u00d8",
    "m\u0002\u02e7\u02e6\u0003\u0002\u0002\u0002\u02e8\u02eb\u0003\u0002",
    "\u0002\u0002\u02e9\u02e7\u0003\u0002\u0002\u0002\u02e9\u02ea\u0003\u0002",
    "\u0002\u0002\u02ea\u02ec\u0003\u0002\u0002\u0002\u02eb\u02e9\u0003\u0002",
    "\u0002\u0002\u02ec\u02ee\u0007\u0093\u0002\u0002\u02ed\u02e4\u0003\u0002",
    "\u0002\u0002\u02ed\u02e5\u0003\u0002\u0002\u0002\u02ee\u02ef\u0003\u0002",
    "\u0002\u0002\u02ef\u02fb\u0007\u0094\u0002\u0002\u02f0\u02f4\u0007\u0092",
    "\u0002\u0002\u02f1\u02f3\u0005\u0082B\u0002\u02f2\u02f1\u0003\u0002",
    "\u0002\u0002\u02f3\u02f6\u0003\u0002\u0002\u0002\u02f4\u02f2\u0003\u0002",
    "\u0002\u0002\u02f4\u02f5\u0003\u0002\u0002\u0002\u02f5\u02f7\u0003\u0002",
    "\u0002\u0002\u02f6\u02f4\u0003\u0002\u0002\u0002\u02f7\u02fa\u0007\u0093",
    "\u0002\u0002\u02f8\u02fa\u0005\u011a\u008e\u0002\u02f9\u02f0\u0003\u0002",
    "\u0002\u0002\u02f9\u02f8\u0003\u0002\u0002\u0002\u02fa\u02fd\u0003\u0002",
    "\u0002\u0002\u02fb\u02f9\u0003\u0002\u0002\u0002\u02fb\u02fc\u0003\u0002",
    "\u0002\u0002\u02fc\u02fe\u0003\u0002\u0002\u0002\u02fd\u02fb\u0003\u0002",
    "\u0002\u0002\u02fe\u02ff\u0007\u0095\u0002\u0002\u02ff\u0081\u0003\u0002",
    "\u0002\u0002\u0300\u0306\u0005\u0110\u0089\u0002\u0301\u0306\u0005\u0102",
    "\u0082\u0002\u0302\u0306\u0005\u0104\u0083\u0002\u0303\u0306\u0005\u010c",
    "\u0087\u0002\u0304\u0306\u0007/\u0002\u0002\u0305\u0300\u0003\u0002",
    "\u0002\u0002\u0305\u0301\u0003\u0002\u0002\u0002\u0305\u0302\u0003\u0002",
    "\u0002\u0002\u0305\u0303\u0003\u0002\u0002\u0002\u0305\u0304\u0003\u0002",
    "\u0002\u0002\u0306\u0083\u0003\u0002\u0002\u0002\u0307\u0308\u00070",
    "\u0002\u0002\u0308\u0309\u0005j6\u0002\u0309\u0085\u0003\u0002\u0002",
    "\u0002\u030a\u030f\u0005j6\u0002\u030b\u030c\u00071\u0002\u0002\u030c",
    "\u030e\u0005j6\u0002\u030d\u030b\u0003\u0002\u0002\u0002\u030e\u0311",
    "\u0003\u0002\u0002\u0002\u030f\u030d\u0003\u0002\u0002\u0002\u030f\u0310",
    "\u0003\u0002\u0002\u0002\u0310\u0087\u0003\u0002\u0002\u0002\u0311\u030f",
    "\u0003\u0002\u0002\u0002\u0312\u0313\u00072\u0002\u0002\u0313\u0314",
    "\u0005\u008aF\u0002\u0314\u0089\u0003\u0002\u0002\u0002\u0315\u0319",
    "\u0005\u00f0y\u0002\u0316\u0319\u0005\u00f2z\u0002\u0317\u0319\u0005",
    "\u008cG\u0002\u0318\u0315\u0003\u0002\u0002\u0002\u0318\u0316\u0003",
    "\u0002\u0002\u0002\u0318\u0317\u0003\u0002\u0002\u0002\u0319\u008b\u0003",
    "\u0002\u0002\u0002\u031a\u031b\u0005\u0110\u0089\u0002\u031b\u031c\u0005",
    "\u008eH\u0002\u031c\u008d\u0003\u0002\u0002\u0002\u031d\u032d\u0005",
    "\u011a\u008e\u0002\u031e\u0320\u0007\u0092\u0002\u0002\u031f\u0321\u0007",
    "\u0006\u0002\u0002\u0320\u031f\u0003\u0002\u0002\u0002\u0320\u0321\u0003",
    "\u0002\u0002\u0002\u0321\u0322\u0003\u0002\u0002\u0002\u0322\u0327\u0005",
    "\u00dco\u0002\u0323\u0324\u0007\u009a\u0002\u0002\u0324\u0326\u0005",
    "\u00dco\u0002\u0325\u0323\u0003\u0002\u0002\u0002\u0326\u0329\u0003",
    "\u0002\u0002\u0002\u0327\u0325\u0003\u0002\u0002\u0002\u0327\u0328\u0003",
    "\u0002\u0002\u0002\u0328\u032a\u0003\u0002\u0002\u0002\u0329\u0327\u0003",
    "\u0002\u0002\u0002\u032a\u032b\u0007\u0093\u0002\u0002\u032b\u032d\u0003",
    "\u0002\u0002\u0002\u032c\u031d\u0003\u0002\u0002\u0002\u032c\u031e\u0003",
    "\u0002\u0002\u0002\u032d\u008f\u0003\u0002\u0002\u0002\u032e\u033b\u0005",
    "\u011a\u008e\u0002\u032f\u0330\u0007\u0092\u0002\u0002\u0330\u0335\u0005",
    "\u00dco\u0002\u0331\u0332\u0007\u009a\u0002\u0002\u0332\u0334\u0005",
    "\u00dco\u0002\u0333\u0331\u0003\u0002\u0002\u0002\u0334\u0337\u0003",
    "\u0002\u0002\u0002\u0335\u0333\u0003\u0002\u0002\u0002\u0335\u0336\u0003",
    "\u0002\u0002\u0002\u0336\u0338\u0003\u0002\u0002\u0002\u0337\u0335\u0003",
    "\u0002\u0002\u0002\u0338\u0339\u0007\u0093\u0002\u0002\u0339\u033b\u0003",
    "\u0002\u0002\u0002\u033a\u032e\u0003\u0002\u0002\u0002\u033a\u032f\u0003",
    "\u0002\u0002\u0002\u033b\u0091\u0003\u0002\u0002\u0002\u033c\u033e\u0007",
    "\u0094\u0002\u0002\u033d\u033f\u0005\u0094K\u0002\u033e\u033d\u0003",
    "\u0002\u0002\u0002\u033e\u033f\u0003\u0002\u0002\u0002\u033f\u0340\u0003",
    "\u0002\u0002\u0002\u0340\u0341\u0007\u0095\u0002\u0002\u0341\u0093\u0003",
    "\u0002\u0002\u0002\u0342\u0347\u0005\u0096L\u0002\u0343\u0345\u0007",
    "\u0099\u0002\u0002\u0344\u0346\u0005\u0094K\u0002\u0345\u0344\u0003",
    "\u0002\u0002\u0002\u0345\u0346\u0003\u0002\u0002\u0002\u0346\u0348\u0003",
    "\u0002\u0002\u0002\u0347\u0343\u0003\u0002\u0002\u0002\u0347\u0348\u0003",
    "\u0002\u0002\u0002\u0348\u0095\u0003\u0002\u0002\u0002\u0349\u034a\u0005",
    "\u00d4k\u0002\u034a\u034b\u0005\u009aN\u0002\u034b\u0350\u0003\u0002",
    "\u0002\u0002\u034c\u034d\u0005\u00c4c\u0002\u034d\u034e\u0005\u0098",
    "M\u0002\u034e\u0350\u0003\u0002\u0002\u0002\u034f\u0349\u0003\u0002",
    "\u0002\u0002\u034f\u034c\u0003\u0002\u0002\u0002\u0350\u0097\u0003\u0002",
    "\u0002\u0002\u0351\u0353\u0005\u009aN\u0002\u0352\u0351\u0003\u0002",
    "\u0002\u0002\u0352\u0353\u0003\u0002\u0002\u0002\u0353\u0099\u0003\u0002",
    "\u0002\u0002\u0354\u0355\u0005\u009cO\u0002\u0355\u035e\u0005\u009e",
    "P\u0002\u0356\u035a\u0007\u009b\u0002\u0002\u0357\u0358\u0005\u009c",
    "O\u0002\u0358\u0359\u0005\u009eP\u0002\u0359\u035b\u0003\u0002\u0002",
    "\u0002\u035a\u0357\u0003\u0002\u0002\u0002\u035a\u035b\u0003\u0002\u0002",
    "\u0002\u035b\u035d\u0003\u0002\u0002\u0002\u035c\u0356\u0003\u0002\u0002",
    "\u0002\u035d\u0360\u0003\u0002\u0002\u0002\u035e\u035c\u0003\u0002\u0002",
    "\u0002\u035e\u035f\u0003\u0002\u0002\u0002\u035f\u009b\u0003\u0002\u0002",
    "\u0002\u0360\u035e\u0003\u0002\u0002\u0002\u0361\u0364\u0005\u00d6l",
    "\u0002\u0362\u0364\u00073\u0002\u0002\u0363\u0361\u0003\u0002\u0002",
    "\u0002\u0363\u0362\u0003\u0002\u0002\u0002\u0364\u009d\u0003\u0002\u0002",
    "\u0002\u0365\u036a\u0005\u00a0Q\u0002\u0366\u0367\u0007\u009a\u0002",
    "\u0002\u0367\u0369\u0005\u00a0Q\u0002\u0368\u0366\u0003\u0002\u0002",
    "\u0002\u0369\u036c\u0003\u0002\u0002\u0002\u036a\u0368\u0003\u0002\u0002",
    "\u0002\u036a\u036b\u0003\u0002\u0002\u0002\u036b\u009f\u0003\u0002\u0002",
    "\u0002\u036c\u036a\u0003\u0002\u0002\u0002\u036d\u036e\u0005\u00d0i",
    "\u0002\u036e\u00a1\u0003\u0002\u0002\u0002\u036f\u0370\u0005\u00d4k",
    "\u0002\u0370\u0371\u0005\u00a6T\u0002\u0371\u0376\u0003\u0002\u0002",
    "\u0002\u0372\u0373\u0005\u00c8e\u0002\u0373\u0374\u0005\u00a4S\u0002",
    "\u0374\u0376\u0003\u0002\u0002\u0002\u0375\u036f\u0003\u0002\u0002\u0002",
    "\u0375\u0372\u0003\u0002\u0002\u0002\u0376\u00a3\u0003\u0002\u0002\u0002",
    "\u0377\u0379\u0005\u00a6T\u0002\u0378\u0377\u0003\u0002\u0002\u0002",
    "\u0378\u0379\u0003\u0002\u0002\u0002\u0379\u00a5\u0003\u0002\u0002\u0002",
    "\u037a\u037d\u0005\u00a8U\u0002\u037b\u037d\u0005\u00aaV\u0002\u037c",
    "\u037a\u0003\u0002\u0002\u0002\u037c\u037b\u0003\u0002\u0002\u0002\u037d",
    "\u037e\u0003\u0002\u0002\u0002\u037e\u038a\u0005\u00acW\u0002\u037f",
    "\u0386\u0007\u009b\u0002\u0002\u0380\u0383\u0005\u00a8U\u0002\u0381",
    "\u0383\u0005\u00aaV\u0002\u0382\u0380\u0003\u0002\u0002\u0002\u0382",
    "\u0381\u0003\u0002\u0002\u0002\u0383\u0384\u0003\u0002\u0002\u0002\u0384",
    "\u0385\u0005\u009eP\u0002\u0385\u0387\u0003\u0002\u0002\u0002\u0386",
    "\u0382\u0003\u0002\u0002\u0002\u0386\u0387\u0003\u0002\u0002\u0002\u0387",
    "\u0389\u0003\u0002\u0002\u0002\u0388\u037f\u0003\u0002\u0002\u0002\u0389",
    "\u038c\u0003\u0002\u0002\u0002\u038a\u0388\u0003\u0002\u0002\u0002\u038a",
    "\u038b\u0003\u0002\u0002\u0002\u038b\u00a7\u0003\u0002\u0002\u0002\u038c",
    "\u038a\u0003\u0002\u0002\u0002\u038d\u038e\u0005\u00b0Y\u0002\u038e",
    "\u00a9\u0003\u0002\u0002\u0002\u038f\u0390\u0005\u00d8m\u0002\u0390",
    "\u00ab\u0003\u0002\u0002\u0002\u0391\u0396\u0005\u00aeX\u0002\u0392",
    "\u0393\u0007\u009a\u0002\u0002\u0393\u0395\u0005\u00aeX\u0002\u0394",
    "\u0392\u0003\u0002\u0002\u0002\u0395\u0398\u0003\u0002\u0002\u0002\u0396",
    "\u0394\u0003\u0002\u0002\u0002\u0396\u0397\u0003\u0002\u0002\u0002\u0397",
    "\u00ad\u0003\u0002\u0002\u0002\u0398\u0396\u0003\u0002\u0002\u0002\u0399",
    "\u039a\u0005\u00d2j\u0002\u039a\u00af\u0003\u0002\u0002\u0002\u039b",
    "\u039c\u0005\u00b2Z\u0002\u039c\u00b1\u0003\u0002\u0002\u0002\u039d",
    "\u03a2\u0005\u00b4[\u0002\u039e\u039f\u0007\u009c\u0002\u0002\u039f",
    "\u03a1\u0005\u00b4[\u0002\u03a0\u039e\u0003\u0002\u0002\u0002\u03a1",
    "\u03a4\u0003\u0002\u0002\u0002\u03a2\u03a0\u0003\u0002\u0002\u0002\u03a2",
    "\u03a3\u0003\u0002\u0002\u0002\u03a3\u00b3\u0003\u0002\u0002\u0002\u03a4",
    "\u03a2\u0003\u0002\u0002\u0002\u03a5\u03aa\u0005\u00b8]\u0002\u03a6",
    "\u03a7\u0007\u009d\u0002\u0002\u03a7\u03a9\u0005\u00b8]\u0002\u03a8",
    "\u03a6\u0003\u0002\u0002\u0002\u03a9\u03ac\u0003\u0002\u0002\u0002\u03aa",
    "\u03a8\u0003\u0002\u0002\u0002\u03aa\u03ab\u0003\u0002\u0002\u0002\u03ab",
    "\u00b5\u0003\u0002\u0002\u0002\u03ac\u03aa\u0003\u0002\u0002\u0002\u03ad",
    "\u03af\u0005\u00bc_\u0002\u03ae\u03b0\u0005\u00ba^\u0002\u03af\u03ae",
    "\u0003\u0002\u0002\u0002\u03af\u03b0\u0003\u0002\u0002\u0002\u03b0\u00b7",
    "\u0003\u0002\u0002\u0002\u03b1\u03b5\u0005\u00b6\\\u0002\u03b2\u03b3",
    "\u0007\u009e\u0002\u0002\u03b3\u03b5\u0005\u00b6\\\u0002\u03b4\u03b1",
    "\u0003\u0002\u0002\u0002\u03b4\u03b2\u0003\u0002\u0002\u0002\u03b5\u00b9",
    "\u0003\u0002\u0002\u0002\u03b6\u03b7\t\u0004\u0002\u0002\u03b7\u00bb",
    "\u0003\u0002\u0002\u0002\u03b8\u03c1\u0005\u0110\u0089\u0002\u03b9\u03c1",
    "\u00073\u0002\u0002\u03ba\u03bb\u0007\u00a0\u0002\u0002\u03bb\u03c1",
    "\u0005\u00be`\u0002\u03bc\u03bd\u0007\u0092\u0002\u0002\u03bd\u03be",
    "\u0005\u00b0Y\u0002\u03be\u03bf\u0007\u0093\u0002\u0002\u03bf\u03c1",
    "\u0003\u0002\u0002\u0002\u03c0\u03b8\u0003\u0002\u0002\u0002\u03c0\u03b9",
    "\u0003\u0002\u0002\u0002\u03c0\u03ba\u0003\u0002\u0002\u0002\u03c0\u03bc",
    "\u0003\u0002\u0002\u0002\u03c1\u00bd\u0003\u0002\u0002\u0002\u03c2\u03d0",
    "\u0005\u00c0a\u0002\u03c3\u03cc\u0007\u0092\u0002\u0002\u03c4\u03c9",
    "\u0005\u00c0a\u0002\u03c5\u03c6\u0007\u009c\u0002\u0002\u03c6\u03c8",
    "\u0005\u00c0a\u0002\u03c7\u03c5\u0003\u0002\u0002\u0002\u03c8\u03cb",
    "\u0003\u0002\u0002\u0002\u03c9\u03c7\u0003\u0002\u0002\u0002\u03c9\u03ca",
    "\u0003\u0002\u0002\u0002\u03ca\u03cd\u0003\u0002\u0002\u0002\u03cb\u03c9",
    "\u0003\u0002\u0002\u0002\u03cc\u03c4\u0003\u0002\u0002\u0002\u03cc\u03cd",
    "\u0003\u0002\u0002\u0002\u03cd\u03ce\u0003\u0002\u0002\u0002\u03ce\u03d0",
    "\u0007\u0093\u0002\u0002\u03cf\u03c2\u0003\u0002\u0002\u0002\u03cf\u03c3",
    "\u0003\u0002\u0002\u0002\u03d0\u00bf\u0003\u0002\u0002\u0002\u03d1\u03d9",
    "\u0005\u0110\u0089\u0002\u03d2\u03d9\u00073\u0002\u0002\u03d3\u03d6",
    "\u0007\u009e\u0002\u0002\u03d4\u03d7\u0005\u0110\u0089\u0002\u03d5\u03d7",
    "\u00073\u0002\u0002\u03d6\u03d4\u0003\u0002\u0002\u0002\u03d6\u03d5",
    "\u0003\u0002\u0002\u0002\u03d7\u03d9\u0003\u0002\u0002\u0002\u03d8\u03d1",
    "\u0003\u0002\u0002\u0002\u03d8\u03d2\u0003\u0002\u0002\u0002\u03d8\u03d3",
    "\u0003\u0002\u0002\u0002\u03d9\u00c1\u0003\u0002\u0002\u0002\u03da\u03db",
    "\u0007z\u0002\u0002\u03db\u00c3\u0003\u0002\u0002\u0002\u03dc\u03df",
    "\u0005\u00ccg\u0002\u03dd\u03df\u0005\u00c6d\u0002\u03de\u03dc\u0003",
    "\u0002\u0002\u0002\u03de\u03dd\u0003\u0002\u0002\u0002\u03df\u00c5\u0003",
    "\u0002\u0002\u0002\u03e0\u03e1\u0007\u00a1\u0002\u0002\u03e1\u03e2\u0005",
    "\u009aN\u0002\u03e2\u03e3\u0007\u00a2\u0002\u0002\u03e3\u00c7\u0003",
    "\u0002\u0002\u0002\u03e4\u03e7\u0005\u00ceh\u0002\u03e5\u03e7\u0005",
    "\u00caf\u0002\u03e6\u03e4\u0003\u0002\u0002\u0002\u03e6\u03e5\u0003",
    "\u0002\u0002\u0002\u03e7\u00c9\u0003\u0002\u0002\u0002\u03e8\u03e9\u0007",
    "\u00a1\u0002\u0002\u03e9\u03ea\u0005\u00a6T\u0002\u03ea\u03eb\u0007",
    "\u00a2\u0002\u0002\u03eb\u00cb\u0003\u0002\u0002\u0002\u03ec\u03ee\u0007",
    "\u0092\u0002\u0002\u03ed\u03ef\u0005\u00d0i\u0002\u03ee\u03ed\u0003",
    "\u0002\u0002\u0002\u03ef\u03f0\u0003\u0002\u0002\u0002\u03f0\u03ee\u0003",
    "\u0002\u0002\u0002\u03f0\u03f1\u0003\u0002\u0002\u0002\u03f1\u03f2\u0003",
    "\u0002\u0002\u0002\u03f2\u03f3\u0007\u0093\u0002\u0002\u03f3\u00cd\u0003",
    "\u0002\u0002\u0002\u03f4\u03f6\u0007\u0092\u0002\u0002\u03f5\u03f7\u0005",
    "\u00d2j\u0002\u03f6\u03f5\u0003\u0002\u0002\u0002\u03f7\u03f8\u0003",
    "\u0002\u0002\u0002\u03f8\u03f6\u0003\u0002\u0002\u0002\u03f8\u03f9\u0003",
    "\u0002\u0002\u0002\u03f9\u03fa\u0003\u0002\u0002\u0002\u03fa\u03fb\u0007",
    "\u0093\u0002\u0002\u03fb\u00cf\u0003\u0002\u0002\u0002\u03fc\u03ff\u0005",
    "\u00d4k\u0002\u03fd\u03ff\u0005\u00c4c\u0002\u03fe\u03fc\u0003\u0002",
    "\u0002\u0002\u03fe\u03fd\u0003\u0002\u0002\u0002\u03ff\u00d1\u0003\u0002",
    "\u0002\u0002\u0400\u0403\u0005\u00d4k\u0002\u0401\u0403\u0005\u00c8",
    "e\u0002\u0402\u0400\u0003\u0002\u0002\u0002\u0402\u0401\u0003\u0002",
    "\u0002\u0002\u0403\u00d3\u0003\u0002\u0002\u0002\u0404\u0407\u0005\u00d8",
    "m\u0002\u0405\u0407\u0005\u00dan\u0002\u0406\u0404\u0003\u0002\u0002",
    "\u0002\u0406\u0405\u0003\u0002\u0002\u0002\u0407\u00d5\u0003\u0002\u0002",
    "\u0002\u0408\u040b\u0005\u00d8m\u0002\u0409\u040b\u0005\u0110\u0089",
    "\u0002\u040a\u0408\u0003\u0002\u0002\u0002\u040a\u0409\u0003\u0002\u0002",
    "\u0002\u040b\u00d7\u0003\u0002\u0002\u0002\u040c\u040f\u0005\u0116\u008c",
    "\u0002\u040d\u040f\u0005\u0118\u008d\u0002\u040e\u040c\u0003\u0002\u0002",
    "\u0002\u040e\u040d\u0003\u0002\u0002\u0002\u040f\u00d9\u0003\u0002\u0002",
    "\u0002\u0410\u0417\u0005\u0110\u0089\u0002\u0411\u0417\u0005\u0102\u0082",
    "\u0002\u0412\u0417\u0005\u0104\u0083\u0002\u0413\u0417\u0005\u010c\u0087",
    "\u0002\u0414\u0417\u0005\u0114\u008b\u0002\u0415\u0417\u0005\u011a\u008e",
    "\u0002\u0416\u0410\u0003\u0002\u0002\u0002\u0416\u0411\u0003\u0002\u0002",
    "\u0002\u0416\u0412\u0003\u0002\u0002\u0002\u0416\u0413\u0003\u0002\u0002",
    "\u0002\u0416\u0414\u0003\u0002\u0002\u0002\u0416\u0415\u0003\u0002\u0002",
    "\u0002\u0417\u00db\u0003\u0002\u0002\u0002\u0418\u0419\u0005\u00dep",
    "\u0002\u0419\u00dd\u0003\u0002\u0002\u0002\u041a\u041f\u0005\u00e0q",
    "\u0002\u041b\u041c\u0007\u00a3\u0002\u0002\u041c\u041e\u0005\u00e0q",
    "\u0002\u041d\u041b\u0003\u0002\u0002\u0002\u041e\u0421\u0003\u0002\u0002",
    "\u0002\u041f\u041d\u0003\u0002\u0002\u0002\u041f\u0420\u0003\u0002\u0002",
    "\u0002\u0420\u00df\u0003\u0002\u0002\u0002\u0421\u041f\u0003\u0002\u0002",
    "\u0002\u0422\u0427\u0005\u00e2r\u0002\u0423\u0424\u0007\u00a4\u0002",
    "\u0002\u0424\u0426\u0005\u00e2r\u0002\u0425\u0423\u0003\u0002\u0002",
    "\u0002\u0426\u0429\u0003\u0002\u0002\u0002\u0427\u0425\u0003\u0002\u0002",
    "\u0002\u0427\u0428\u0003\u0002\u0002\u0002\u0428\u00e1\u0003\u0002\u0002",
    "\u0002\u0429\u0427\u0003\u0002\u0002\u0002\u042a\u042b\u0005\u00e4s",
    "\u0002\u042b\u00e3\u0003\u0002\u0002\u0002\u042c\u043e\u0005\u00e6t",
    "\u0002\u042d\u042e\u0007\u00a5\u0002\u0002\u042e\u043f\u0005\u00e6t",
    "\u0002\u042f\u0430\u0007\u00a6\u0002\u0002\u0430\u043f\u0005\u00e6t",
    "\u0002\u0431\u0432\u0007\u00a7\u0002\u0002\u0432\u043f\u0005\u00e6t",
    "\u0002\u0433\u0434\u0007\u00a8\u0002\u0002\u0434\u043f\u0005\u00e6t",
    "\u0002\u0435\u0436\u0007\u00a9\u0002\u0002\u0436\u043f\u0005\u00e6t",
    "\u0002\u0437\u0438\u0007\u00aa\u0002\u0002\u0438\u043f\u0005\u00e6t",
    "\u0002\u0439\u043a\u00074\u0002\u0002\u043a\u043f\u0005\u0090I\u0002",
    "\u043b\u043c\u00075\u0002\u0002\u043c\u043d\u00074\u0002\u0002\u043d",
    "\u043f\u0005\u0090I\u0002\u043e\u042d\u0003\u0002\u0002\u0002\u043e",
    "\u042f\u0003\u0002\u0002\u0002\u043e\u0431\u0003\u0002\u0002\u0002\u043e",
    "\u0433\u0003\u0002\u0002\u0002\u043e\u0435\u0003\u0002\u0002\u0002\u043e",
    "\u0437\u0003\u0002\u0002\u0002\u043e\u0439\u0003\u0002\u0002\u0002\u043e",
    "\u043b\u0003\u0002\u0002\u0002\u043e\u043f\u0003\u0002\u0002\u0002\u043f",
    "\u00e5\u0003\u0002\u0002\u0002\u0440\u0441\u0005\u00e8u\u0002\u0441",
    "\u00e7\u0003\u0002\u0002\u0002\u0442\u0456\u0005\u00eav\u0002\u0443",
    "\u0444\u0007\u009f\u0002\u0002\u0444\u0455\u0005\u00eav\u0002\u0445",
    "\u0446\u00070\u0002\u0002\u0446\u0455\u0005\u00eav\u0002\u0447\u044a",
    "\u0005\u0108\u0085\u0002\u0448\u044a\u0005\u010a\u0086\u0002\u0449\u0447",
    "\u0003\u0002\u0002\u0002\u0449\u0448\u0003\u0002\u0002\u0002\u044a\u0451",
    "\u0003\u0002\u0002\u0002\u044b\u044c\u0007\u0096\u0002\u0002\u044c\u0450",
    "\u0005\u00ecw\u0002\u044d\u044e\u0007\u009d\u0002\u0002\u044e\u0450",
    "\u0005\u00ecw\u0002\u044f\u044b\u0003\u0002\u0002\u0002\u044f\u044d",
    "\u0003\u0002\u0002\u0002\u0450\u0453\u0003\u0002\u0002\u0002\u0451\u044f",
    "\u0003\u0002\u0002\u0002\u0451\u0452\u0003\u0002\u0002\u0002\u0452\u0455",
    "\u0003\u0002\u0002\u0002\u0453\u0451\u0003\u0002\u0002\u0002\u0454\u0443",
    "\u0003\u0002\u0002\u0002\u0454\u0445\u0003\u0002\u0002\u0002\u0454\u0449",
    "\u0003\u0002\u0002\u0002\u0455\u0458\u0003\u0002\u0002\u0002\u0456\u0454",
    "\u0003\u0002\u0002\u0002\u0456\u0457\u0003\u0002\u0002\u0002\u0457\u00e9",
    "\u0003\u0002\u0002\u0002\u0458\u0456\u0003\u0002\u0002\u0002\u0459\u0460",
    "\u0005\u00ecw\u0002\u045a\u045b\u0007\u0096\u0002\u0002\u045b\u045f",
    "\u0005\u00ecw\u0002\u045c\u045d\u0007\u009d\u0002\u0002\u045d\u045f",
    "\u0005\u00ecw\u0002\u045e\u045a\u0003\u0002\u0002\u0002\u045e\u045c",
    "\u0003\u0002\u0002\u0002\u045f\u0462\u0003\u0002\u0002\u0002\u0460\u045e",
    "\u0003\u0002\u0002\u0002\u0460\u0461\u0003\u0002\u0002\u0002\u0461\u00eb",
    "\u0003\u0002\u0002\u0002\u0462\u0460\u0003\u0002\u0002\u0002\u0463\u0464",
    "\u0007\u00a0\u0002\u0002\u0464\u046b\u0005\u00eex\u0002\u0465\u0466",
    "\u0007\u009f\u0002\u0002\u0466\u046b\u0005\u00eex\u0002\u0467\u0468",
    "\u00070\u0002\u0002\u0468\u046b\u0005\u00eex\u0002\u0469\u046b\u0005",
    "\u00eex\u0002\u046a\u0463\u0003\u0002\u0002\u0002\u046a\u0465\u0003",
    "\u0002\u0002\u0002\u046a\u0467\u0003\u0002\u0002\u0002\u046a\u0469\u0003",
    "\u0002\u0002\u0002\u046b\u00ed\u0003\u0002\u0002\u0002\u046c\u0474\u0005",
    "\u00f0y\u0002\u046d\u0474\u0005\u00f2z\u0002\u046e\u0474\u0005\u0100",
    "\u0081\u0002\u046f\u0474\u0005\u0102\u0082\u0002\u0470\u0474\u0005\u0104",
    "\u0083\u0002\u0471\u0474\u0005\u010c\u0087\u0002\u0472\u0474\u0005\u00d8",
    "m\u0002\u0473\u046c\u0003\u0002\u0002\u0002\u0473\u046d\u0003\u0002",
    "\u0002\u0002\u0473\u046e\u0003\u0002\u0002\u0002\u0473\u046f\u0003\u0002",
    "\u0002\u0002\u0473\u0470\u0003\u0002\u0002\u0002\u0473\u0471\u0003\u0002",
    "\u0002\u0002\u0473\u0472\u0003\u0002\u0002\u0002\u0474\u00ef\u0003\u0002",
    "\u0002\u0002\u0475\u0476\u0007\u0092\u0002\u0002\u0476\u0477\u0005\u00dc",
    "o\u0002\u0477\u0478\u0007\u0093\u0002\u0002\u0478\u00f1\u0003\u0002",
    "\u0002\u0002\u0479\u057c\u0005\u00fe\u0080\u0002\u047a\u047b\u00076",
    "\u0002\u0002\u047b\u047c\u0007\u0092\u0002\u0002\u047c\u047d\u0005\u00dc",
    "o\u0002\u047d\u047e\u0007\u0093\u0002\u0002\u047e\u057c\u0003\u0002",
    "\u0002\u0002\u047f\u0480\u00077\u0002\u0002\u0480\u0481\u0007\u0092",
    "\u0002\u0002\u0481\u0482\u0005\u00dco\u0002\u0482\u0483\u0007\u0093",
    "\u0002\u0002\u0483\u057c\u0003\u0002\u0002\u0002\u0484\u0485\u00078",
    "\u0002\u0002\u0485\u0486\u0007\u0092\u0002\u0002\u0486\u0487\u0005\u00dc",
    "o\u0002\u0487\u0488\u0007\u009a\u0002\u0002\u0488\u0489\u0005\u00dc",
    "o\u0002\u0489\u048a\u0007\u0093\u0002\u0002\u048a\u057c\u0003\u0002",
    "\u0002\u0002\u048b\u048c\u00079\u0002\u0002\u048c\u048d\u0007\u0092",
    "\u0002\u0002\u048d\u048e\u0005\u00dco\u0002\u048e\u048f\u0007\u0093",
    "\u0002\u0002\u048f\u057c\u0003\u0002\u0002\u0002\u0490\u0491\u0007:",
    "\u0002\u0002\u0491\u0492\u0007\u0092\u0002\u0002\u0492\u0493\u0005\u00d8",
    "m\u0002\u0493\u0494\u0007\u0093\u0002\u0002\u0494\u057c\u0003\u0002",
    "\u0002\u0002\u0495\u0496\u0007;\u0002\u0002\u0496\u0497\u0007\u0092",
    "\u0002\u0002\u0497\u0498\u0005\u00dco\u0002\u0498\u0499\u0007\u0093",
    "\u0002\u0002\u0499\u057c\u0003\u0002\u0002\u0002\u049a\u049b\u0007<",
    "\u0002\u0002\u049b\u049c\u0007\u0092\u0002\u0002\u049c\u049d\u0005\u00dc",
    "o\u0002\u049d\u049e\u0007\u0093\u0002\u0002\u049e\u057c\u0003\u0002",
    "\u0002\u0002\u049f\u04a5\u0007=\u0002\u0002\u04a0\u04a1\u0007\u0092",
    "\u0002\u0002\u04a1\u04a2\u0005\u00dco\u0002\u04a2\u04a3\u0007\u0093",
    "\u0002\u0002\u04a3\u04a6\u0003\u0002\u0002\u0002\u04a4\u04a6\u0005\u011a",
    "\u008e\u0002\u04a5\u04a0\u0003\u0002\u0002\u0002\u04a5\u04a4\u0003\u0002",
    "\u0002\u0002\u04a6\u057c\u0003\u0002\u0002\u0002\u04a7\u04a8\u0007>",
    "\u0002\u0002\u04a8\u057c\u0005\u011a\u008e\u0002\u04a9\u04aa\u0007?",
    "\u0002\u0002\u04aa\u04ab\u0007\u0092\u0002\u0002\u04ab\u04ac\u0005\u00dc",
    "o\u0002\u04ac\u04ad\u0007\u0093\u0002\u0002\u04ad\u057c\u0003\u0002",
    "\u0002\u0002\u04ae\u04af\u0007@\u0002\u0002\u04af\u04b0\u0007\u0092",
    "\u0002\u0002\u04b0\u04b1\u0005\u00dco\u0002\u04b1\u04b2\u0007\u0093",
    "\u0002\u0002\u04b2\u057c\u0003\u0002\u0002\u0002\u04b3\u04b4\u0007A",
    "\u0002\u0002\u04b4\u04b5\u0007\u0092\u0002\u0002\u04b5\u04b6\u0005\u00dc",
    "o\u0002\u04b6\u04b7\u0007\u0093\u0002\u0002\u04b7\u057c\u0003\u0002",
    "\u0002\u0002\u04b8\u04b9\u0007B\u0002\u0002\u04b9\u04ba\u0007\u0092",
    "\u0002\u0002\u04ba\u04bb\u0005\u00dco\u0002\u04bb\u04bc\u0007\u0093",
    "\u0002\u0002\u04bc\u057c\u0003\u0002\u0002\u0002\u04bd\u04be\u0007C",
    "\u0002\u0002\u04be\u057c\u0005\u0090I\u0002\u04bf\u057c\u0005\u00f6",
    "|\u0002\u04c0\u04c1\u0007D\u0002\u0002\u04c1\u04c2\u0007\u0092\u0002",
    "\u0002\u04c2\u04c3\u0005\u00dco\u0002\u04c3\u04c4\u0007\u0093\u0002",
    "\u0002\u04c4\u057c\u0003\u0002\u0002\u0002\u04c5\u057c\u0005\u00f8}",
    "\u0002\u04c6\u04c7\u0007E\u0002\u0002\u04c7\u04c8\u0007\u0092\u0002",
    "\u0002\u04c8\u04c9\u0005\u00dco\u0002\u04c9\u04ca\u0007\u0093\u0002",
    "\u0002\u04ca\u057c\u0003\u0002\u0002\u0002\u04cb\u04cc\u0007F\u0002",
    "\u0002\u04cc\u04cd\u0007\u0092\u0002\u0002\u04cd\u04ce\u0005\u00dco",
    "\u0002\u04ce\u04cf\u0007\u0093\u0002\u0002\u04cf\u057c\u0003\u0002\u0002",
    "\u0002\u04d0\u04d1\u0007G\u0002\u0002\u04d1\u04d2\u0007\u0092\u0002",
    "\u0002\u04d2\u04d3\u0005\u00dco\u0002\u04d3\u04d4\u0007\u0093\u0002",
    "\u0002\u04d4\u057c\u0003\u0002\u0002\u0002\u04d5\u04d6\u0007H\u0002",
    "\u0002\u04d6\u04d7\u0007\u0092\u0002\u0002\u04d7\u04d8\u0005\u00dco",
    "\u0002\u04d8\u04d9\u0007\u009a\u0002\u0002\u04d9\u04da\u0005\u00dco",
    "\u0002\u04da\u04db\u0007\u0093\u0002\u0002\u04db\u057c\u0003\u0002\u0002",
    "\u0002\u04dc\u04dd\u0007I\u0002\u0002\u04dd\u04de\u0007\u0092\u0002",
    "\u0002\u04de\u04df\u0005\u00dco\u0002\u04df\u04e0\u0007\u009a\u0002",
    "\u0002\u04e0\u04e1\u0005\u00dco\u0002\u04e1\u04e2\u0007\u0093\u0002",
    "\u0002\u04e2\u057c\u0003\u0002\u0002\u0002\u04e3\u04e4\u0007J\u0002",
    "\u0002\u04e4\u04e5\u0007\u0092\u0002\u0002\u04e5\u04e6\u0005\u00dco",
    "\u0002\u04e6\u04e7\u0007\u009a\u0002\u0002\u04e7\u04e8\u0005\u00dco",
    "\u0002\u04e8\u04e9\u0007\u0093\u0002\u0002\u04e9\u057c\u0003\u0002\u0002",
    "\u0002\u04ea\u04eb\u0007K\u0002\u0002\u04eb\u04ec\u0007\u0092\u0002",
    "\u0002\u04ec\u04ed\u0005\u00dco\u0002\u04ed\u04ee\u0007\u009a\u0002",
    "\u0002\u04ee\u04ef\u0005\u00dco\u0002\u04ef\u04f0\u0007\u0093\u0002",
    "\u0002\u04f0\u057c\u0003\u0002\u0002\u0002\u04f1\u04f2\u0007L\u0002",
    "\u0002\u04f2\u04f3\u0007\u0092\u0002\u0002\u04f3\u04f4\u0005\u00dco",
    "\u0002\u04f4\u04f5\u0007\u009a\u0002\u0002\u04f5\u04f6\u0005\u00dco",
    "\u0002\u04f6\u04f7\u0007\u0093\u0002\u0002\u04f7\u057c\u0003\u0002\u0002",
    "\u0002\u04f8\u04f9\u0007M\u0002\u0002\u04f9\u04fa\u0007\u0092\u0002",
    "\u0002\u04fa\u04fb\u0005\u00dco\u0002\u04fb\u04fc\u0007\u0093\u0002",
    "\u0002\u04fc\u057c\u0003\u0002\u0002\u0002\u04fd\u04fe\u0007N\u0002",
    "\u0002\u04fe\u04ff\u0007\u0092\u0002\u0002\u04ff\u0500\u0005\u00dco",
    "\u0002\u0500\u0501\u0007\u0093\u0002\u0002\u0501\u057c\u0003\u0002\u0002",
    "\u0002\u0502\u0503\u0007O\u0002\u0002\u0503\u0504\u0007\u0092\u0002",
    "\u0002\u0504\u0505\u0005\u00dco\u0002\u0505\u0506\u0007\u0093\u0002",
    "\u0002\u0506\u057c\u0003\u0002\u0002\u0002\u0507\u0508\u0007P\u0002",
    "\u0002\u0508\u0509\u0007\u0092\u0002\u0002\u0509\u050a\u0005\u00dco",
    "\u0002\u050a\u050b\u0007\u0093\u0002\u0002\u050b\u057c\u0003\u0002\u0002",
    "\u0002\u050c\u050d\u0007Q\u0002\u0002\u050d\u050e\u0007\u0092\u0002",
    "\u0002\u050e\u050f\u0005\u00dco\u0002\u050f\u0510\u0007\u0093\u0002",
    "\u0002\u0510\u057c\u0003\u0002\u0002\u0002\u0511\u0512\u0007R\u0002",
    "\u0002\u0512\u0513\u0007\u0092\u0002\u0002\u0513\u0514\u0005\u00dco",
    "\u0002\u0514\u0515\u0007\u0093\u0002\u0002\u0515\u057c\u0003\u0002\u0002",
    "\u0002\u0516\u0517\u0007S\u0002\u0002\u0517\u0518\u0007\u0092\u0002",
    "\u0002\u0518\u0519\u0005\u00dco\u0002\u0519\u051a\u0007\u0093\u0002",
    "\u0002\u051a\u057c\u0003\u0002\u0002\u0002\u051b\u051c\u0007T\u0002",
    "\u0002\u051c\u051d\u0007\u0092\u0002\u0002\u051d\u051e\u0005\u00dco",
    "\u0002\u051e\u051f\u0007\u0093\u0002\u0002\u051f\u057c\u0003\u0002\u0002",
    "\u0002\u0520\u0521\u0007U\u0002\u0002\u0521\u057c\u0005\u011a\u008e",
    "\u0002\u0522\u0523\u0007V\u0002\u0002\u0523\u057c\u0005\u011a\u008e",
    "\u0002\u0524\u0525\u0007W\u0002\u0002\u0525\u057c\u0005\u011a\u008e",
    "\u0002\u0526\u0527\u0007X\u0002\u0002\u0527\u0528\u0007\u0092\u0002",
    "\u0002\u0528\u0529\u0005\u00dco\u0002\u0529\u052a\u0007\u0093\u0002",
    "\u0002\u052a\u057c\u0003\u0002\u0002\u0002\u052b\u052c\u0007Y\u0002",
    "\u0002\u052c\u052d\u0007\u0092\u0002\u0002\u052d\u052e\u0005\u00dco",
    "\u0002\u052e\u052f\u0007\u0093\u0002\u0002\u052f\u057c\u0003\u0002\u0002",
    "\u0002\u0530\u0531\u0007Z\u0002\u0002\u0531\u0532\u0007\u0092\u0002",
    "\u0002\u0532\u0533\u0005\u00dco\u0002\u0533\u0534\u0007\u0093\u0002",
    "\u0002\u0534\u057c\u0003\u0002\u0002\u0002\u0535\u0536\u0007[\u0002",
    "\u0002\u0536\u0537\u0007\u0092\u0002\u0002\u0537\u0538\u0005\u00dco",
    "\u0002\u0538\u0539\u0007\u0093\u0002\u0002\u0539\u057c\u0003\u0002\u0002",
    "\u0002\u053a\u053b\u0007\\\u0002\u0002\u053b\u053c\u0007\u0092\u0002",
    "\u0002\u053c\u053d\u0005\u00dco\u0002\u053d\u053e\u0007\u0093\u0002",
    "\u0002\u053e\u057c\u0003\u0002\u0002\u0002\u053f\u0540\u0007]\u0002",
    "\u0002\u0540\u057c\u0005\u0090I\u0002\u0541\u0542\u0007^\u0002\u0002",
    "\u0542\u0543\u0007\u0092\u0002\u0002\u0543\u0544\u0005\u00dco\u0002",
    "\u0544\u0545\u0007\u009a\u0002\u0002\u0545\u0546\u0005\u00dco\u0002",
    "\u0546\u0547\u0007\u009a\u0002\u0002\u0547\u0548\u0005\u00dco\u0002",
    "\u0548\u0549\u0007\u0093\u0002\u0002\u0549\u057c\u0003\u0002\u0002\u0002",
    "\u054a\u054b\u0007_\u0002\u0002\u054b\u054c\u0007\u0092\u0002\u0002",
    "\u054c\u054d\u0005\u00dco\u0002\u054d\u054e\u0007\u009a\u0002\u0002",
    "\u054e\u054f\u0005\u00dco\u0002\u054f\u0550\u0007\u0093\u0002\u0002",
    "\u0550\u057c\u0003\u0002\u0002\u0002\u0551\u0552\u0007`\u0002\u0002",
    "\u0552\u0553\u0007\u0092\u0002\u0002\u0553\u0554\u0005\u00dco\u0002",
    "\u0554\u0555\u0007\u009a\u0002\u0002\u0555\u0556\u0005\u00dco\u0002",
    "\u0556\u0557\u0007\u0093\u0002\u0002\u0557\u057c\u0003\u0002\u0002\u0002",
    "\u0558\u0559\u0007a\u0002\u0002\u0559\u055a\u0007\u0092\u0002\u0002",
    "\u055a\u055b\u0005\u00dco\u0002\u055b\u055c\u0007\u009a\u0002\u0002",
    "\u055c\u055d\u0005\u00dco\u0002\u055d\u055e\u0007\u0093\u0002\u0002",
    "\u055e\u057c\u0003\u0002\u0002\u0002\u055f\u0560\u0007b\u0002\u0002",
    "\u0560\u0561\u0007\u0092\u0002\u0002\u0561\u0562\u0005\u00dco\u0002",
    "\u0562\u0563\u0007\u0093\u0002\u0002\u0563\u057c\u0003\u0002\u0002\u0002",
    "\u0564\u0565\u0007c\u0002\u0002\u0565\u0566\u0007\u0092\u0002\u0002",
    "\u0566\u0567\u0005\u00dco\u0002\u0567\u0568\u0007\u0093\u0002\u0002",
    "\u0568\u057c\u0003\u0002\u0002\u0002\u0569\u056a\u0007d\u0002\u0002",
    "\u056a\u056b\u0007\u0092\u0002\u0002\u056b\u056c\u0005\u00dco\u0002",
    "\u056c\u056d\u0007\u0093\u0002\u0002\u056d\u057c\u0003\u0002\u0002\u0002",
    "\u056e\u056f\u0007e\u0002\u0002\u056f\u0570\u0007\u0092\u0002\u0002",
    "\u0570\u0571\u0005\u00dco\u0002\u0571\u0572\u0007\u0093\u0002\u0002",
    "\u0572\u057c\u0003\u0002\u0002\u0002\u0573\u0574\u0007f\u0002\u0002",
    "\u0574\u0575\u0007\u0092\u0002\u0002\u0575\u0576\u0005\u00dco\u0002",
    "\u0576\u0577\u0007\u0093\u0002\u0002\u0577\u057c\u0003\u0002\u0002\u0002",
    "\u0578\u057c\u0005\u00f4{\u0002\u0579\u057c\u0005\u00fa~\u0002\u057a",
    "\u057c\u0005\u00fc\u007f\u0002\u057b\u0479\u0003\u0002\u0002\u0002\u057b",
    "\u047a\u0003\u0002\u0002\u0002\u057b\u047f\u0003\u0002\u0002\u0002\u057b",
    "\u0484\u0003\u0002\u0002\u0002\u057b\u048b\u0003\u0002\u0002\u0002\u057b",
    "\u0490\u0003\u0002\u0002\u0002\u057b\u0495\u0003\u0002\u0002\u0002\u057b",
    "\u049a\u0003\u0002\u0002\u0002\u057b\u049f\u0003\u0002\u0002\u0002\u057b",
    "\u04a7\u0003\u0002\u0002\u0002\u057b\u04a9\u0003\u0002\u0002\u0002\u057b",
    "\u04ae\u0003\u0002\u0002\u0002\u057b\u04b3\u0003\u0002\u0002\u0002\u057b",
    "\u04b8\u0003\u0002\u0002\u0002\u057b\u04bd\u0003\u0002\u0002\u0002\u057b",
    "\u04bf\u0003\u0002\u0002\u0002\u057b\u04c0\u0003\u0002\u0002\u0002\u057b",
    "\u04c5\u0003\u0002\u0002\u0002\u057b\u04c6\u0003\u0002\u0002\u0002\u057b",
    "\u04cb\u0003\u0002\u0002\u0002\u057b\u04d0\u0003\u0002\u0002\u0002\u057b",
    "\u04d5\u0003\u0002\u0002\u0002\u057b\u04dc\u0003\u0002\u0002\u0002\u057b",
    "\u04e3\u0003\u0002\u0002\u0002\u057b\u04ea\u0003\u0002\u0002\u0002\u057b",
    "\u04f1\u0003\u0002\u0002\u0002\u057b\u04f8\u0003\u0002\u0002\u0002\u057b",
    "\u04fd\u0003\u0002\u0002\u0002\u057b\u0502\u0003\u0002\u0002\u0002\u057b",
    "\u0507\u0003\u0002\u0002\u0002\u057b\u050c\u0003\u0002\u0002\u0002\u057b",
    "\u0511\u0003\u0002\u0002\u0002\u057b\u0516\u0003\u0002\u0002\u0002\u057b",
    "\u051b\u0003\u0002\u0002\u0002\u057b\u0520\u0003\u0002\u0002\u0002\u057b",
    "\u0522\u0003\u0002\u0002\u0002\u057b\u0524\u0003\u0002\u0002\u0002\u057b",
    "\u0526\u0003\u0002\u0002\u0002\u057b\u052b\u0003\u0002\u0002\u0002\u057b",
    "\u0530\u0003\u0002\u0002\u0002\u057b\u0535\u0003\u0002\u0002\u0002\u057b",
    "\u053a\u0003\u0002\u0002\u0002\u057b\u053f\u0003\u0002\u0002\u0002\u057b",
    "\u0541\u0003\u0002\u0002\u0002\u057b\u054a\u0003\u0002\u0002\u0002\u057b",
    "\u0551\u0003\u0002\u0002\u0002\u057b\u0558\u0003\u0002\u0002\u0002\u057b",
    "\u055f\u0003\u0002\u0002\u0002\u057b\u0564\u0003\u0002\u0002\u0002\u057b",
    "\u0569\u0003\u0002\u0002\u0002\u057b\u056e\u0003\u0002\u0002\u0002\u057b",
    "\u0573\u0003\u0002\u0002\u0002\u057b\u0578\u0003\u0002\u0002\u0002\u057b",
    "\u0579\u0003\u0002\u0002\u0002\u057b\u057a\u0003\u0002\u0002\u0002\u057c",
    "\u00f3\u0003\u0002\u0002\u0002\u057d\u057e\u0007g\u0002\u0002\u057e",
    "\u057f\u0007\u0092\u0002\u0002\u057f\u0580\u0005\u00dco\u0002\u0580",
    "\u0581\u0007\u009a\u0002\u0002\u0581\u0584\u0005\u00dco\u0002\u0582",
    "\u0583\u0007\u009a\u0002\u0002\u0583\u0585\u0005\u00dco\u0002\u0584",
    "\u0582\u0003\u0002\u0002\u0002\u0584\u0585\u0003\u0002\u0002\u0002\u0585",
    "\u0586\u0003\u0002\u0002\u0002\u0586\u0587\u0007\u0093\u0002\u0002\u0587",
    "\u00f5\u0003\u0002\u0002\u0002\u0588\u0589\u0007h\u0002\u0002\u0589",
    "\u058a\u0007\u0092\u0002\u0002\u058a\u058b\u0005\u00dco\u0002\u058b",
    "\u058c\u0007\u009a\u0002\u0002\u058c\u058f\u0005\u00dco\u0002\u058d",
    "\u058e\u0007\u009a\u0002\u0002\u058e\u0590\u0005\u00dco\u0002\u058f",
    "\u058d\u0003\u0002\u0002\u0002\u058f\u0590\u0003\u0002\u0002\u0002\u0590",
    "\u0591\u0003\u0002\u0002\u0002\u0591\u0592\u0007\u0093\u0002\u0002\u0592",
    "\u00f7\u0003\u0002\u0002\u0002\u0593\u0594\u0007i\u0002\u0002\u0594",
    "\u0595\u0007\u0092\u0002\u0002\u0595\u0596\u0005\u00dco\u0002\u0596",
    "\u0597\u0007\u009a\u0002\u0002\u0597\u0598\u0005\u00dco\u0002\u0598",
    "\u0599\u0007\u009a\u0002\u0002\u0599\u059c\u0005\u00dco\u0002\u059a",
    "\u059b\u0007\u009a\u0002\u0002\u059b\u059d\u0005\u00dco\u0002\u059c",
    "\u059a\u0003\u0002\u0002\u0002\u059c\u059d\u0003\u0002\u0002\u0002\u059d",
    "\u059e\u0003\u0002\u0002\u0002\u059e\u059f\u0007\u0093\u0002\u0002\u059f",
    "\u00f9\u0003\u0002\u0002\u0002\u05a0\u05a1\u0007j\u0002\u0002\u05a1",
    "\u05a2\u0005j6\u0002\u05a2\u00fb\u0003\u0002\u0002\u0002\u05a3\u05a4",
    "\u00075\u0002\u0002\u05a4\u05a5\u0007j\u0002\u0002\u05a5\u05a6\u0005",
    "j6\u0002\u05a6\u00fd\u0003\u0002\u0002\u0002\u05a7\u05a8\u0007k\u0002",
    "\u0002\u05a8\u05aa\u0007\u0092\u0002\u0002\u05a9\u05ab\u0007\u0006\u0002",
    "\u0002\u05aa\u05a9\u0003\u0002\u0002\u0002\u05aa\u05ab\u0003\u0002\u0002",
    "\u0002\u05ab\u05ae\u0003\u0002\u0002\u0002\u05ac\u05af\u0007\u0096\u0002",
    "\u0002\u05ad\u05af\u0005\u00dco\u0002\u05ae\u05ac\u0003\u0002\u0002",
    "\u0002\u05ae\u05ad\u0003\u0002\u0002\u0002\u05af\u05b0\u0003\u0002\u0002",
    "\u0002\u05b0\u05e8\u0007\u0093\u0002\u0002\u05b1\u05b2\u0007l\u0002",
    "\u0002\u05b2\u05b4\u0007\u0092\u0002\u0002\u05b3\u05b5\u0007\u0006\u0002",
    "\u0002\u05b4\u05b3\u0003\u0002\u0002\u0002\u05b4\u05b5\u0003\u0002\u0002",
    "\u0002\u05b5\u05b6\u0003\u0002\u0002\u0002\u05b6\u05b7\u0005\u00dco",
    "\u0002\u05b7\u05b8\u0007\u0093\u0002\u0002\u05b8\u05e8\u0003\u0002\u0002",
    "\u0002\u05b9\u05ba\u0007m\u0002\u0002\u05ba\u05bc\u0007\u0092\u0002",
    "\u0002\u05bb\u05bd\u0007\u0006\u0002\u0002\u05bc\u05bb\u0003\u0002\u0002",
    "\u0002\u05bc\u05bd\u0003\u0002\u0002\u0002\u05bd\u05be\u0003\u0002\u0002",
    "\u0002\u05be\u05bf\u0005\u00dco\u0002\u05bf\u05c0\u0007\u0093\u0002",
    "\u0002\u05c0\u05e8\u0003\u0002\u0002\u0002\u05c1\u05c2\u0007n\u0002",
    "\u0002\u05c2\u05c4\u0007\u0092\u0002\u0002\u05c3\u05c5\u0007\u0006\u0002",
    "\u0002\u05c4\u05c3\u0003\u0002\u0002\u0002\u05c4\u05c5\u0003\u0002\u0002",
    "\u0002\u05c5\u05c6\u0003\u0002\u0002\u0002\u05c6\u05c7\u0005\u00dco",
    "\u0002\u05c7\u05c8\u0007\u0093\u0002\u0002\u05c8\u05e8\u0003\u0002\u0002",
    "\u0002\u05c9\u05ca\u0007o\u0002\u0002\u05ca\u05cc\u0007\u0092\u0002",
    "\u0002\u05cb\u05cd\u0007\u0006\u0002\u0002\u05cc\u05cb\u0003\u0002\u0002",
    "\u0002\u05cc\u05cd\u0003\u0002\u0002\u0002\u05cd\u05ce\u0003\u0002\u0002",
    "\u0002\u05ce\u05cf\u0005\u00dco\u0002\u05cf\u05d0\u0007\u0093\u0002",
    "\u0002\u05d0\u05e8\u0003\u0002\u0002\u0002\u05d1\u05d2\u0007p\u0002",
    "\u0002\u05d2\u05d4\u0007\u0092\u0002\u0002\u05d3\u05d5\u0007\u0006\u0002",
    "\u0002\u05d4\u05d3\u0003\u0002\u0002\u0002\u05d4\u05d5\u0003\u0002\u0002",
    "\u0002\u05d5\u05d6\u0003\u0002\u0002\u0002\u05d6\u05d7\u0005\u00dco",
    "\u0002\u05d7\u05d8\u0007\u0093\u0002\u0002\u05d8\u05e8\u0003\u0002\u0002",
    "\u0002\u05d9\u05da\u0007q\u0002\u0002\u05da\u05dc\u0007\u0092\u0002",
    "\u0002\u05db\u05dd\u0007\u0006\u0002\u0002\u05dc\u05db\u0003\u0002\u0002",
    "\u0002\u05dc\u05dd\u0003\u0002\u0002\u0002\u05dd\u05de\u0003\u0002\u0002",
    "\u0002\u05de\u05e3\u0005\u00dco\u0002\u05df\u05e0\u0007\u009b\u0002",
    "\u0002\u05e0\u05e1\u0007r\u0002\u0002\u05e1\u05e2\u0007\u00a5\u0002",
    "\u0002\u05e2\u05e4\u0005\u010e\u0088\u0002\u05e3\u05df\u0003\u0002\u0002",
    "\u0002\u05e3\u05e4\u0003\u0002\u0002\u0002\u05e4\u05e5\u0003\u0002\u0002",
    "\u0002\u05e5\u05e6\u0007\u0093\u0002\u0002\u05e6\u05e8\u0003\u0002\u0002",
    "\u0002\u05e7\u05a7\u0003\u0002\u0002\u0002\u05e7\u05b1\u0003\u0002\u0002",
    "\u0002\u05e7\u05b9\u0003\u0002\u0002\u0002\u05e7\u05c1\u0003\u0002\u0002",
    "\u0002\u05e7\u05c9\u0003\u0002\u0002\u0002\u05e7\u05d1\u0003\u0002\u0002",
    "\u0002\u05e7\u05d9\u0003\u0002\u0002\u0002\u05e8\u00ff\u0003\u0002\u0002",
    "\u0002\u05e9\u05eb\u0005\u0110\u0089\u0002\u05ea\u05ec\u0005\u008eH",
    "\u0002\u05eb\u05ea\u0003\u0002\u0002\u0002\u05eb\u05ec\u0003\u0002\u0002",
    "\u0002\u05ec\u0101\u0003\u0002\u0002\u0002\u05ed\u05f1\u0005\u010e\u0088",
    "\u0002\u05ee\u05f2\u0007y\u0002\u0002\u05ef\u05f0\u0007\u00ab\u0002",
    "\u0002\u05f0\u05f2\u0005\u0110\u0089\u0002\u05f1\u05ee\u0003\u0002\u0002",
    "\u0002\u05f1\u05ef\u0003\u0002\u0002\u0002\u05f1\u05f2\u0003\u0002\u0002",
    "\u0002\u05f2\u0103\u0003\u0002\u0002\u0002\u05f3\u05f7\u0005\u0106\u0084",
    "\u0002\u05f4\u05f7\u0005\u0108\u0085\u0002\u05f5\u05f7\u0005\u010a\u0086",
    "\u0002\u05f6\u05f3\u0003\u0002\u0002\u0002\u05f6\u05f4\u0003\u0002\u0002",
    "\u0002\u05f6\u05f5\u0003\u0002\u0002\u0002\u05f7\u0105\u0003\u0002\u0002",
    "\u0002\u05f8\u05f9\t\u0005\u0002\u0002\u05f9\u0107\u0003\u0002\u0002",
    "\u0002\u05fa\u05fb\t\u0006\u0002\u0002\u05fb\u0109\u0003\u0002\u0002",
    "\u0002\u05fc\u05fd\t\u0007\u0002\u0002\u05fd\u010b\u0003\u0002\u0002",
    "\u0002\u05fe\u05ff\t\b\u0002\u0002\u05ff\u010d\u0003\u0002\u0002\u0002",
    "\u0600\u0601\t\t\u0002\u0002\u0601\u010f\u0003\u0002\u0002\u0002\u0602",
    "\u0605\u0007u\u0002\u0002\u0603\u0605\u0005\u0112\u008a\u0002\u0604",
    "\u0602\u0003\u0002\u0002\u0002\u0604\u0603\u0003\u0002\u0002\u0002\u0605",
    "\u0111\u0003\u0002\u0002\u0002\u0606\u0607\t\n\u0002\u0002\u0607\u0113",
    "\u0003\u0002\u0002\u0002\u0608\u060b\u0007x\u0002\u0002\u0609\u060b",
    "\u0005\u011c\u008f\u0002\u060a\u0608\u0003\u0002\u0002\u0002\u060a\u0609",
    "\u0003\u0002\u0002\u0002\u060b\u0115\u0003\u0002\u0002\u0002\u060c\u060d",
    "\u0007\u0097\u0002\u0002\u060d\u060e\u0007\u0089\u0002\u0002\u060e\u0117",
    "\u0003\u0002\u0002\u0002\u060f\u0610\u0007\u0098\u0002\u0002\u0610\u0611",
    "\u0007\u0089\u0002\u0002\u0611\u0119\u0003\u0002\u0002\u0002\u0612\u0616",
    "\u0007\u0092\u0002\u0002\u0613\u0615\u0007\u0091\u0002\u0002\u0614\u0613",
    "\u0003\u0002\u0002\u0002\u0615\u0618\u0003\u0002\u0002\u0002\u0616\u0614",
    "\u0003\u0002\u0002\u0002\u0616\u0617\u0003\u0002\u0002\u0002\u0617\u0619",
    "\u0003\u0002\u0002\u0002\u0618\u0616\u0003\u0002\u0002\u0002\u0619\u061a",
    "\u0007\u0093\u0002\u0002\u061a\u011b\u0003\u0002\u0002\u0002\u061b\u061f",
    "\u0007\u00a1\u0002\u0002\u061c\u061e\u0007\u0091\u0002\u0002\u061d\u061c",
    "\u0003\u0002\u0002\u0002\u061e\u0621\u0003\u0002\u0002\u0002\u061f\u061d",
    "\u0003\u0002\u0002\u0002\u061f\u0620\u0003\u0002\u0002\u0002\u0620\u0622",
    "\u0003\u0002\u0002\u0002\u0621\u061f\u0003\u0002\u0002\u0002\u0622\u0623",
    "\u0007\u00a2\u0002\u0002\u0623\u011d\u0003\u0002\u0002\u0002\u009d\u0125",
    "\u012d\u012f\u013d\u014a\u0153\u0155\u0158\u015f\u0168\u016e\u0172\u0178",
    "\u017b\u0180\u0184\u018c\u0195\u019f\u01a4\u01a7\u01aa\u01ad\u01b4\u01bc",
    "\u01c1\u01c7\u01d0\u01d6\u01d8\u01dc\u01e0\u01e2\u01ec\u01f2\u01f4\u0201",
    "\u0205\u020a\u020e\u0214\u021a\u0220\u0228\u0230\u0241\u0245\u0248\u024d",
    "\u025d\u0261\u0264\u0268\u026e\u0279\u027d\u0280\u0284\u028b\u0292\u0294",
    "\u0299\u029f\u02a3\u02a6\u02aa\u02b0\u02b2\u02bc\u02c7\u02d8\u02df\u02e9",
    "\u02ed\u02f4\u02f9\u02fb\u0305\u030f\u0318\u0320\u0327\u032c\u0335\u033a",
    "\u033e\u0345\u0347\u034f\u0352\u035a\u035e\u0363\u036a\u0375\u0378\u037c",
    "\u0382\u0386\u038a\u0396\u03a2\u03aa\u03af\u03b4\u03c0\u03c9\u03cc\u03cf",
    "\u03d6\u03d8\u03de\u03e6\u03f0\u03f8\u03fe\u0402\u0406\u040a\u040e\u0416",
    "\u041f\u0427\u043e\u0449\u044f\u0451\u0454\u0456\u045e\u0460\u046a\u0473",
    "\u04a5\u057b\u0584\u058f\u059c\u05aa\u05ae\u05b4\u05bc\u05c4\u05cc\u05d4",
    "\u05dc\u05e3\u05e7\u05eb\u05f1\u05f6\u0604\u060a\u0616\u061f"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'base'", "'prefix'", "'select'", "'distinct'", 
                     "'reduced'", "'as'", "'construct'", "'where'", "'describe'", 
                     "'ask'", "'from'", "'named'", "'group'", "'by'", "'having'", 
                     "'order'", "'asc'", "'desc'", "'limit'", "'offset'", 
                     "'values'", "'load'", "'silent'", "'into'", "'clear'", 
                     "'drop'", "'create'", "'add'", "'to'", "'move'", "'copy'", 
                     "'insert data'", "'delete data'", "'delete where'", 
                     "'with'", "'delete'", "'insert'", "'using'", "'default'", 
                     "'graph'", "'all'", "'optional'", "'service'", "'bind'", 
                     "'undef'", "'minus'", "'union'", "'filter'", "'a'", 
                     "'in'", "'not'", "'str'", "'lang'", "'langmatches'", 
                     "'datatype'", "'bound'", "'iri'", "'uri'", "'bnode'", 
                     "'rand'", "'abs'", "'ceil'", "'floor'", "'round'", 
                     "'concat'", "'strlen'", "'ucase'", "'lcase'", "'encode_for_uri'", 
                     "'contains'", "'strstarts'", "'strends'", "'strbefore'", 
                     "'strafter'", "'year'", "'month'", "'day'", "'hours'", 
                     "'minutes'", "'seconds'", "'timezone'", "'tz'", "'now'", 
                     "'uuid'", "'struuid'", "'md5'", "'sha1'", "'sha256'", 
                     "'sha384'", "'sha512'", "'coalesce'", "'if'", "'strlang'", 
                     "'strdt'", "'sameterm'", "'isiri'", "'isuri'", "'isblank'", 
                     "'isliteral'", "'isnumeric'", "'regex'", "'substr'", 
                     "'replace'", "'exists'", "'count'", "'sum'", "'min'", 
                     "'max'", "'avg'", "'sample'", "'group_concat'", "'separator'", 
                     "'true'", "'false'", null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, "'('", "')'", "'{'", 
                     "'}'", "'*'", "'?'", "'$'", "'.'", "','", "';'", "'|'", 
                     "'/'", "'^'", "'+'", "'!'", "'['", "']'", "'||'", "'&&'", 
                     "'='", "'!='", "'<'", "'>'", "'<='", "'>='", "'^^'", 
                     "':'", "'\n'", "'\r'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, "IRI_REF", 
                      "PNAME_NS", "PNAME_LN", "BLANK_NODE_LABEL", "LANGTAG", 
                      "INTEGER", "DECIMAL", "DOUBLE", "INTEGER_POSITIVE", 
                      "DECIMAL_POSITIVE", "DOUBLE_POSITIVE", "INTEGER_NEGATIVE", 
                      "DECIMAL_NEGATIVE", "DOUBLE_NEGATIVE", "EXPONENT", 
                      "STRING_LITERAL1", "STRING_LITERAL2", "STRING_LITERAL_LONG1", 
                      "STRING_LITERAL_LONG2", "ECHAR", "VARNAME", "PN_CHARS_U", 
                      "PN_PREFIX", "PN_LOCAL", "PLX", "PERCENT", "HEX", 
                      "PN_LOCAL_ESC", "WS", "OPEN_BRACE", "CLOSE_BRACE", 
                      "OPEN_CURLY_BRACE", "CLOSE_CURLY_BRACE", "ASTERISK", 
                      "QUESTION", "DOLLAR", "DOT", "COMMA", "SEMICOLON", 
                      "PIPE", "DIVIDE", "HAT", "PLUS", "NOT_SIGN", "OPEN_SQUARE_BRACE", 
                      "CLOSE_SQUARE_BRACE", "OR", "AND", "EQUAL", "NOT_EQUAL", 
                      "LESS", "GREATER", "LESS_EQUAL", "GREATER_EQUAL", 
                      "REFERENCE", "COLON", "LINE_FEED", "CARRIAGE_RETURN", 
                      "EOL_COMMENT" ];

var ruleNames =  [ "queryUnit", "query", "updateUnit", "prologue", "baseDecl", 
                   "prefixDecl", "selectQuery", "subSelect", "selectClause", 
                   "constructQuery", "describeQuery", "askQuery", "datasetClause", 
                   "defaultGraphClause", "namedGraphClause", "sourceSelector", 
                   "whereClause", "solutionModifier", "groupClause", "groupCondition", 
                   "havingClause", "havingCondition", "orderClause", "orderCondition", 
                   "limitOffsetClauses", "limitClause", "offsetClause", 
                   "valuesClause", "update", "update1", "load", "clear", 
                   "drop", "create", "add", "move", "copy", "insertData", 
                   "deleteData", "deleteWhere", "modify", "deleteClause", 
                   "insertClause", "usingClause", "graphOrDefault", "graphRef", 
                   "graphRefAll", "quadPattern", "quadData", "quads", "quadsNotTriples", 
                   "triplesTemplate", "groupGraphPattern", "groupGraphPatternSub", 
                   "triplesBlock", "graphPatternNotTriples", "optionalGraphPattern", 
                   "graphGraphPattern", "serviceGraphPattern", "bind", "inlineData", 
                   "dataBlock", "inlineDataOneVar", "inlineDataFull", "dataBlockValue", 
                   "minusGraphPattern", "groupOrUnionGraphPattern", "filter", 
                   "constraint", "functionCall", "argList", "expressionList", 
                   "constructTemplate", "constructTriples", "triplesSameSubject", 
                   "propertyList", "propertyListNotEmpty", "verb", "objectList", 
                   "object", "triplesSameSubjectPath", "propertyListPath", 
                   "propertyListPathNotEmpty", "verbPath", "verbSimple", 
                   "objectListPath", "objectPath", "path", "pathAlternative", 
                   "pathSequence", "pathElt", "pathEltOrInverse", "pathMod", 
                   "pathPrimary", "pathNegatedPropertySet", "pathOneInPropertySet", 
                   "integer", "triplesNode", "blankNodePropertyList", "triplesNodePath", 
                   "blankNodePropertyListPath", "collection", "collectionPath", 
                   "graphNode", "graphNodePath", "varOrTerm", "varOrIriRef", 
                   "var", "graphTerm", "expression", "conditionalOrExpression", 
                   "conditionalAndExpression", "valueLogical", "relationalExpression", 
                   "numericExpression", "additiveExpression", "multiplicativeExpression", 
                   "unaryExpression", "primaryExpression", "brackettedExpression", 
                   "builtInCall", "regexExpression", "substringExpression", 
                   "strReplaceExpression", "existsFunc", "notExistsFunc", 
                   "aggregate", "iriRefOrFunction", "rdfLiteral", "numericLiteral", 
                   "numericLiteralUnsigned", "numericLiteralPositive", "numericLiteralNegative", 
                   "booleanLiteral", "string", "iriRef", "prefixedName", 
                   "blankNode", "var1", "var2", "nil", "anon" ];

function Sparql11Parser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

Sparql11Parser.prototype = Object.create(antlr4.Parser.prototype);
Sparql11Parser.prototype.constructor = Sparql11Parser;

Object.defineProperty(Sparql11Parser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

Sparql11Parser.EOF = antlr4.Token.EOF;
Sparql11Parser.T__0 = 1;
Sparql11Parser.T__1 = 2;
Sparql11Parser.T__2 = 3;
Sparql11Parser.T__3 = 4;
Sparql11Parser.T__4 = 5;
Sparql11Parser.T__5 = 6;
Sparql11Parser.T__6 = 7;
Sparql11Parser.T__7 = 8;
Sparql11Parser.T__8 = 9;
Sparql11Parser.T__9 = 10;
Sparql11Parser.T__10 = 11;
Sparql11Parser.T__11 = 12;
Sparql11Parser.T__12 = 13;
Sparql11Parser.T__13 = 14;
Sparql11Parser.T__14 = 15;
Sparql11Parser.T__15 = 16;
Sparql11Parser.T__16 = 17;
Sparql11Parser.T__17 = 18;
Sparql11Parser.T__18 = 19;
Sparql11Parser.T__19 = 20;
Sparql11Parser.T__20 = 21;
Sparql11Parser.T__21 = 22;
Sparql11Parser.T__22 = 23;
Sparql11Parser.T__23 = 24;
Sparql11Parser.T__24 = 25;
Sparql11Parser.T__25 = 26;
Sparql11Parser.T__26 = 27;
Sparql11Parser.T__27 = 28;
Sparql11Parser.T__28 = 29;
Sparql11Parser.T__29 = 30;
Sparql11Parser.T__30 = 31;
Sparql11Parser.T__31 = 32;
Sparql11Parser.T__32 = 33;
Sparql11Parser.T__33 = 34;
Sparql11Parser.T__34 = 35;
Sparql11Parser.T__35 = 36;
Sparql11Parser.T__36 = 37;
Sparql11Parser.T__37 = 38;
Sparql11Parser.T__38 = 39;
Sparql11Parser.T__39 = 40;
Sparql11Parser.T__40 = 41;
Sparql11Parser.T__41 = 42;
Sparql11Parser.T__42 = 43;
Sparql11Parser.T__43 = 44;
Sparql11Parser.T__44 = 45;
Sparql11Parser.T__45 = 46;
Sparql11Parser.T__46 = 47;
Sparql11Parser.T__47 = 48;
Sparql11Parser.T__48 = 49;
Sparql11Parser.T__49 = 50;
Sparql11Parser.T__50 = 51;
Sparql11Parser.T__51 = 52;
Sparql11Parser.T__52 = 53;
Sparql11Parser.T__53 = 54;
Sparql11Parser.T__54 = 55;
Sparql11Parser.T__55 = 56;
Sparql11Parser.T__56 = 57;
Sparql11Parser.T__57 = 58;
Sparql11Parser.T__58 = 59;
Sparql11Parser.T__59 = 60;
Sparql11Parser.T__60 = 61;
Sparql11Parser.T__61 = 62;
Sparql11Parser.T__62 = 63;
Sparql11Parser.T__63 = 64;
Sparql11Parser.T__64 = 65;
Sparql11Parser.T__65 = 66;
Sparql11Parser.T__66 = 67;
Sparql11Parser.T__67 = 68;
Sparql11Parser.T__68 = 69;
Sparql11Parser.T__69 = 70;
Sparql11Parser.T__70 = 71;
Sparql11Parser.T__71 = 72;
Sparql11Parser.T__72 = 73;
Sparql11Parser.T__73 = 74;
Sparql11Parser.T__74 = 75;
Sparql11Parser.T__75 = 76;
Sparql11Parser.T__76 = 77;
Sparql11Parser.T__77 = 78;
Sparql11Parser.T__78 = 79;
Sparql11Parser.T__79 = 80;
Sparql11Parser.T__80 = 81;
Sparql11Parser.T__81 = 82;
Sparql11Parser.T__82 = 83;
Sparql11Parser.T__83 = 84;
Sparql11Parser.T__84 = 85;
Sparql11Parser.T__85 = 86;
Sparql11Parser.T__86 = 87;
Sparql11Parser.T__87 = 88;
Sparql11Parser.T__88 = 89;
Sparql11Parser.T__89 = 90;
Sparql11Parser.T__90 = 91;
Sparql11Parser.T__91 = 92;
Sparql11Parser.T__92 = 93;
Sparql11Parser.T__93 = 94;
Sparql11Parser.T__94 = 95;
Sparql11Parser.T__95 = 96;
Sparql11Parser.T__96 = 97;
Sparql11Parser.T__97 = 98;
Sparql11Parser.T__98 = 99;
Sparql11Parser.T__99 = 100;
Sparql11Parser.T__100 = 101;
Sparql11Parser.T__101 = 102;
Sparql11Parser.T__102 = 103;
Sparql11Parser.T__103 = 104;
Sparql11Parser.T__104 = 105;
Sparql11Parser.T__105 = 106;
Sparql11Parser.T__106 = 107;
Sparql11Parser.T__107 = 108;
Sparql11Parser.T__108 = 109;
Sparql11Parser.T__109 = 110;
Sparql11Parser.T__110 = 111;
Sparql11Parser.T__111 = 112;
Sparql11Parser.T__112 = 113;
Sparql11Parser.T__113 = 114;
Sparql11Parser.IRI_REF = 115;
Sparql11Parser.PNAME_NS = 116;
Sparql11Parser.PNAME_LN = 117;
Sparql11Parser.BLANK_NODE_LABEL = 118;
Sparql11Parser.LANGTAG = 119;
Sparql11Parser.INTEGER = 120;
Sparql11Parser.DECIMAL = 121;
Sparql11Parser.DOUBLE = 122;
Sparql11Parser.INTEGER_POSITIVE = 123;
Sparql11Parser.DECIMAL_POSITIVE = 124;
Sparql11Parser.DOUBLE_POSITIVE = 125;
Sparql11Parser.INTEGER_NEGATIVE = 126;
Sparql11Parser.DECIMAL_NEGATIVE = 127;
Sparql11Parser.DOUBLE_NEGATIVE = 128;
Sparql11Parser.EXPONENT = 129;
Sparql11Parser.STRING_LITERAL1 = 130;
Sparql11Parser.STRING_LITERAL2 = 131;
Sparql11Parser.STRING_LITERAL_LONG1 = 132;
Sparql11Parser.STRING_LITERAL_LONG2 = 133;
Sparql11Parser.ECHAR = 134;
Sparql11Parser.VARNAME = 135;
Sparql11Parser.PN_CHARS_U = 136;
Sparql11Parser.PN_PREFIX = 137;
Sparql11Parser.PN_LOCAL = 138;
Sparql11Parser.PLX = 139;
Sparql11Parser.PERCENT = 140;
Sparql11Parser.HEX = 141;
Sparql11Parser.PN_LOCAL_ESC = 142;
Sparql11Parser.WS = 143;
Sparql11Parser.OPEN_BRACE = 144;
Sparql11Parser.CLOSE_BRACE = 145;
Sparql11Parser.OPEN_CURLY_BRACE = 146;
Sparql11Parser.CLOSE_CURLY_BRACE = 147;
Sparql11Parser.ASTERISK = 148;
Sparql11Parser.QUESTION = 149;
Sparql11Parser.DOLLAR = 150;
Sparql11Parser.DOT = 151;
Sparql11Parser.COMMA = 152;
Sparql11Parser.SEMICOLON = 153;
Sparql11Parser.PIPE = 154;
Sparql11Parser.DIVIDE = 155;
Sparql11Parser.HAT = 156;
Sparql11Parser.PLUS = 157;
Sparql11Parser.NOT_SIGN = 158;
Sparql11Parser.OPEN_SQUARE_BRACE = 159;
Sparql11Parser.CLOSE_SQUARE_BRACE = 160;
Sparql11Parser.OR = 161;
Sparql11Parser.AND = 162;
Sparql11Parser.EQUAL = 163;
Sparql11Parser.NOT_EQUAL = 164;
Sparql11Parser.LESS = 165;
Sparql11Parser.GREATER = 166;
Sparql11Parser.LESS_EQUAL = 167;
Sparql11Parser.GREATER_EQUAL = 168;
Sparql11Parser.REFERENCE = 169;
Sparql11Parser.COLON = 170;
Sparql11Parser.LINE_FEED = 171;
Sparql11Parser.CARRIAGE_RETURN = 172;
Sparql11Parser.EOL_COMMENT = 173;

Sparql11Parser.RULE_queryUnit = 0;
Sparql11Parser.RULE_query = 1;
Sparql11Parser.RULE_updateUnit = 2;
Sparql11Parser.RULE_prologue = 3;
Sparql11Parser.RULE_baseDecl = 4;
Sparql11Parser.RULE_prefixDecl = 5;
Sparql11Parser.RULE_selectQuery = 6;
Sparql11Parser.RULE_subSelect = 7;
Sparql11Parser.RULE_selectClause = 8;
Sparql11Parser.RULE_constructQuery = 9;
Sparql11Parser.RULE_describeQuery = 10;
Sparql11Parser.RULE_askQuery = 11;
Sparql11Parser.RULE_datasetClause = 12;
Sparql11Parser.RULE_defaultGraphClause = 13;
Sparql11Parser.RULE_namedGraphClause = 14;
Sparql11Parser.RULE_sourceSelector = 15;
Sparql11Parser.RULE_whereClause = 16;
Sparql11Parser.RULE_solutionModifier = 17;
Sparql11Parser.RULE_groupClause = 18;
Sparql11Parser.RULE_groupCondition = 19;
Sparql11Parser.RULE_havingClause = 20;
Sparql11Parser.RULE_havingCondition = 21;
Sparql11Parser.RULE_orderClause = 22;
Sparql11Parser.RULE_orderCondition = 23;
Sparql11Parser.RULE_limitOffsetClauses = 24;
Sparql11Parser.RULE_limitClause = 25;
Sparql11Parser.RULE_offsetClause = 26;
Sparql11Parser.RULE_valuesClause = 27;
Sparql11Parser.RULE_update = 28;
Sparql11Parser.RULE_update1 = 29;
Sparql11Parser.RULE_load = 30;
Sparql11Parser.RULE_clear = 31;
Sparql11Parser.RULE_drop = 32;
Sparql11Parser.RULE_create = 33;
Sparql11Parser.RULE_add = 34;
Sparql11Parser.RULE_move = 35;
Sparql11Parser.RULE_copy = 36;
Sparql11Parser.RULE_insertData = 37;
Sparql11Parser.RULE_deleteData = 38;
Sparql11Parser.RULE_deleteWhere = 39;
Sparql11Parser.RULE_modify = 40;
Sparql11Parser.RULE_deleteClause = 41;
Sparql11Parser.RULE_insertClause = 42;
Sparql11Parser.RULE_usingClause = 43;
Sparql11Parser.RULE_graphOrDefault = 44;
Sparql11Parser.RULE_graphRef = 45;
Sparql11Parser.RULE_graphRefAll = 46;
Sparql11Parser.RULE_quadPattern = 47;
Sparql11Parser.RULE_quadData = 48;
Sparql11Parser.RULE_quads = 49;
Sparql11Parser.RULE_quadsNotTriples = 50;
Sparql11Parser.RULE_triplesTemplate = 51;
Sparql11Parser.RULE_groupGraphPattern = 52;
Sparql11Parser.RULE_groupGraphPatternSub = 53;
Sparql11Parser.RULE_triplesBlock = 54;
Sparql11Parser.RULE_graphPatternNotTriples = 55;
Sparql11Parser.RULE_optionalGraphPattern = 56;
Sparql11Parser.RULE_graphGraphPattern = 57;
Sparql11Parser.RULE_serviceGraphPattern = 58;
Sparql11Parser.RULE_bind = 59;
Sparql11Parser.RULE_inlineData = 60;
Sparql11Parser.RULE_dataBlock = 61;
Sparql11Parser.RULE_inlineDataOneVar = 62;
Sparql11Parser.RULE_inlineDataFull = 63;
Sparql11Parser.RULE_dataBlockValue = 64;
Sparql11Parser.RULE_minusGraphPattern = 65;
Sparql11Parser.RULE_groupOrUnionGraphPattern = 66;
Sparql11Parser.RULE_filter = 67;
Sparql11Parser.RULE_constraint = 68;
Sparql11Parser.RULE_functionCall = 69;
Sparql11Parser.RULE_argList = 70;
Sparql11Parser.RULE_expressionList = 71;
Sparql11Parser.RULE_constructTemplate = 72;
Sparql11Parser.RULE_constructTriples = 73;
Sparql11Parser.RULE_triplesSameSubject = 74;
Sparql11Parser.RULE_propertyList = 75;
Sparql11Parser.RULE_propertyListNotEmpty = 76;
Sparql11Parser.RULE_verb = 77;
Sparql11Parser.RULE_objectList = 78;
Sparql11Parser.RULE_object = 79;
Sparql11Parser.RULE_triplesSameSubjectPath = 80;
Sparql11Parser.RULE_propertyListPath = 81;
Sparql11Parser.RULE_propertyListPathNotEmpty = 82;
Sparql11Parser.RULE_verbPath = 83;
Sparql11Parser.RULE_verbSimple = 84;
Sparql11Parser.RULE_objectListPath = 85;
Sparql11Parser.RULE_objectPath = 86;
Sparql11Parser.RULE_path = 87;
Sparql11Parser.RULE_pathAlternative = 88;
Sparql11Parser.RULE_pathSequence = 89;
Sparql11Parser.RULE_pathElt = 90;
Sparql11Parser.RULE_pathEltOrInverse = 91;
Sparql11Parser.RULE_pathMod = 92;
Sparql11Parser.RULE_pathPrimary = 93;
Sparql11Parser.RULE_pathNegatedPropertySet = 94;
Sparql11Parser.RULE_pathOneInPropertySet = 95;
Sparql11Parser.RULE_integer = 96;
Sparql11Parser.RULE_triplesNode = 97;
Sparql11Parser.RULE_blankNodePropertyList = 98;
Sparql11Parser.RULE_triplesNodePath = 99;
Sparql11Parser.RULE_blankNodePropertyListPath = 100;
Sparql11Parser.RULE_collection = 101;
Sparql11Parser.RULE_collectionPath = 102;
Sparql11Parser.RULE_graphNode = 103;
Sparql11Parser.RULE_graphNodePath = 104;
Sparql11Parser.RULE_varOrTerm = 105;
Sparql11Parser.RULE_varOrIriRef = 106;
Sparql11Parser.RULE_var = 107;
Sparql11Parser.RULE_graphTerm = 108;
Sparql11Parser.RULE_expression = 109;
Sparql11Parser.RULE_conditionalOrExpression = 110;
Sparql11Parser.RULE_conditionalAndExpression = 111;
Sparql11Parser.RULE_valueLogical = 112;
Sparql11Parser.RULE_relationalExpression = 113;
Sparql11Parser.RULE_numericExpression = 114;
Sparql11Parser.RULE_additiveExpression = 115;
Sparql11Parser.RULE_multiplicativeExpression = 116;
Sparql11Parser.RULE_unaryExpression = 117;
Sparql11Parser.RULE_primaryExpression = 118;
Sparql11Parser.RULE_brackettedExpression = 119;
Sparql11Parser.RULE_builtInCall = 120;
Sparql11Parser.RULE_regexExpression = 121;
Sparql11Parser.RULE_substringExpression = 122;
Sparql11Parser.RULE_strReplaceExpression = 123;
Sparql11Parser.RULE_existsFunc = 124;
Sparql11Parser.RULE_notExistsFunc = 125;
Sparql11Parser.RULE_aggregate = 126;
Sparql11Parser.RULE_iriRefOrFunction = 127;
Sparql11Parser.RULE_rdfLiteral = 128;
Sparql11Parser.RULE_numericLiteral = 129;
Sparql11Parser.RULE_numericLiteralUnsigned = 130;
Sparql11Parser.RULE_numericLiteralPositive = 131;
Sparql11Parser.RULE_numericLiteralNegative = 132;
Sparql11Parser.RULE_booleanLiteral = 133;
Sparql11Parser.RULE_string = 134;
Sparql11Parser.RULE_iriRef = 135;
Sparql11Parser.RULE_prefixedName = 136;
Sparql11Parser.RULE_blankNode = 137;
Sparql11Parser.RULE_var1 = 138;
Sparql11Parser.RULE_var2 = 139;
Sparql11Parser.RULE_nil = 140;
Sparql11Parser.RULE_anon = 141;

function QueryUnitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_queryUnit;
    return this;
}

QueryUnitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryUnitContext.prototype.constructor = QueryUnitContext;

QueryUnitContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

QueryUnitContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterQueryUnit(this);
	}
};

QueryUnitContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitQueryUnit(this);
	}
};




Sparql11Parser.QueryUnitContext = QueryUnitContext;

Sparql11Parser.prototype.queryUnit = function() {

    var localctx = new QueryUnitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, Sparql11Parser.RULE_queryUnit);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 284;
        this.query();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_query;
    return this;
}

QueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryContext.prototype.constructor = QueryContext;

QueryContext.prototype.prologue = function() {
    return this.getTypedRuleContext(PrologueContext,0);
};

QueryContext.prototype.valuesClause = function() {
    return this.getTypedRuleContext(ValuesClauseContext,0);
};

QueryContext.prototype.selectQuery = function() {
    return this.getTypedRuleContext(SelectQueryContext,0);
};

QueryContext.prototype.constructQuery = function() {
    return this.getTypedRuleContext(ConstructQueryContext,0);
};

QueryContext.prototype.describeQuery = function() {
    return this.getTypedRuleContext(DescribeQueryContext,0);
};

QueryContext.prototype.askQuery = function() {
    return this.getTypedRuleContext(AskQueryContext,0);
};

QueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterQuery(this);
	}
};

QueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitQuery(this);
	}
};




Sparql11Parser.QueryContext = QueryContext;

Sparql11Parser.prototype.query = function() {

    var localctx = new QueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, Sparql11Parser.RULE_query);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 286;
        this.prologue();
        this.state = 291;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.T__2:
            this.state = 287;
            this.selectQuery();
            break;
        case Sparql11Parser.T__6:
            this.state = 288;
            this.constructQuery();
            break;
        case Sparql11Parser.T__8:
            this.state = 289;
            this.describeQuery();
            break;
        case Sparql11Parser.T__9:
            this.state = 290;
            this.askQuery();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 293;
        this.valuesClause();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UpdateUnitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_updateUnit;
    return this;
}

UpdateUnitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UpdateUnitContext.prototype.constructor = UpdateUnitContext;

UpdateUnitContext.prototype.update = function() {
    return this.getTypedRuleContext(UpdateContext,0);
};

UpdateUnitContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterUpdateUnit(this);
	}
};

UpdateUnitContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitUpdateUnit(this);
	}
};




Sparql11Parser.UpdateUnitContext = UpdateUnitContext;

Sparql11Parser.prototype.updateUnit = function() {

    var localctx = new UpdateUnitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, Sparql11Parser.RULE_updateUnit);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 295;
        this.update();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrologueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_prologue;
    return this;
}

PrologueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrologueContext.prototype.constructor = PrologueContext;

PrologueContext.prototype.baseDecl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BaseDeclContext);
    } else {
        return this.getTypedRuleContext(BaseDeclContext,i);
    }
};

PrologueContext.prototype.prefixDecl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PrefixDeclContext);
    } else {
        return this.getTypedRuleContext(PrefixDeclContext,i);
    }
};

PrologueContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterPrologue(this);
	}
};

PrologueContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitPrologue(this);
	}
};




Sparql11Parser.PrologueContext = PrologueContext;

Sparql11Parser.prototype.prologue = function() {

    var localctx = new PrologueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, Sparql11Parser.RULE_prologue);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 301;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Sparql11Parser.T__0 || _la===Sparql11Parser.T__1) {
            this.state = 299;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case Sparql11Parser.T__0:
                this.state = 297;
                this.baseDecl();
                break;
            case Sparql11Parser.T__1:
                this.state = 298;
                this.prefixDecl();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 303;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BaseDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_baseDecl;
    return this;
}

BaseDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BaseDeclContext.prototype.constructor = BaseDeclContext;

BaseDeclContext.prototype.IRI_REF = function() {
    return this.getToken(Sparql11Parser.IRI_REF, 0);
};

BaseDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterBaseDecl(this);
	}
};

BaseDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitBaseDecl(this);
	}
};




Sparql11Parser.BaseDeclContext = BaseDeclContext;

Sparql11Parser.prototype.baseDecl = function() {

    var localctx = new BaseDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, Sparql11Parser.RULE_baseDecl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 304;
        this.match(Sparql11Parser.T__0);
        this.state = 305;
        this.match(Sparql11Parser.IRI_REF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrefixDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_prefixDecl;
    return this;
}

PrefixDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrefixDeclContext.prototype.constructor = PrefixDeclContext;

PrefixDeclContext.prototype.PNAME_NS = function() {
    return this.getToken(Sparql11Parser.PNAME_NS, 0);
};

PrefixDeclContext.prototype.IRI_REF = function() {
    return this.getToken(Sparql11Parser.IRI_REF, 0);
};

PrefixDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterPrefixDecl(this);
	}
};

PrefixDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitPrefixDecl(this);
	}
};




Sparql11Parser.PrefixDeclContext = PrefixDeclContext;

Sparql11Parser.prototype.prefixDecl = function() {

    var localctx = new PrefixDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, Sparql11Parser.RULE_prefixDecl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 307;
        this.match(Sparql11Parser.T__1);
        this.state = 308;
        this.match(Sparql11Parser.PNAME_NS);
        this.state = 309;
        this.match(Sparql11Parser.IRI_REF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SelectQueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_selectQuery;
    return this;
}

SelectQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectQueryContext.prototype.constructor = SelectQueryContext;

SelectQueryContext.prototype.selectClause = function() {
    return this.getTypedRuleContext(SelectClauseContext,0);
};

SelectQueryContext.prototype.whereClause = function() {
    return this.getTypedRuleContext(WhereClauseContext,0);
};

SelectQueryContext.prototype.solutionModifier = function() {
    return this.getTypedRuleContext(SolutionModifierContext,0);
};

SelectQueryContext.prototype.datasetClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DatasetClauseContext);
    } else {
        return this.getTypedRuleContext(DatasetClauseContext,i);
    }
};

SelectQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterSelectQuery(this);
	}
};

SelectQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitSelectQuery(this);
	}
};




Sparql11Parser.SelectQueryContext = SelectQueryContext;

Sparql11Parser.prototype.selectQuery = function() {

    var localctx = new SelectQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, Sparql11Parser.RULE_selectQuery);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 311;
        this.selectClause();
        this.state = 315;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Sparql11Parser.T__10) {
            this.state = 312;
            this.datasetClause();
            this.state = 317;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 318;
        this.whereClause();
        this.state = 319;
        this.solutionModifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubSelectContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_subSelect;
    return this;
}

SubSelectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubSelectContext.prototype.constructor = SubSelectContext;

SubSelectContext.prototype.selectClause = function() {
    return this.getTypedRuleContext(SelectClauseContext,0);
};

SubSelectContext.prototype.whereClause = function() {
    return this.getTypedRuleContext(WhereClauseContext,0);
};

SubSelectContext.prototype.solutionModifier = function() {
    return this.getTypedRuleContext(SolutionModifierContext,0);
};

SubSelectContext.prototype.valuesClause = function() {
    return this.getTypedRuleContext(ValuesClauseContext,0);
};

SubSelectContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterSubSelect(this);
	}
};

SubSelectContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitSubSelect(this);
	}
};




Sparql11Parser.SubSelectContext = SubSelectContext;

Sparql11Parser.prototype.subSelect = function() {

    var localctx = new SubSelectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, Sparql11Parser.RULE_subSelect);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 321;
        this.selectClause();
        this.state = 322;
        this.whereClause();
        this.state = 323;
        this.solutionModifier();
        this.state = 324;
        this.valuesClause();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SelectClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_selectClause;
    return this;
}

SelectClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectClauseContext.prototype.constructor = SelectClauseContext;

SelectClauseContext.prototype.ASTERISK = function() {
    return this.getToken(Sparql11Parser.ASTERISK, 0);
};

SelectClauseContext.prototype.var = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VarContext);
    } else {
        return this.getTypedRuleContext(VarContext,i);
    }
};

SelectClauseContext.prototype.OPEN_BRACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Sparql11Parser.OPEN_BRACE);
    } else {
        return this.getToken(Sparql11Parser.OPEN_BRACE, i);
    }
};


SelectClauseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

SelectClauseContext.prototype.CLOSE_BRACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Sparql11Parser.CLOSE_BRACE);
    } else {
        return this.getToken(Sparql11Parser.CLOSE_BRACE, i);
    }
};


SelectClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterSelectClause(this);
	}
};

SelectClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitSelectClause(this);
	}
};




Sparql11Parser.SelectClauseContext = SelectClauseContext;

Sparql11Parser.prototype.selectClause = function() {

    var localctx = new SelectClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, Sparql11Parser.RULE_selectClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 326;
        this.match(Sparql11Parser.T__2);
        this.state = 328;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Sparql11Parser.T__3 || _la===Sparql11Parser.T__4) {
            this.state = 327;
            _la = this._input.LA(1);
            if(!(_la===Sparql11Parser.T__3 || _la===Sparql11Parser.T__4)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 342;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.OPEN_BRACE:
        case Sparql11Parser.QUESTION:
        case Sparql11Parser.DOLLAR:
            this.state = 337; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 337;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case Sparql11Parser.QUESTION:
                case Sparql11Parser.DOLLAR:
                    this.state = 330;
                    this.var();
                    break;
                case Sparql11Parser.OPEN_BRACE:
                    this.state = 331;
                    this.match(Sparql11Parser.OPEN_BRACE);
                    this.state = 332;
                    this.expression();
                    this.state = 333;
                    this.match(Sparql11Parser.T__5);
                    this.state = 334;
                    this.var();
                    this.state = 335;
                    this.match(Sparql11Parser.CLOSE_BRACE);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 339; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(((((_la - 144)) & ~0x1f) == 0 && ((1 << (_la - 144)) & ((1 << (Sparql11Parser.OPEN_BRACE - 144)) | (1 << (Sparql11Parser.QUESTION - 144)) | (1 << (Sparql11Parser.DOLLAR - 144)))) !== 0));
            break;
        case Sparql11Parser.ASTERISK:
            this.state = 341;
            this.match(Sparql11Parser.ASTERISK);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstructQueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_constructQuery;
    return this;
}

ConstructQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructQueryContext.prototype.constructor = ConstructQueryContext;

ConstructQueryContext.prototype.constructTemplate = function() {
    return this.getTypedRuleContext(ConstructTemplateContext,0);
};

ConstructQueryContext.prototype.whereClause = function() {
    return this.getTypedRuleContext(WhereClauseContext,0);
};

ConstructQueryContext.prototype.solutionModifier = function() {
    return this.getTypedRuleContext(SolutionModifierContext,0);
};

ConstructQueryContext.prototype.OPEN_CURLY_BRACE = function() {
    return this.getToken(Sparql11Parser.OPEN_CURLY_BRACE, 0);
};

ConstructQueryContext.prototype.CLOSE_CURLY_BRACE = function() {
    return this.getToken(Sparql11Parser.CLOSE_CURLY_BRACE, 0);
};

ConstructQueryContext.prototype.datasetClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DatasetClauseContext);
    } else {
        return this.getTypedRuleContext(DatasetClauseContext,i);
    }
};

ConstructQueryContext.prototype.triplesTemplate = function() {
    return this.getTypedRuleContext(TriplesTemplateContext,0);
};

ConstructQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterConstructQuery(this);
	}
};

ConstructQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitConstructQuery(this);
	}
};




Sparql11Parser.ConstructQueryContext = ConstructQueryContext;

Sparql11Parser.prototype.constructQuery = function() {

    var localctx = new ConstructQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, Sparql11Parser.RULE_constructQuery);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 344;
        this.match(Sparql11Parser.T__6);
        this.state = 368;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.OPEN_CURLY_BRACE:
            this.state = 345;
            this.constructTemplate();
            this.state = 349;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Sparql11Parser.T__10) {
                this.state = 346;
                this.datasetClause();
                this.state = 351;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 352;
            this.whereClause();
            this.state = 353;
            this.solutionModifier();
            break;
        case Sparql11Parser.T__7:
        case Sparql11Parser.T__10:
            this.state = 358;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Sparql11Parser.T__10) {
                this.state = 355;
                this.datasetClause();
                this.state = 360;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 361;
            this.match(Sparql11Parser.T__7);
            this.state = 362;
            this.match(Sparql11Parser.OPEN_CURLY_BRACE);
            this.state = 364;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (Sparql11Parser.T__112 - 113)) | (1 << (Sparql11Parser.T__113 - 113)) | (1 << (Sparql11Parser.IRI_REF - 113)) | (1 << (Sparql11Parser.PNAME_NS - 113)) | (1 << (Sparql11Parser.PNAME_LN - 113)) | (1 << (Sparql11Parser.BLANK_NODE_LABEL - 113)) | (1 << (Sparql11Parser.INTEGER - 113)) | (1 << (Sparql11Parser.DECIMAL - 113)) | (1 << (Sparql11Parser.DOUBLE - 113)) | (1 << (Sparql11Parser.INTEGER_POSITIVE - 113)) | (1 << (Sparql11Parser.DECIMAL_POSITIVE - 113)) | (1 << (Sparql11Parser.DOUBLE_POSITIVE - 113)) | (1 << (Sparql11Parser.INTEGER_NEGATIVE - 113)) | (1 << (Sparql11Parser.DECIMAL_NEGATIVE - 113)) | (1 << (Sparql11Parser.DOUBLE_NEGATIVE - 113)) | (1 << (Sparql11Parser.STRING_LITERAL1 - 113)) | (1 << (Sparql11Parser.STRING_LITERAL2 - 113)) | (1 << (Sparql11Parser.STRING_LITERAL_LONG1 - 113)) | (1 << (Sparql11Parser.STRING_LITERAL_LONG2 - 113)) | (1 << (Sparql11Parser.OPEN_BRACE - 113)))) !== 0) || ((((_la - 149)) & ~0x1f) == 0 && ((1 << (_la - 149)) & ((1 << (Sparql11Parser.QUESTION - 149)) | (1 << (Sparql11Parser.DOLLAR - 149)) | (1 << (Sparql11Parser.OPEN_SQUARE_BRACE - 149)))) !== 0)) {
                this.state = 363;
                this.triplesTemplate();
            }

            this.state = 366;
            this.match(Sparql11Parser.CLOSE_CURLY_BRACE);
            this.state = 367;
            this.solutionModifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DescribeQueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_describeQuery;
    return this;
}

DescribeQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DescribeQueryContext.prototype.constructor = DescribeQueryContext;

DescribeQueryContext.prototype.solutionModifier = function() {
    return this.getTypedRuleContext(SolutionModifierContext,0);
};

DescribeQueryContext.prototype.ASTERISK = function() {
    return this.getToken(Sparql11Parser.ASTERISK, 0);
};

DescribeQueryContext.prototype.datasetClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DatasetClauseContext);
    } else {
        return this.getTypedRuleContext(DatasetClauseContext,i);
    }
};

DescribeQueryContext.prototype.whereClause = function() {
    return this.getTypedRuleContext(WhereClauseContext,0);
};

DescribeQueryContext.prototype.varOrIriRef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VarOrIriRefContext);
    } else {
        return this.getTypedRuleContext(VarOrIriRefContext,i);
    }
};

DescribeQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterDescribeQuery(this);
	}
};

DescribeQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitDescribeQuery(this);
	}
};




Sparql11Parser.DescribeQueryContext = DescribeQueryContext;

Sparql11Parser.prototype.describeQuery = function() {

    var localctx = new DescribeQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, Sparql11Parser.RULE_describeQuery);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 370;
        this.match(Sparql11Parser.T__8);
        this.state = 377;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.IRI_REF:
        case Sparql11Parser.PNAME_NS:
        case Sparql11Parser.PNAME_LN:
        case Sparql11Parser.QUESTION:
        case Sparql11Parser.DOLLAR:
            this.state = 372; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 371;
                this.varOrIriRef();
                this.state = 374; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (Sparql11Parser.IRI_REF - 115)) | (1 << (Sparql11Parser.PNAME_NS - 115)) | (1 << (Sparql11Parser.PNAME_LN - 115)))) !== 0) || _la===Sparql11Parser.QUESTION || _la===Sparql11Parser.DOLLAR);
            break;
        case Sparql11Parser.ASTERISK:
            this.state = 376;
            this.match(Sparql11Parser.ASTERISK);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 382;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Sparql11Parser.T__10) {
            this.state = 379;
            this.datasetClause();
            this.state = 384;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 386;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Sparql11Parser.T__7 || _la===Sparql11Parser.OPEN_CURLY_BRACE) {
            this.state = 385;
            this.whereClause();
        }

        this.state = 388;
        this.solutionModifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AskQueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_askQuery;
    return this;
}

AskQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AskQueryContext.prototype.constructor = AskQueryContext;

AskQueryContext.prototype.whereClause = function() {
    return this.getTypedRuleContext(WhereClauseContext,0);
};

AskQueryContext.prototype.solutionModifier = function() {
    return this.getTypedRuleContext(SolutionModifierContext,0);
};

AskQueryContext.prototype.datasetClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DatasetClauseContext);
    } else {
        return this.getTypedRuleContext(DatasetClauseContext,i);
    }
};

AskQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterAskQuery(this);
	}
};

AskQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitAskQuery(this);
	}
};




Sparql11Parser.AskQueryContext = AskQueryContext;

Sparql11Parser.prototype.askQuery = function() {

    var localctx = new AskQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, Sparql11Parser.RULE_askQuery);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 390;
        this.match(Sparql11Parser.T__9);
        this.state = 394;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Sparql11Parser.T__10) {
            this.state = 391;
            this.datasetClause();
            this.state = 396;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 397;
        this.whereClause();
        this.state = 398;
        this.solutionModifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DatasetClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_datasetClause;
    return this;
}

DatasetClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DatasetClauseContext.prototype.constructor = DatasetClauseContext;

DatasetClauseContext.prototype.defaultGraphClause = function() {
    return this.getTypedRuleContext(DefaultGraphClauseContext,0);
};

DatasetClauseContext.prototype.namedGraphClause = function() {
    return this.getTypedRuleContext(NamedGraphClauseContext,0);
};

DatasetClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterDatasetClause(this);
	}
};

DatasetClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitDatasetClause(this);
	}
};




Sparql11Parser.DatasetClauseContext = DatasetClauseContext;

Sparql11Parser.prototype.datasetClause = function() {

    var localctx = new DatasetClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, Sparql11Parser.RULE_datasetClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 400;
        this.match(Sparql11Parser.T__10);
        this.state = 403;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.IRI_REF:
        case Sparql11Parser.PNAME_NS:
        case Sparql11Parser.PNAME_LN:
            this.state = 401;
            this.defaultGraphClause();
            break;
        case Sparql11Parser.T__11:
            this.state = 402;
            this.namedGraphClause();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DefaultGraphClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_defaultGraphClause;
    return this;
}

DefaultGraphClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefaultGraphClauseContext.prototype.constructor = DefaultGraphClauseContext;

DefaultGraphClauseContext.prototype.sourceSelector = function() {
    return this.getTypedRuleContext(SourceSelectorContext,0);
};

DefaultGraphClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterDefaultGraphClause(this);
	}
};

DefaultGraphClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitDefaultGraphClause(this);
	}
};




Sparql11Parser.DefaultGraphClauseContext = DefaultGraphClauseContext;

Sparql11Parser.prototype.defaultGraphClause = function() {

    var localctx = new DefaultGraphClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, Sparql11Parser.RULE_defaultGraphClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 405;
        this.sourceSelector();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamedGraphClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_namedGraphClause;
    return this;
}

NamedGraphClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedGraphClauseContext.prototype.constructor = NamedGraphClauseContext;

NamedGraphClauseContext.prototype.sourceSelector = function() {
    return this.getTypedRuleContext(SourceSelectorContext,0);
};

NamedGraphClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterNamedGraphClause(this);
	}
};

NamedGraphClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitNamedGraphClause(this);
	}
};




Sparql11Parser.NamedGraphClauseContext = NamedGraphClauseContext;

Sparql11Parser.prototype.namedGraphClause = function() {

    var localctx = new NamedGraphClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, Sparql11Parser.RULE_namedGraphClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 407;
        this.match(Sparql11Parser.T__11);
        this.state = 408;
        this.sourceSelector();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SourceSelectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_sourceSelector;
    return this;
}

SourceSelectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SourceSelectorContext.prototype.constructor = SourceSelectorContext;

SourceSelectorContext.prototype.iriRef = function() {
    return this.getTypedRuleContext(IriRefContext,0);
};

SourceSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterSourceSelector(this);
	}
};

SourceSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitSourceSelector(this);
	}
};




Sparql11Parser.SourceSelectorContext = SourceSelectorContext;

Sparql11Parser.prototype.sourceSelector = function() {

    var localctx = new SourceSelectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, Sparql11Parser.RULE_sourceSelector);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 410;
        this.iriRef();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WhereClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_whereClause;
    return this;
}

WhereClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhereClauseContext.prototype.constructor = WhereClauseContext;

WhereClauseContext.prototype.groupGraphPattern = function() {
    return this.getTypedRuleContext(GroupGraphPatternContext,0);
};

WhereClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterWhereClause(this);
	}
};

WhereClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitWhereClause(this);
	}
};




Sparql11Parser.WhereClauseContext = WhereClauseContext;

Sparql11Parser.prototype.whereClause = function() {

    var localctx = new WhereClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, Sparql11Parser.RULE_whereClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 413;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Sparql11Parser.T__7) {
            this.state = 412;
            this.match(Sparql11Parser.T__7);
        }

        this.state = 415;
        this.groupGraphPattern();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SolutionModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_solutionModifier;
    return this;
}

SolutionModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SolutionModifierContext.prototype.constructor = SolutionModifierContext;

SolutionModifierContext.prototype.groupClause = function() {
    return this.getTypedRuleContext(GroupClauseContext,0);
};

SolutionModifierContext.prototype.havingClause = function() {
    return this.getTypedRuleContext(HavingClauseContext,0);
};

SolutionModifierContext.prototype.orderClause = function() {
    return this.getTypedRuleContext(OrderClauseContext,0);
};

SolutionModifierContext.prototype.limitOffsetClauses = function() {
    return this.getTypedRuleContext(LimitOffsetClausesContext,0);
};

SolutionModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterSolutionModifier(this);
	}
};

SolutionModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitSolutionModifier(this);
	}
};




Sparql11Parser.SolutionModifierContext = SolutionModifierContext;

Sparql11Parser.prototype.solutionModifier = function() {

    var localctx = new SolutionModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, Sparql11Parser.RULE_solutionModifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 418;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Sparql11Parser.T__12) {
            this.state = 417;
            this.groupClause();
        }

        this.state = 421;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Sparql11Parser.T__14) {
            this.state = 420;
            this.havingClause();
        }

        this.state = 424;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Sparql11Parser.T__15) {
            this.state = 423;
            this.orderClause();
        }

        this.state = 427;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Sparql11Parser.T__18 || _la===Sparql11Parser.T__19) {
            this.state = 426;
            this.limitOffsetClauses();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GroupClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_groupClause;
    return this;
}

GroupClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupClauseContext.prototype.constructor = GroupClauseContext;

GroupClauseContext.prototype.groupCondition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GroupConditionContext);
    } else {
        return this.getTypedRuleContext(GroupConditionContext,i);
    }
};

GroupClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterGroupClause(this);
	}
};

GroupClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitGroupClause(this);
	}
};




Sparql11Parser.GroupClauseContext = GroupClauseContext;

Sparql11Parser.prototype.groupClause = function() {

    var localctx = new GroupClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, Sparql11Parser.RULE_groupClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 429;
        this.match(Sparql11Parser.T__12);
        this.state = 430;
        this.match(Sparql11Parser.T__13);
        this.state = 432; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 431;
        		this.groupCondition();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 434; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,23, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GroupConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_groupCondition;
    return this;
}

GroupConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupConditionContext.prototype.constructor = GroupConditionContext;

GroupConditionContext.prototype.builtInCall = function() {
    return this.getTypedRuleContext(BuiltInCallContext,0);
};

GroupConditionContext.prototype.functionCall = function() {
    return this.getTypedRuleContext(FunctionCallContext,0);
};

GroupConditionContext.prototype.OPEN_BRACE = function() {
    return this.getToken(Sparql11Parser.OPEN_BRACE, 0);
};

GroupConditionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

GroupConditionContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(Sparql11Parser.CLOSE_BRACE, 0);
};

GroupConditionContext.prototype.var = function() {
    return this.getTypedRuleContext(VarContext,0);
};

GroupConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterGroupCondition(this);
	}
};

GroupConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitGroupCondition(this);
	}
};




Sparql11Parser.GroupConditionContext = GroupConditionContext;

Sparql11Parser.prototype.groupCondition = function() {

    var localctx = new GroupConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, Sparql11Parser.RULE_groupCondition);
    var _la = 0; // Token type
    try {
        this.state = 447;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.T__50:
        case Sparql11Parser.T__51:
        case Sparql11Parser.T__52:
        case Sparql11Parser.T__53:
        case Sparql11Parser.T__54:
        case Sparql11Parser.T__55:
        case Sparql11Parser.T__56:
        case Sparql11Parser.T__57:
        case Sparql11Parser.T__58:
        case Sparql11Parser.T__59:
        case Sparql11Parser.T__60:
        case Sparql11Parser.T__61:
        case Sparql11Parser.T__62:
        case Sparql11Parser.T__63:
        case Sparql11Parser.T__64:
        case Sparql11Parser.T__65:
        case Sparql11Parser.T__66:
        case Sparql11Parser.T__67:
        case Sparql11Parser.T__68:
        case Sparql11Parser.T__69:
        case Sparql11Parser.T__70:
        case Sparql11Parser.T__71:
        case Sparql11Parser.T__72:
        case Sparql11Parser.T__73:
        case Sparql11Parser.T__74:
        case Sparql11Parser.T__75:
        case Sparql11Parser.T__76:
        case Sparql11Parser.T__77:
        case Sparql11Parser.T__78:
        case Sparql11Parser.T__79:
        case Sparql11Parser.T__80:
        case Sparql11Parser.T__81:
        case Sparql11Parser.T__82:
        case Sparql11Parser.T__83:
        case Sparql11Parser.T__84:
        case Sparql11Parser.T__85:
        case Sparql11Parser.T__86:
        case Sparql11Parser.T__87:
        case Sparql11Parser.T__88:
        case Sparql11Parser.T__89:
        case Sparql11Parser.T__90:
        case Sparql11Parser.T__91:
        case Sparql11Parser.T__92:
        case Sparql11Parser.T__93:
        case Sparql11Parser.T__94:
        case Sparql11Parser.T__95:
        case Sparql11Parser.T__96:
        case Sparql11Parser.T__97:
        case Sparql11Parser.T__98:
        case Sparql11Parser.T__99:
        case Sparql11Parser.T__100:
        case Sparql11Parser.T__101:
        case Sparql11Parser.T__102:
        case Sparql11Parser.T__103:
        case Sparql11Parser.T__104:
        case Sparql11Parser.T__105:
        case Sparql11Parser.T__106:
        case Sparql11Parser.T__107:
        case Sparql11Parser.T__108:
        case Sparql11Parser.T__109:
        case Sparql11Parser.T__110:
            this.enterOuterAlt(localctx, 1);
            this.state = 436;
            this.builtInCall();
            break;
        case Sparql11Parser.IRI_REF:
        case Sparql11Parser.PNAME_NS:
        case Sparql11Parser.PNAME_LN:
            this.enterOuterAlt(localctx, 2);
            this.state = 437;
            this.functionCall();
            break;
        case Sparql11Parser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 3);
            this.state = 438;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 439;
            this.expression();
            this.state = 442;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Sparql11Parser.T__5) {
                this.state = 440;
                this.match(Sparql11Parser.T__5);
                this.state = 441;
                this.var();
            }

            this.state = 444;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.QUESTION:
        case Sparql11Parser.DOLLAR:
            this.enterOuterAlt(localctx, 4);
            this.state = 446;
            this.var();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HavingClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_havingClause;
    return this;
}

HavingClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HavingClauseContext.prototype.constructor = HavingClauseContext;

HavingClauseContext.prototype.havingCondition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HavingConditionContext);
    } else {
        return this.getTypedRuleContext(HavingConditionContext,i);
    }
};

HavingClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterHavingClause(this);
	}
};

HavingClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitHavingClause(this);
	}
};




Sparql11Parser.HavingClauseContext = HavingClauseContext;

Sparql11Parser.prototype.havingClause = function() {

    var localctx = new HavingClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, Sparql11Parser.RULE_havingClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 449;
        this.match(Sparql11Parser.T__14);
        this.state = 451; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 450;
        		this.havingCondition();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 453; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,26, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HavingConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_havingCondition;
    return this;
}

HavingConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HavingConditionContext.prototype.constructor = HavingConditionContext;

HavingConditionContext.prototype.constraint = function() {
    return this.getTypedRuleContext(ConstraintContext,0);
};

HavingConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterHavingCondition(this);
	}
};

HavingConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitHavingCondition(this);
	}
};




Sparql11Parser.HavingConditionContext = HavingConditionContext;

Sparql11Parser.prototype.havingCondition = function() {

    var localctx = new HavingConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, Sparql11Parser.RULE_havingCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 455;
        this.constraint();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OrderClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_orderClause;
    return this;
}

OrderClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderClauseContext.prototype.constructor = OrderClauseContext;

OrderClauseContext.prototype.orderCondition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OrderConditionContext);
    } else {
        return this.getTypedRuleContext(OrderConditionContext,i);
    }
};

OrderClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterOrderClause(this);
	}
};

OrderClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitOrderClause(this);
	}
};




Sparql11Parser.OrderClauseContext = OrderClauseContext;

Sparql11Parser.prototype.orderClause = function() {

    var localctx = new OrderClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, Sparql11Parser.RULE_orderClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 457;
        this.match(Sparql11Parser.T__15);
        this.state = 458;
        this.match(Sparql11Parser.T__13);
        this.state = 460; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 459;
        		this.orderCondition();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 462; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,27, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OrderConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_orderCondition;
    return this;
}

OrderConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderConditionContext.prototype.constructor = OrderConditionContext;

OrderConditionContext.prototype.brackettedExpression = function() {
    return this.getTypedRuleContext(BrackettedExpressionContext,0);
};

OrderConditionContext.prototype.constraint = function() {
    return this.getTypedRuleContext(ConstraintContext,0);
};

OrderConditionContext.prototype.var = function() {
    return this.getTypedRuleContext(VarContext,0);
};

OrderConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterOrderCondition(this);
	}
};

OrderConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitOrderCondition(this);
	}
};




Sparql11Parser.OrderConditionContext = OrderConditionContext;

Sparql11Parser.prototype.orderCondition = function() {

    var localctx = new OrderConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, Sparql11Parser.RULE_orderCondition);
    var _la = 0; // Token type
    try {
        this.state = 470;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.T__16:
        case Sparql11Parser.T__17:
            this.enterOuterAlt(localctx, 1);
            this.state = 464;
            _la = this._input.LA(1);
            if(!(_la===Sparql11Parser.T__16 || _la===Sparql11Parser.T__17)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 465;
            this.brackettedExpression();
            break;
        case Sparql11Parser.T__50:
        case Sparql11Parser.T__51:
        case Sparql11Parser.T__52:
        case Sparql11Parser.T__53:
        case Sparql11Parser.T__54:
        case Sparql11Parser.T__55:
        case Sparql11Parser.T__56:
        case Sparql11Parser.T__57:
        case Sparql11Parser.T__58:
        case Sparql11Parser.T__59:
        case Sparql11Parser.T__60:
        case Sparql11Parser.T__61:
        case Sparql11Parser.T__62:
        case Sparql11Parser.T__63:
        case Sparql11Parser.T__64:
        case Sparql11Parser.T__65:
        case Sparql11Parser.T__66:
        case Sparql11Parser.T__67:
        case Sparql11Parser.T__68:
        case Sparql11Parser.T__69:
        case Sparql11Parser.T__70:
        case Sparql11Parser.T__71:
        case Sparql11Parser.T__72:
        case Sparql11Parser.T__73:
        case Sparql11Parser.T__74:
        case Sparql11Parser.T__75:
        case Sparql11Parser.T__76:
        case Sparql11Parser.T__77:
        case Sparql11Parser.T__78:
        case Sparql11Parser.T__79:
        case Sparql11Parser.T__80:
        case Sparql11Parser.T__81:
        case Sparql11Parser.T__82:
        case Sparql11Parser.T__83:
        case Sparql11Parser.T__84:
        case Sparql11Parser.T__85:
        case Sparql11Parser.T__86:
        case Sparql11Parser.T__87:
        case Sparql11Parser.T__88:
        case Sparql11Parser.T__89:
        case Sparql11Parser.T__90:
        case Sparql11Parser.T__91:
        case Sparql11Parser.T__92:
        case Sparql11Parser.T__93:
        case Sparql11Parser.T__94:
        case Sparql11Parser.T__95:
        case Sparql11Parser.T__96:
        case Sparql11Parser.T__97:
        case Sparql11Parser.T__98:
        case Sparql11Parser.T__99:
        case Sparql11Parser.T__100:
        case Sparql11Parser.T__101:
        case Sparql11Parser.T__102:
        case Sparql11Parser.T__103:
        case Sparql11Parser.T__104:
        case Sparql11Parser.T__105:
        case Sparql11Parser.T__106:
        case Sparql11Parser.T__107:
        case Sparql11Parser.T__108:
        case Sparql11Parser.T__109:
        case Sparql11Parser.T__110:
        case Sparql11Parser.IRI_REF:
        case Sparql11Parser.PNAME_NS:
        case Sparql11Parser.PNAME_LN:
        case Sparql11Parser.OPEN_BRACE:
        case Sparql11Parser.QUESTION:
        case Sparql11Parser.DOLLAR:
            this.enterOuterAlt(localctx, 2);
            this.state = 468;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case Sparql11Parser.T__50:
            case Sparql11Parser.T__51:
            case Sparql11Parser.T__52:
            case Sparql11Parser.T__53:
            case Sparql11Parser.T__54:
            case Sparql11Parser.T__55:
            case Sparql11Parser.T__56:
            case Sparql11Parser.T__57:
            case Sparql11Parser.T__58:
            case Sparql11Parser.T__59:
            case Sparql11Parser.T__60:
            case Sparql11Parser.T__61:
            case Sparql11Parser.T__62:
            case Sparql11Parser.T__63:
            case Sparql11Parser.T__64:
            case Sparql11Parser.T__65:
            case Sparql11Parser.T__66:
            case Sparql11Parser.T__67:
            case Sparql11Parser.T__68:
            case Sparql11Parser.T__69:
            case Sparql11Parser.T__70:
            case Sparql11Parser.T__71:
            case Sparql11Parser.T__72:
            case Sparql11Parser.T__73:
            case Sparql11Parser.T__74:
            case Sparql11Parser.T__75:
            case Sparql11Parser.T__76:
            case Sparql11Parser.T__77:
            case Sparql11Parser.T__78:
            case Sparql11Parser.T__79:
            case Sparql11Parser.T__80:
            case Sparql11Parser.T__81:
            case Sparql11Parser.T__82:
            case Sparql11Parser.T__83:
            case Sparql11Parser.T__84:
            case Sparql11Parser.T__85:
            case Sparql11Parser.T__86:
            case Sparql11Parser.T__87:
            case Sparql11Parser.T__88:
            case Sparql11Parser.T__89:
            case Sparql11Parser.T__90:
            case Sparql11Parser.T__91:
            case Sparql11Parser.T__92:
            case Sparql11Parser.T__93:
            case Sparql11Parser.T__94:
            case Sparql11Parser.T__95:
            case Sparql11Parser.T__96:
            case Sparql11Parser.T__97:
            case Sparql11Parser.T__98:
            case Sparql11Parser.T__99:
            case Sparql11Parser.T__100:
            case Sparql11Parser.T__101:
            case Sparql11Parser.T__102:
            case Sparql11Parser.T__103:
            case Sparql11Parser.T__104:
            case Sparql11Parser.T__105:
            case Sparql11Parser.T__106:
            case Sparql11Parser.T__107:
            case Sparql11Parser.T__108:
            case Sparql11Parser.T__109:
            case Sparql11Parser.T__110:
            case Sparql11Parser.IRI_REF:
            case Sparql11Parser.PNAME_NS:
            case Sparql11Parser.PNAME_LN:
            case Sparql11Parser.OPEN_BRACE:
                this.state = 466;
                this.constraint();
                break;
            case Sparql11Parser.QUESTION:
            case Sparql11Parser.DOLLAR:
                this.state = 467;
                this.var();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LimitOffsetClausesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_limitOffsetClauses;
    return this;
}

LimitOffsetClausesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LimitOffsetClausesContext.prototype.constructor = LimitOffsetClausesContext;

LimitOffsetClausesContext.prototype.limitClause = function() {
    return this.getTypedRuleContext(LimitClauseContext,0);
};

LimitOffsetClausesContext.prototype.offsetClause = function() {
    return this.getTypedRuleContext(OffsetClauseContext,0);
};

LimitOffsetClausesContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterLimitOffsetClauses(this);
	}
};

LimitOffsetClausesContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitLimitOffsetClauses(this);
	}
};




Sparql11Parser.LimitOffsetClausesContext = LimitOffsetClausesContext;

Sparql11Parser.prototype.limitOffsetClauses = function() {

    var localctx = new LimitOffsetClausesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, Sparql11Parser.RULE_limitOffsetClauses);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 480;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.T__18:
            this.state = 472;
            this.limitClause();
            this.state = 474;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Sparql11Parser.T__19) {
                this.state = 473;
                this.offsetClause();
            }

            break;
        case Sparql11Parser.T__19:
            this.state = 476;
            this.offsetClause();
            this.state = 478;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Sparql11Parser.T__18) {
                this.state = 477;
                this.limitClause();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LimitClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_limitClause;
    return this;
}

LimitClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LimitClauseContext.prototype.constructor = LimitClauseContext;

LimitClauseContext.prototype.INTEGER = function() {
    return this.getToken(Sparql11Parser.INTEGER, 0);
};

LimitClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterLimitClause(this);
	}
};

LimitClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitLimitClause(this);
	}
};




Sparql11Parser.LimitClauseContext = LimitClauseContext;

Sparql11Parser.prototype.limitClause = function() {

    var localctx = new LimitClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, Sparql11Parser.RULE_limitClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 482;
        this.match(Sparql11Parser.T__18);
        this.state = 483;
        this.match(Sparql11Parser.INTEGER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OffsetClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_offsetClause;
    return this;
}

OffsetClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OffsetClauseContext.prototype.constructor = OffsetClauseContext;

OffsetClauseContext.prototype.INTEGER = function() {
    return this.getToken(Sparql11Parser.INTEGER, 0);
};

OffsetClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterOffsetClause(this);
	}
};

OffsetClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitOffsetClause(this);
	}
};




Sparql11Parser.OffsetClauseContext = OffsetClauseContext;

Sparql11Parser.prototype.offsetClause = function() {

    var localctx = new OffsetClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, Sparql11Parser.RULE_offsetClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 485;
        this.match(Sparql11Parser.T__19);
        this.state = 486;
        this.match(Sparql11Parser.INTEGER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ValuesClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_valuesClause;
    return this;
}

ValuesClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValuesClauseContext.prototype.constructor = ValuesClauseContext;

ValuesClauseContext.prototype.dataBlock = function() {
    return this.getTypedRuleContext(DataBlockContext,0);
};

ValuesClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterValuesClause(this);
	}
};

ValuesClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitValuesClause(this);
	}
};




Sparql11Parser.ValuesClauseContext = ValuesClauseContext;

Sparql11Parser.prototype.valuesClause = function() {

    var localctx = new ValuesClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, Sparql11Parser.RULE_valuesClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 490;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
        if(la_===1) {
            this.state = 488;
            this.match(Sparql11Parser.T__20);
            this.state = 489;
            this.dataBlock();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UpdateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_update;
    return this;
}

UpdateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UpdateContext.prototype.constructor = UpdateContext;

UpdateContext.prototype.prologue = function() {
    return this.getTypedRuleContext(PrologueContext,0);
};

UpdateContext.prototype.update1 = function() {
    return this.getTypedRuleContext(Update1Context,0);
};

UpdateContext.prototype.SEMICOLON = function() {
    return this.getToken(Sparql11Parser.SEMICOLON, 0);
};

UpdateContext.prototype.update = function() {
    return this.getTypedRuleContext(UpdateContext,0);
};

UpdateContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterUpdate(this);
	}
};

UpdateContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitUpdate(this);
	}
};




Sparql11Parser.UpdateContext = UpdateContext;

Sparql11Parser.prototype.update = function() {

    var localctx = new UpdateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, Sparql11Parser.RULE_update);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 492;
        this.prologue();
        this.state = 498;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 22)) & ~0x1f) == 0 && ((1 << (_la - 22)) & ((1 << (Sparql11Parser.T__21 - 22)) | (1 << (Sparql11Parser.T__24 - 22)) | (1 << (Sparql11Parser.T__25 - 22)) | (1 << (Sparql11Parser.T__26 - 22)) | (1 << (Sparql11Parser.T__27 - 22)) | (1 << (Sparql11Parser.T__29 - 22)) | (1 << (Sparql11Parser.T__30 - 22)) | (1 << (Sparql11Parser.T__31 - 22)) | (1 << (Sparql11Parser.T__32 - 22)) | (1 << (Sparql11Parser.T__33 - 22)) | (1 << (Sparql11Parser.T__34 - 22)) | (1 << (Sparql11Parser.T__35 - 22)) | (1 << (Sparql11Parser.T__36 - 22)))) !== 0)) {
            this.state = 493;
            this.update1();
            this.state = 496;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Sparql11Parser.SEMICOLON) {
                this.state = 494;
                this.match(Sparql11Parser.SEMICOLON);
                this.state = 495;
                this.update();
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Update1Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_update1;
    return this;
}

Update1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Update1Context.prototype.constructor = Update1Context;

Update1Context.prototype.load = function() {
    return this.getTypedRuleContext(LoadContext,0);
};

Update1Context.prototype.clear = function() {
    return this.getTypedRuleContext(ClearContext,0);
};

Update1Context.prototype.drop = function() {
    return this.getTypedRuleContext(DropContext,0);
};

Update1Context.prototype.add = function() {
    return this.getTypedRuleContext(AddContext,0);
};

Update1Context.prototype.move = function() {
    return this.getTypedRuleContext(MoveContext,0);
};

Update1Context.prototype.copy = function() {
    return this.getTypedRuleContext(CopyContext,0);
};

Update1Context.prototype.create = function() {
    return this.getTypedRuleContext(CreateContext,0);
};

Update1Context.prototype.insertData = function() {
    return this.getTypedRuleContext(InsertDataContext,0);
};

Update1Context.prototype.deleteData = function() {
    return this.getTypedRuleContext(DeleteDataContext,0);
};

Update1Context.prototype.deleteWhere = function() {
    return this.getTypedRuleContext(DeleteWhereContext,0);
};

Update1Context.prototype.modify = function() {
    return this.getTypedRuleContext(ModifyContext,0);
};

Update1Context.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterUpdate1(this);
	}
};

Update1Context.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitUpdate1(this);
	}
};




Sparql11Parser.Update1Context = Update1Context;

Sparql11Parser.prototype.update1 = function() {

    var localctx = new Update1Context(this, this._ctx, this.state);
    this.enterRule(localctx, 58, Sparql11Parser.RULE_update1);
    try {
        this.state = 511;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.T__21:
            this.enterOuterAlt(localctx, 1);
            this.state = 500;
            this.load();
            break;
        case Sparql11Parser.T__24:
            this.enterOuterAlt(localctx, 2);
            this.state = 501;
            this.clear();
            break;
        case Sparql11Parser.T__25:
            this.enterOuterAlt(localctx, 3);
            this.state = 502;
            this.drop();
            break;
        case Sparql11Parser.T__27:
            this.enterOuterAlt(localctx, 4);
            this.state = 503;
            this.add();
            break;
        case Sparql11Parser.T__29:
            this.enterOuterAlt(localctx, 5);
            this.state = 504;
            this.move();
            break;
        case Sparql11Parser.T__30:
            this.enterOuterAlt(localctx, 6);
            this.state = 505;
            this.copy();
            break;
        case Sparql11Parser.T__26:
            this.enterOuterAlt(localctx, 7);
            this.state = 506;
            this.create();
            break;
        case Sparql11Parser.T__31:
            this.enterOuterAlt(localctx, 8);
            this.state = 507;
            this.insertData();
            break;
        case Sparql11Parser.T__32:
            this.enterOuterAlt(localctx, 9);
            this.state = 508;
            this.deleteData();
            break;
        case Sparql11Parser.T__33:
            this.enterOuterAlt(localctx, 10);
            this.state = 509;
            this.deleteWhere();
            break;
        case Sparql11Parser.T__34:
        case Sparql11Parser.T__35:
        case Sparql11Parser.T__36:
            this.enterOuterAlt(localctx, 11);
            this.state = 510;
            this.modify();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LoadContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_load;
    return this;
}

LoadContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LoadContext.prototype.constructor = LoadContext;

LoadContext.prototype.iriRef = function() {
    return this.getTypedRuleContext(IriRefContext,0);
};

LoadContext.prototype.graphRef = function() {
    return this.getTypedRuleContext(GraphRefContext,0);
};

LoadContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterLoad(this);
	}
};

LoadContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitLoad(this);
	}
};




Sparql11Parser.LoadContext = LoadContext;

Sparql11Parser.prototype.load = function() {

    var localctx = new LoadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, Sparql11Parser.RULE_load);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 513;
        this.match(Sparql11Parser.T__21);
        this.state = 515;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Sparql11Parser.T__22) {
            this.state = 514;
            this.match(Sparql11Parser.T__22);
        }

        this.state = 517;
        this.iriRef();
        this.state = 520;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Sparql11Parser.T__23) {
            this.state = 518;
            this.match(Sparql11Parser.T__23);
            this.state = 519;
            this.graphRef();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClearContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_clear;
    return this;
}

ClearContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClearContext.prototype.constructor = ClearContext;

ClearContext.prototype.graphRefAll = function() {
    return this.getTypedRuleContext(GraphRefAllContext,0);
};

ClearContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterClear(this);
	}
};

ClearContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitClear(this);
	}
};




Sparql11Parser.ClearContext = ClearContext;

Sparql11Parser.prototype.clear = function() {

    var localctx = new ClearContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, Sparql11Parser.RULE_clear);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 522;
        this.match(Sparql11Parser.T__24);
        this.state = 524;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Sparql11Parser.T__22) {
            this.state = 523;
            this.match(Sparql11Parser.T__22);
        }

        this.state = 526;
        this.graphRefAll();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DropContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_drop;
    return this;
}

DropContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropContext.prototype.constructor = DropContext;

DropContext.prototype.graphRefAll = function() {
    return this.getTypedRuleContext(GraphRefAllContext,0);
};

DropContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterDrop(this);
	}
};

DropContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitDrop(this);
	}
};




Sparql11Parser.DropContext = DropContext;

Sparql11Parser.prototype.drop = function() {

    var localctx = new DropContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, Sparql11Parser.RULE_drop);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 528;
        this.match(Sparql11Parser.T__25);
        this.state = 530;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Sparql11Parser.T__22) {
            this.state = 529;
            this.match(Sparql11Parser.T__22);
        }

        this.state = 532;
        this.graphRefAll();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_create;
    return this;
}

CreateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateContext.prototype.constructor = CreateContext;

CreateContext.prototype.graphRef = function() {
    return this.getTypedRuleContext(GraphRefContext,0);
};

CreateContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterCreate(this);
	}
};

CreateContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitCreate(this);
	}
};




Sparql11Parser.CreateContext = CreateContext;

Sparql11Parser.prototype.create = function() {

    var localctx = new CreateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, Sparql11Parser.RULE_create);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 534;
        this.match(Sparql11Parser.T__26);
        this.state = 536;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Sparql11Parser.T__22) {
            this.state = 535;
            this.match(Sparql11Parser.T__22);
        }

        this.state = 538;
        this.graphRef();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AddContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_add;
    return this;
}

AddContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AddContext.prototype.constructor = AddContext;

AddContext.prototype.graphOrDefault = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GraphOrDefaultContext);
    } else {
        return this.getTypedRuleContext(GraphOrDefaultContext,i);
    }
};

AddContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterAdd(this);
	}
};

AddContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitAdd(this);
	}
};




Sparql11Parser.AddContext = AddContext;

Sparql11Parser.prototype.add = function() {

    var localctx = new AddContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, Sparql11Parser.RULE_add);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 540;
        this.match(Sparql11Parser.T__27);
        this.state = 542;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Sparql11Parser.T__22) {
            this.state = 541;
            this.match(Sparql11Parser.T__22);
        }

        this.state = 544;
        this.graphOrDefault();
        this.state = 545;
        this.match(Sparql11Parser.T__28);
        this.state = 546;
        this.graphOrDefault();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MoveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_move;
    return this;
}

MoveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MoveContext.prototype.constructor = MoveContext;

MoveContext.prototype.graphOrDefault = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GraphOrDefaultContext);
    } else {
        return this.getTypedRuleContext(GraphOrDefaultContext,i);
    }
};

MoveContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterMove(this);
	}
};

MoveContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitMove(this);
	}
};




Sparql11Parser.MoveContext = MoveContext;

Sparql11Parser.prototype.move = function() {

    var localctx = new MoveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, Sparql11Parser.RULE_move);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 548;
        this.match(Sparql11Parser.T__29);
        this.state = 550;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Sparql11Parser.T__22) {
            this.state = 549;
            this.match(Sparql11Parser.T__22);
        }

        this.state = 552;
        this.graphOrDefault();
        this.state = 553;
        this.match(Sparql11Parser.T__28);
        this.state = 554;
        this.graphOrDefault();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CopyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_copy;
    return this;
}

CopyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CopyContext.prototype.constructor = CopyContext;

CopyContext.prototype.graphOrDefault = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GraphOrDefaultContext);
    } else {
        return this.getTypedRuleContext(GraphOrDefaultContext,i);
    }
};

CopyContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterCopy(this);
	}
};

CopyContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitCopy(this);
	}
};




Sparql11Parser.CopyContext = CopyContext;

Sparql11Parser.prototype.copy = function() {

    var localctx = new CopyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, Sparql11Parser.RULE_copy);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 556;
        this.match(Sparql11Parser.T__30);
        this.state = 558;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Sparql11Parser.T__22) {
            this.state = 557;
            this.match(Sparql11Parser.T__22);
        }

        this.state = 560;
        this.graphOrDefault();
        this.state = 561;
        this.match(Sparql11Parser.T__28);
        this.state = 562;
        this.graphOrDefault();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InsertDataContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_insertData;
    return this;
}

InsertDataContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InsertDataContext.prototype.constructor = InsertDataContext;

InsertDataContext.prototype.quadData = function() {
    return this.getTypedRuleContext(QuadDataContext,0);
};

InsertDataContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterInsertData(this);
	}
};

InsertDataContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitInsertData(this);
	}
};




Sparql11Parser.InsertDataContext = InsertDataContext;

Sparql11Parser.prototype.insertData = function() {

    var localctx = new InsertDataContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, Sparql11Parser.RULE_insertData);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 564;
        this.match(Sparql11Parser.T__31);
        this.state = 565;
        this.quadData();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeleteDataContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_deleteData;
    return this;
}

DeleteDataContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeleteDataContext.prototype.constructor = DeleteDataContext;

DeleteDataContext.prototype.quadData = function() {
    return this.getTypedRuleContext(QuadDataContext,0);
};

DeleteDataContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterDeleteData(this);
	}
};

DeleteDataContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitDeleteData(this);
	}
};




Sparql11Parser.DeleteDataContext = DeleteDataContext;

Sparql11Parser.prototype.deleteData = function() {

    var localctx = new DeleteDataContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, Sparql11Parser.RULE_deleteData);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 567;
        this.match(Sparql11Parser.T__32);
        this.state = 568;
        this.quadData();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeleteWhereContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_deleteWhere;
    return this;
}

DeleteWhereContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeleteWhereContext.prototype.constructor = DeleteWhereContext;

DeleteWhereContext.prototype.quadPattern = function() {
    return this.getTypedRuleContext(QuadPatternContext,0);
};

DeleteWhereContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterDeleteWhere(this);
	}
};

DeleteWhereContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitDeleteWhere(this);
	}
};




Sparql11Parser.DeleteWhereContext = DeleteWhereContext;

Sparql11Parser.prototype.deleteWhere = function() {

    var localctx = new DeleteWhereContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, Sparql11Parser.RULE_deleteWhere);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 570;
        this.match(Sparql11Parser.T__33);
        this.state = 571;
        this.quadPattern();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModifyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_modify;
    return this;
}

ModifyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModifyContext.prototype.constructor = ModifyContext;

ModifyContext.prototype.groupGraphPattern = function() {
    return this.getTypedRuleContext(GroupGraphPatternContext,0);
};

ModifyContext.prototype.deleteClause = function() {
    return this.getTypedRuleContext(DeleteClauseContext,0);
};

ModifyContext.prototype.insertClause = function() {
    return this.getTypedRuleContext(InsertClauseContext,0);
};

ModifyContext.prototype.iriRef = function() {
    return this.getTypedRuleContext(IriRefContext,0);
};

ModifyContext.prototype.usingClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UsingClauseContext);
    } else {
        return this.getTypedRuleContext(UsingClauseContext,i);
    }
};

ModifyContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterModify(this);
	}
};

ModifyContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitModify(this);
	}
};




Sparql11Parser.ModifyContext = ModifyContext;

Sparql11Parser.prototype.modify = function() {

    var localctx = new ModifyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, Sparql11Parser.RULE_modify);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 575;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Sparql11Parser.T__34) {
            this.state = 573;
            this.match(Sparql11Parser.T__34);
            this.state = 574;
            this.iriRef();
        }

        this.state = 582;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.T__35:
            this.state = 577;
            this.deleteClause();
            this.state = 579;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Sparql11Parser.T__36) {
                this.state = 578;
                this.insertClause();
            }

            break;
        case Sparql11Parser.T__36:
            this.state = 581;
            this.insertClause();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 587;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Sparql11Parser.T__37) {
            this.state = 584;
            this.usingClause();
            this.state = 589;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 590;
        this.match(Sparql11Parser.T__7);
        this.state = 591;
        this.groupGraphPattern();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeleteClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_deleteClause;
    return this;
}

DeleteClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeleteClauseContext.prototype.constructor = DeleteClauseContext;

DeleteClauseContext.prototype.quadPattern = function() {
    return this.getTypedRuleContext(QuadPatternContext,0);
};

DeleteClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterDeleteClause(this);
	}
};

DeleteClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitDeleteClause(this);
	}
};




Sparql11Parser.DeleteClauseContext = DeleteClauseContext;

Sparql11Parser.prototype.deleteClause = function() {

    var localctx = new DeleteClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, Sparql11Parser.RULE_deleteClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 593;
        this.match(Sparql11Parser.T__35);
        this.state = 594;
        this.quadPattern();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InsertClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_insertClause;
    return this;
}

InsertClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InsertClauseContext.prototype.constructor = InsertClauseContext;

InsertClauseContext.prototype.quadPattern = function() {
    return this.getTypedRuleContext(QuadPatternContext,0);
};

InsertClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterInsertClause(this);
	}
};

InsertClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitInsertClause(this);
	}
};




Sparql11Parser.InsertClauseContext = InsertClauseContext;

Sparql11Parser.prototype.insertClause = function() {

    var localctx = new InsertClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, Sparql11Parser.RULE_insertClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 596;
        this.match(Sparql11Parser.T__36);
        this.state = 597;
        this.quadPattern();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UsingClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_usingClause;
    return this;
}

UsingClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UsingClauseContext.prototype.constructor = UsingClauseContext;

UsingClauseContext.prototype.iriRef = function() {
    return this.getTypedRuleContext(IriRefContext,0);
};

UsingClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterUsingClause(this);
	}
};

UsingClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitUsingClause(this);
	}
};




Sparql11Parser.UsingClauseContext = UsingClauseContext;

Sparql11Parser.prototype.usingClause = function() {

    var localctx = new UsingClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, Sparql11Parser.RULE_usingClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 599;
        this.match(Sparql11Parser.T__37);
        this.state = 603;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.IRI_REF:
        case Sparql11Parser.PNAME_NS:
        case Sparql11Parser.PNAME_LN:
            this.state = 600;
            this.iriRef();
            break;
        case Sparql11Parser.T__11:
            this.state = 601;
            this.match(Sparql11Parser.T__11);
            this.state = 602;
            this.iriRef();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GraphOrDefaultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_graphOrDefault;
    return this;
}

GraphOrDefaultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GraphOrDefaultContext.prototype.constructor = GraphOrDefaultContext;

GraphOrDefaultContext.prototype.iriRef = function() {
    return this.getTypedRuleContext(IriRefContext,0);
};

GraphOrDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterGraphOrDefault(this);
	}
};

GraphOrDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitGraphOrDefault(this);
	}
};




Sparql11Parser.GraphOrDefaultContext = GraphOrDefaultContext;

Sparql11Parser.prototype.graphOrDefault = function() {

    var localctx = new GraphOrDefaultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, Sparql11Parser.RULE_graphOrDefault);
    var _la = 0; // Token type
    try {
        this.state = 610;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.T__38:
            this.enterOuterAlt(localctx, 1);
            this.state = 605;
            this.match(Sparql11Parser.T__38);
            break;
        case Sparql11Parser.T__39:
        case Sparql11Parser.IRI_REF:
        case Sparql11Parser.PNAME_NS:
        case Sparql11Parser.PNAME_LN:
            this.enterOuterAlt(localctx, 2);
            this.state = 607;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Sparql11Parser.T__39) {
                this.state = 606;
                this.match(Sparql11Parser.T__39);
            }

            this.state = 609;
            this.iriRef();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GraphRefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_graphRef;
    return this;
}

GraphRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GraphRefContext.prototype.constructor = GraphRefContext;

GraphRefContext.prototype.iriRef = function() {
    return this.getTypedRuleContext(IriRefContext,0);
};

GraphRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterGraphRef(this);
	}
};

GraphRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitGraphRef(this);
	}
};




Sparql11Parser.GraphRefContext = GraphRefContext;

Sparql11Parser.prototype.graphRef = function() {

    var localctx = new GraphRefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, Sparql11Parser.RULE_graphRef);
    try {
        this.state = 614;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.T__39:
            this.enterOuterAlt(localctx, 1);
            this.state = 612;
            this.match(Sparql11Parser.T__39);
            break;
        case Sparql11Parser.IRI_REF:
        case Sparql11Parser.PNAME_NS:
        case Sparql11Parser.PNAME_LN:
            this.enterOuterAlt(localctx, 2);
            this.state = 613;
            this.iriRef();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GraphRefAllContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_graphRefAll;
    return this;
}

GraphRefAllContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GraphRefAllContext.prototype.constructor = GraphRefAllContext;

GraphRefAllContext.prototype.graphRef = function() {
    return this.getTypedRuleContext(GraphRefContext,0);
};

GraphRefAllContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterGraphRefAll(this);
	}
};

GraphRefAllContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitGraphRefAll(this);
	}
};




Sparql11Parser.GraphRefAllContext = GraphRefAllContext;

Sparql11Parser.prototype.graphRefAll = function() {

    var localctx = new GraphRefAllContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, Sparql11Parser.RULE_graphRefAll);
    try {
        this.state = 620;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.T__39:
        case Sparql11Parser.IRI_REF:
        case Sparql11Parser.PNAME_NS:
        case Sparql11Parser.PNAME_LN:
            this.enterOuterAlt(localctx, 1);
            this.state = 616;
            this.graphRef();
            break;
        case Sparql11Parser.T__38:
            this.enterOuterAlt(localctx, 2);
            this.state = 617;
            this.match(Sparql11Parser.T__38);
            break;
        case Sparql11Parser.T__11:
            this.enterOuterAlt(localctx, 3);
            this.state = 618;
            this.match(Sparql11Parser.T__11);
            break;
        case Sparql11Parser.T__40:
            this.enterOuterAlt(localctx, 4);
            this.state = 619;
            this.match(Sparql11Parser.T__40);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QuadPatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_quadPattern;
    return this;
}

QuadPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuadPatternContext.prototype.constructor = QuadPatternContext;

QuadPatternContext.prototype.OPEN_CURLY_BRACE = function() {
    return this.getToken(Sparql11Parser.OPEN_CURLY_BRACE, 0);
};

QuadPatternContext.prototype.quads = function() {
    return this.getTypedRuleContext(QuadsContext,0);
};

QuadPatternContext.prototype.CLOSE_CURLY_BRACE = function() {
    return this.getToken(Sparql11Parser.CLOSE_CURLY_BRACE, 0);
};

QuadPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterQuadPattern(this);
	}
};

QuadPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitQuadPattern(this);
	}
};




Sparql11Parser.QuadPatternContext = QuadPatternContext;

Sparql11Parser.prototype.quadPattern = function() {

    var localctx = new QuadPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, Sparql11Parser.RULE_quadPattern);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 622;
        this.match(Sparql11Parser.OPEN_CURLY_BRACE);
        this.state = 623;
        this.quads();
        this.state = 624;
        this.match(Sparql11Parser.CLOSE_CURLY_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QuadDataContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_quadData;
    return this;
}

QuadDataContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuadDataContext.prototype.constructor = QuadDataContext;

QuadDataContext.prototype.OPEN_CURLY_BRACE = function() {
    return this.getToken(Sparql11Parser.OPEN_CURLY_BRACE, 0);
};

QuadDataContext.prototype.quads = function() {
    return this.getTypedRuleContext(QuadsContext,0);
};

QuadDataContext.prototype.CLOSE_CURLY_BRACE = function() {
    return this.getToken(Sparql11Parser.CLOSE_CURLY_BRACE, 0);
};

QuadDataContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterQuadData(this);
	}
};

QuadDataContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitQuadData(this);
	}
};




Sparql11Parser.QuadDataContext = QuadDataContext;

Sparql11Parser.prototype.quadData = function() {

    var localctx = new QuadDataContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, Sparql11Parser.RULE_quadData);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 626;
        this.match(Sparql11Parser.OPEN_CURLY_BRACE);
        this.state = 627;
        this.quads();
        this.state = 628;
        this.match(Sparql11Parser.CLOSE_CURLY_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QuadsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_quads;
    return this;
}

QuadsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuadsContext.prototype.constructor = QuadsContext;

QuadsContext.prototype.triplesTemplate = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TriplesTemplateContext);
    } else {
        return this.getTypedRuleContext(TriplesTemplateContext,i);
    }
};

QuadsContext.prototype.quadsNotTriples = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QuadsNotTriplesContext);
    } else {
        return this.getTypedRuleContext(QuadsNotTriplesContext,i);
    }
};

QuadsContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Sparql11Parser.DOT);
    } else {
        return this.getToken(Sparql11Parser.DOT, i);
    }
};


QuadsContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterQuads(this);
	}
};

QuadsContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitQuads(this);
	}
};




Sparql11Parser.QuadsContext = QuadsContext;

Sparql11Parser.prototype.quads = function() {

    var localctx = new QuadsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, Sparql11Parser.RULE_quads);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 631;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (Sparql11Parser.T__112 - 113)) | (1 << (Sparql11Parser.T__113 - 113)) | (1 << (Sparql11Parser.IRI_REF - 113)) | (1 << (Sparql11Parser.PNAME_NS - 113)) | (1 << (Sparql11Parser.PNAME_LN - 113)) | (1 << (Sparql11Parser.BLANK_NODE_LABEL - 113)) | (1 << (Sparql11Parser.INTEGER - 113)) | (1 << (Sparql11Parser.DECIMAL - 113)) | (1 << (Sparql11Parser.DOUBLE - 113)) | (1 << (Sparql11Parser.INTEGER_POSITIVE - 113)) | (1 << (Sparql11Parser.DECIMAL_POSITIVE - 113)) | (1 << (Sparql11Parser.DOUBLE_POSITIVE - 113)) | (1 << (Sparql11Parser.INTEGER_NEGATIVE - 113)) | (1 << (Sparql11Parser.DECIMAL_NEGATIVE - 113)) | (1 << (Sparql11Parser.DOUBLE_NEGATIVE - 113)) | (1 << (Sparql11Parser.STRING_LITERAL1 - 113)) | (1 << (Sparql11Parser.STRING_LITERAL2 - 113)) | (1 << (Sparql11Parser.STRING_LITERAL_LONG1 - 113)) | (1 << (Sparql11Parser.STRING_LITERAL_LONG2 - 113)) | (1 << (Sparql11Parser.OPEN_BRACE - 113)))) !== 0) || ((((_la - 149)) & ~0x1f) == 0 && ((1 << (_la - 149)) & ((1 << (Sparql11Parser.QUESTION - 149)) | (1 << (Sparql11Parser.DOLLAR - 149)) | (1 << (Sparql11Parser.OPEN_SQUARE_BRACE - 149)))) !== 0)) {
            this.state = 630;
            this.triplesTemplate();
        }

        this.state = 642;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Sparql11Parser.T__39) {
            this.state = 633;
            this.quadsNotTriples();
            this.state = 635;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Sparql11Parser.DOT) {
                this.state = 634;
                this.match(Sparql11Parser.DOT);
            }

            this.state = 638;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (Sparql11Parser.T__112 - 113)) | (1 << (Sparql11Parser.T__113 - 113)) | (1 << (Sparql11Parser.IRI_REF - 113)) | (1 << (Sparql11Parser.PNAME_NS - 113)) | (1 << (Sparql11Parser.PNAME_LN - 113)) | (1 << (Sparql11Parser.BLANK_NODE_LABEL - 113)) | (1 << (Sparql11Parser.INTEGER - 113)) | (1 << (Sparql11Parser.DECIMAL - 113)) | (1 << (Sparql11Parser.DOUBLE - 113)) | (1 << (Sparql11Parser.INTEGER_POSITIVE - 113)) | (1 << (Sparql11Parser.DECIMAL_POSITIVE - 113)) | (1 << (Sparql11Parser.DOUBLE_POSITIVE - 113)) | (1 << (Sparql11Parser.INTEGER_NEGATIVE - 113)) | (1 << (Sparql11Parser.DECIMAL_NEGATIVE - 113)) | (1 << (Sparql11Parser.DOUBLE_NEGATIVE - 113)) | (1 << (Sparql11Parser.STRING_LITERAL1 - 113)) | (1 << (Sparql11Parser.STRING_LITERAL2 - 113)) | (1 << (Sparql11Parser.STRING_LITERAL_LONG1 - 113)) | (1 << (Sparql11Parser.STRING_LITERAL_LONG2 - 113)) | (1 << (Sparql11Parser.OPEN_BRACE - 113)))) !== 0) || ((((_la - 149)) & ~0x1f) == 0 && ((1 << (_la - 149)) & ((1 << (Sparql11Parser.QUESTION - 149)) | (1 << (Sparql11Parser.DOLLAR - 149)) | (1 << (Sparql11Parser.OPEN_SQUARE_BRACE - 149)))) !== 0)) {
                this.state = 637;
                this.triplesTemplate();
            }

            this.state = 644;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QuadsNotTriplesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_quadsNotTriples;
    return this;
}

QuadsNotTriplesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuadsNotTriplesContext.prototype.constructor = QuadsNotTriplesContext;

QuadsNotTriplesContext.prototype.varOrIriRef = function() {
    return this.getTypedRuleContext(VarOrIriRefContext,0);
};

QuadsNotTriplesContext.prototype.OPEN_CURLY_BRACE = function() {
    return this.getToken(Sparql11Parser.OPEN_CURLY_BRACE, 0);
};

QuadsNotTriplesContext.prototype.CLOSE_CURLY_BRACE = function() {
    return this.getToken(Sparql11Parser.CLOSE_CURLY_BRACE, 0);
};

QuadsNotTriplesContext.prototype.triplesTemplate = function() {
    return this.getTypedRuleContext(TriplesTemplateContext,0);
};

QuadsNotTriplesContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterQuadsNotTriples(this);
	}
};

QuadsNotTriplesContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitQuadsNotTriples(this);
	}
};




Sparql11Parser.QuadsNotTriplesContext = QuadsNotTriplesContext;

Sparql11Parser.prototype.quadsNotTriples = function() {

    var localctx = new QuadsNotTriplesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, Sparql11Parser.RULE_quadsNotTriples);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 645;
        this.match(Sparql11Parser.T__39);
        this.state = 646;
        this.varOrIriRef();
        this.state = 647;
        this.match(Sparql11Parser.OPEN_CURLY_BRACE);
        this.state = 649;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (Sparql11Parser.T__112 - 113)) | (1 << (Sparql11Parser.T__113 - 113)) | (1 << (Sparql11Parser.IRI_REF - 113)) | (1 << (Sparql11Parser.PNAME_NS - 113)) | (1 << (Sparql11Parser.PNAME_LN - 113)) | (1 << (Sparql11Parser.BLANK_NODE_LABEL - 113)) | (1 << (Sparql11Parser.INTEGER - 113)) | (1 << (Sparql11Parser.DECIMAL - 113)) | (1 << (Sparql11Parser.DOUBLE - 113)) | (1 << (Sparql11Parser.INTEGER_POSITIVE - 113)) | (1 << (Sparql11Parser.DECIMAL_POSITIVE - 113)) | (1 << (Sparql11Parser.DOUBLE_POSITIVE - 113)) | (1 << (Sparql11Parser.INTEGER_NEGATIVE - 113)) | (1 << (Sparql11Parser.DECIMAL_NEGATIVE - 113)) | (1 << (Sparql11Parser.DOUBLE_NEGATIVE - 113)) | (1 << (Sparql11Parser.STRING_LITERAL1 - 113)) | (1 << (Sparql11Parser.STRING_LITERAL2 - 113)) | (1 << (Sparql11Parser.STRING_LITERAL_LONG1 - 113)) | (1 << (Sparql11Parser.STRING_LITERAL_LONG2 - 113)) | (1 << (Sparql11Parser.OPEN_BRACE - 113)))) !== 0) || ((((_la - 149)) & ~0x1f) == 0 && ((1 << (_la - 149)) & ((1 << (Sparql11Parser.QUESTION - 149)) | (1 << (Sparql11Parser.DOLLAR - 149)) | (1 << (Sparql11Parser.OPEN_SQUARE_BRACE - 149)))) !== 0)) {
            this.state = 648;
            this.triplesTemplate();
        }

        this.state = 651;
        this.match(Sparql11Parser.CLOSE_CURLY_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TriplesTemplateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_triplesTemplate;
    return this;
}

TriplesTemplateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriplesTemplateContext.prototype.constructor = TriplesTemplateContext;

TriplesTemplateContext.prototype.triplesSameSubject = function() {
    return this.getTypedRuleContext(TriplesSameSubjectContext,0);
};

TriplesTemplateContext.prototype.DOT = function() {
    return this.getToken(Sparql11Parser.DOT, 0);
};

TriplesTemplateContext.prototype.triplesTemplate = function() {
    return this.getTypedRuleContext(TriplesTemplateContext,0);
};

TriplesTemplateContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterTriplesTemplate(this);
	}
};

TriplesTemplateContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitTriplesTemplate(this);
	}
};




Sparql11Parser.TriplesTemplateContext = TriplesTemplateContext;

Sparql11Parser.prototype.triplesTemplate = function() {

    var localctx = new TriplesTemplateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, Sparql11Parser.RULE_triplesTemplate);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 653;
        this.triplesSameSubject();
        this.state = 658;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Sparql11Parser.DOT) {
            this.state = 654;
            this.match(Sparql11Parser.DOT);
            this.state = 656;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (Sparql11Parser.T__112 - 113)) | (1 << (Sparql11Parser.T__113 - 113)) | (1 << (Sparql11Parser.IRI_REF - 113)) | (1 << (Sparql11Parser.PNAME_NS - 113)) | (1 << (Sparql11Parser.PNAME_LN - 113)) | (1 << (Sparql11Parser.BLANK_NODE_LABEL - 113)) | (1 << (Sparql11Parser.INTEGER - 113)) | (1 << (Sparql11Parser.DECIMAL - 113)) | (1 << (Sparql11Parser.DOUBLE - 113)) | (1 << (Sparql11Parser.INTEGER_POSITIVE - 113)) | (1 << (Sparql11Parser.DECIMAL_POSITIVE - 113)) | (1 << (Sparql11Parser.DOUBLE_POSITIVE - 113)) | (1 << (Sparql11Parser.INTEGER_NEGATIVE - 113)) | (1 << (Sparql11Parser.DECIMAL_NEGATIVE - 113)) | (1 << (Sparql11Parser.DOUBLE_NEGATIVE - 113)) | (1 << (Sparql11Parser.STRING_LITERAL1 - 113)) | (1 << (Sparql11Parser.STRING_LITERAL2 - 113)) | (1 << (Sparql11Parser.STRING_LITERAL_LONG1 - 113)) | (1 << (Sparql11Parser.STRING_LITERAL_LONG2 - 113)) | (1 << (Sparql11Parser.OPEN_BRACE - 113)))) !== 0) || ((((_la - 149)) & ~0x1f) == 0 && ((1 << (_la - 149)) & ((1 << (Sparql11Parser.QUESTION - 149)) | (1 << (Sparql11Parser.DOLLAR - 149)) | (1 << (Sparql11Parser.OPEN_SQUARE_BRACE - 149)))) !== 0)) {
                this.state = 655;
                this.triplesTemplate();
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GroupGraphPatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_groupGraphPattern;
    return this;
}

GroupGraphPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupGraphPatternContext.prototype.constructor = GroupGraphPatternContext;

GroupGraphPatternContext.prototype.OPEN_CURLY_BRACE = function() {
    return this.getToken(Sparql11Parser.OPEN_CURLY_BRACE, 0);
};

GroupGraphPatternContext.prototype.groupGraphPatternSub = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GroupGraphPatternSubContext);
    } else {
        return this.getTypedRuleContext(GroupGraphPatternSubContext,i);
    }
};

GroupGraphPatternContext.prototype.CLOSE_CURLY_BRACE = function() {
    return this.getToken(Sparql11Parser.CLOSE_CURLY_BRACE, 0);
};

GroupGraphPatternContext.prototype.subSelect = function() {
    return this.getTypedRuleContext(SubSelectContext,0);
};

GroupGraphPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterGroupGraphPattern(this);
	}
};

GroupGraphPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitGroupGraphPattern(this);
	}
};




Sparql11Parser.GroupGraphPatternContext = GroupGraphPatternContext;

Sparql11Parser.prototype.groupGraphPattern = function() {

    var localctx = new GroupGraphPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, Sparql11Parser.RULE_groupGraphPattern);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 660;
        this.match(Sparql11Parser.OPEN_CURLY_BRACE);
        this.state = 663;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.T__2:
            this.state = 661;
            this.subSelect();
            break;
        case Sparql11Parser.T__20:
        case Sparql11Parser.T__39:
        case Sparql11Parser.T__41:
        case Sparql11Parser.T__42:
        case Sparql11Parser.T__43:
        case Sparql11Parser.T__45:
        case Sparql11Parser.T__47:
        case Sparql11Parser.T__112:
        case Sparql11Parser.T__113:
        case Sparql11Parser.IRI_REF:
        case Sparql11Parser.PNAME_NS:
        case Sparql11Parser.PNAME_LN:
        case Sparql11Parser.BLANK_NODE_LABEL:
        case Sparql11Parser.INTEGER:
        case Sparql11Parser.DECIMAL:
        case Sparql11Parser.DOUBLE:
        case Sparql11Parser.INTEGER_POSITIVE:
        case Sparql11Parser.DECIMAL_POSITIVE:
        case Sparql11Parser.DOUBLE_POSITIVE:
        case Sparql11Parser.INTEGER_NEGATIVE:
        case Sparql11Parser.DECIMAL_NEGATIVE:
        case Sparql11Parser.DOUBLE_NEGATIVE:
        case Sparql11Parser.STRING_LITERAL1:
        case Sparql11Parser.STRING_LITERAL2:
        case Sparql11Parser.STRING_LITERAL_LONG1:
        case Sparql11Parser.STRING_LITERAL_LONG2:
        case Sparql11Parser.OPEN_BRACE:
        case Sparql11Parser.OPEN_CURLY_BRACE:
        case Sparql11Parser.CLOSE_CURLY_BRACE:
        case Sparql11Parser.QUESTION:
        case Sparql11Parser.DOLLAR:
        case Sparql11Parser.OPEN_SQUARE_BRACE:
            this.state = 662;
            this.groupGraphPatternSub();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 665;
        this.groupGraphPatternSub();
        this.state = 666;
        this.match(Sparql11Parser.CLOSE_CURLY_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GroupGraphPatternSubContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_groupGraphPatternSub;
    return this;
}

GroupGraphPatternSubContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupGraphPatternSubContext.prototype.constructor = GroupGraphPatternSubContext;

GroupGraphPatternSubContext.prototype.triplesBlock = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TriplesBlockContext);
    } else {
        return this.getTypedRuleContext(TriplesBlockContext,i);
    }
};

GroupGraphPatternSubContext.prototype.graphPatternNotTriples = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GraphPatternNotTriplesContext);
    } else {
        return this.getTypedRuleContext(GraphPatternNotTriplesContext,i);
    }
};

GroupGraphPatternSubContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Sparql11Parser.DOT);
    } else {
        return this.getToken(Sparql11Parser.DOT, i);
    }
};


GroupGraphPatternSubContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterGroupGraphPatternSub(this);
	}
};

GroupGraphPatternSubContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitGroupGraphPatternSub(this);
	}
};




Sparql11Parser.GroupGraphPatternSubContext = GroupGraphPatternSubContext;

Sparql11Parser.prototype.groupGraphPatternSub = function() {

    var localctx = new GroupGraphPatternSubContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, Sparql11Parser.RULE_groupGraphPatternSub);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 669;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
        if(la_===1) {
            this.state = 668;
            this.triplesBlock();

        }
        this.state = 680;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,65,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 671;
                this.graphPatternNotTriples();
                this.state = 673;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===Sparql11Parser.DOT) {
                    this.state = 672;
                    this.match(Sparql11Parser.DOT);
                }

                this.state = 676;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
                if(la_===1) {
                    this.state = 675;
                    this.triplesBlock();

                } 
            }
            this.state = 682;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,65,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TriplesBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_triplesBlock;
    return this;
}

TriplesBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriplesBlockContext.prototype.constructor = TriplesBlockContext;

TriplesBlockContext.prototype.triplesSameSubjectPath = function() {
    return this.getTypedRuleContext(TriplesSameSubjectPathContext,0);
};

TriplesBlockContext.prototype.DOT = function() {
    return this.getToken(Sparql11Parser.DOT, 0);
};

TriplesBlockContext.prototype.triplesBlock = function() {
    return this.getTypedRuleContext(TriplesBlockContext,0);
};

TriplesBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterTriplesBlock(this);
	}
};

TriplesBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitTriplesBlock(this);
	}
};




Sparql11Parser.TriplesBlockContext = TriplesBlockContext;

Sparql11Parser.prototype.triplesBlock = function() {

    var localctx = new TriplesBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, Sparql11Parser.RULE_triplesBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 683;
        this.triplesSameSubjectPath();
        this.state = 688;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Sparql11Parser.DOT) {
            this.state = 684;
            this.match(Sparql11Parser.DOT);
            this.state = 686;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
            if(la_===1) {
                this.state = 685;
                this.triplesBlock();

            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GraphPatternNotTriplesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_graphPatternNotTriples;
    return this;
}

GraphPatternNotTriplesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GraphPatternNotTriplesContext.prototype.constructor = GraphPatternNotTriplesContext;

GraphPatternNotTriplesContext.prototype.groupOrUnionGraphPattern = function() {
    return this.getTypedRuleContext(GroupOrUnionGraphPatternContext,0);
};

GraphPatternNotTriplesContext.prototype.optionalGraphPattern = function() {
    return this.getTypedRuleContext(OptionalGraphPatternContext,0);
};

GraphPatternNotTriplesContext.prototype.minusGraphPattern = function() {
    return this.getTypedRuleContext(MinusGraphPatternContext,0);
};

GraphPatternNotTriplesContext.prototype.graphGraphPattern = function() {
    return this.getTypedRuleContext(GraphGraphPatternContext,0);
};

GraphPatternNotTriplesContext.prototype.serviceGraphPattern = function() {
    return this.getTypedRuleContext(ServiceGraphPatternContext,0);
};

GraphPatternNotTriplesContext.prototype.filter = function() {
    return this.getTypedRuleContext(FilterContext,0);
};

GraphPatternNotTriplesContext.prototype.bind = function() {
    return this.getTypedRuleContext(BindContext,0);
};

GraphPatternNotTriplesContext.prototype.inlineData = function() {
    return this.getTypedRuleContext(InlineDataContext,0);
};

GraphPatternNotTriplesContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterGraphPatternNotTriples(this);
	}
};

GraphPatternNotTriplesContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitGraphPatternNotTriples(this);
	}
};




Sparql11Parser.GraphPatternNotTriplesContext = GraphPatternNotTriplesContext;

Sparql11Parser.prototype.graphPatternNotTriples = function() {

    var localctx = new GraphPatternNotTriplesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, Sparql11Parser.RULE_graphPatternNotTriples);
    try {
        this.state = 698;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.OPEN_CURLY_BRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 690;
            this.groupOrUnionGraphPattern();
            break;
        case Sparql11Parser.T__41:
            this.enterOuterAlt(localctx, 2);
            this.state = 691;
            this.optionalGraphPattern();
            break;
        case Sparql11Parser.T__45:
            this.enterOuterAlt(localctx, 3);
            this.state = 692;
            this.minusGraphPattern();
            break;
        case Sparql11Parser.T__39:
            this.enterOuterAlt(localctx, 4);
            this.state = 693;
            this.graphGraphPattern();
            break;
        case Sparql11Parser.T__42:
            this.enterOuterAlt(localctx, 5);
            this.state = 694;
            this.serviceGraphPattern();
            break;
        case Sparql11Parser.T__47:
            this.enterOuterAlt(localctx, 6);
            this.state = 695;
            this.filter();
            break;
        case Sparql11Parser.T__43:
            this.enterOuterAlt(localctx, 7);
            this.state = 696;
            this.bind();
            break;
        case Sparql11Parser.T__20:
            this.enterOuterAlt(localctx, 8);
            this.state = 697;
            this.inlineData();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OptionalGraphPatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_optionalGraphPattern;
    return this;
}

OptionalGraphPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionalGraphPatternContext.prototype.constructor = OptionalGraphPatternContext;

OptionalGraphPatternContext.prototype.groupGraphPattern = function() {
    return this.getTypedRuleContext(GroupGraphPatternContext,0);
};

OptionalGraphPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterOptionalGraphPattern(this);
	}
};

OptionalGraphPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitOptionalGraphPattern(this);
	}
};




Sparql11Parser.OptionalGraphPatternContext = OptionalGraphPatternContext;

Sparql11Parser.prototype.optionalGraphPattern = function() {

    var localctx = new OptionalGraphPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, Sparql11Parser.RULE_optionalGraphPattern);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 700;
        this.match(Sparql11Parser.T__41);
        this.state = 701;
        this.groupGraphPattern();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GraphGraphPatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_graphGraphPattern;
    return this;
}

GraphGraphPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GraphGraphPatternContext.prototype.constructor = GraphGraphPatternContext;

GraphGraphPatternContext.prototype.varOrIriRef = function() {
    return this.getTypedRuleContext(VarOrIriRefContext,0);
};

GraphGraphPatternContext.prototype.groupGraphPattern = function() {
    return this.getTypedRuleContext(GroupGraphPatternContext,0);
};

GraphGraphPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterGraphGraphPattern(this);
	}
};

GraphGraphPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitGraphGraphPattern(this);
	}
};




Sparql11Parser.GraphGraphPatternContext = GraphGraphPatternContext;

Sparql11Parser.prototype.graphGraphPattern = function() {

    var localctx = new GraphGraphPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, Sparql11Parser.RULE_graphGraphPattern);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 703;
        this.match(Sparql11Parser.T__39);
        this.state = 704;
        this.varOrIriRef();
        this.state = 705;
        this.groupGraphPattern();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ServiceGraphPatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_serviceGraphPattern;
    return this;
}

ServiceGraphPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ServiceGraphPatternContext.prototype.constructor = ServiceGraphPatternContext;

ServiceGraphPatternContext.prototype.varOrIriRef = function() {
    return this.getTypedRuleContext(VarOrIriRefContext,0);
};

ServiceGraphPatternContext.prototype.groupGraphPattern = function() {
    return this.getTypedRuleContext(GroupGraphPatternContext,0);
};

ServiceGraphPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterServiceGraphPattern(this);
	}
};

ServiceGraphPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitServiceGraphPattern(this);
	}
};




Sparql11Parser.ServiceGraphPatternContext = ServiceGraphPatternContext;

Sparql11Parser.prototype.serviceGraphPattern = function() {

    var localctx = new ServiceGraphPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, Sparql11Parser.RULE_serviceGraphPattern);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 707;
        this.match(Sparql11Parser.T__42);
        this.state = 709;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Sparql11Parser.T__22) {
            this.state = 708;
            this.match(Sparql11Parser.T__22);
        }

        this.state = 711;
        this.varOrIriRef();
        this.state = 712;
        this.groupGraphPattern();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_bind;
    return this;
}

BindContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindContext.prototype.constructor = BindContext;

BindContext.prototype.OPEN_BRACE = function() {
    return this.getToken(Sparql11Parser.OPEN_BRACE, 0);
};

BindContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

BindContext.prototype.var = function() {
    return this.getTypedRuleContext(VarContext,0);
};

BindContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(Sparql11Parser.CLOSE_BRACE, 0);
};

BindContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterBind(this);
	}
};

BindContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitBind(this);
	}
};




Sparql11Parser.BindContext = BindContext;

Sparql11Parser.prototype.bind = function() {

    var localctx = new BindContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, Sparql11Parser.RULE_bind);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 714;
        this.match(Sparql11Parser.T__43);
        this.state = 715;
        this.match(Sparql11Parser.OPEN_BRACE);
        this.state = 716;
        this.expression();
        this.state = 717;
        this.match(Sparql11Parser.T__5);
        this.state = 718;
        this.var();
        this.state = 719;
        this.match(Sparql11Parser.CLOSE_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InlineDataContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_inlineData;
    return this;
}

InlineDataContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InlineDataContext.prototype.constructor = InlineDataContext;

InlineDataContext.prototype.dataBlock = function() {
    return this.getTypedRuleContext(DataBlockContext,0);
};

InlineDataContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterInlineData(this);
	}
};

InlineDataContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitInlineData(this);
	}
};




Sparql11Parser.InlineDataContext = InlineDataContext;

Sparql11Parser.prototype.inlineData = function() {

    var localctx = new InlineDataContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, Sparql11Parser.RULE_inlineData);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 721;
        this.match(Sparql11Parser.T__20);
        this.state = 722;
        this.dataBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_dataBlock;
    return this;
}

DataBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataBlockContext.prototype.constructor = DataBlockContext;

DataBlockContext.prototype.inlineDataOneVar = function() {
    return this.getTypedRuleContext(InlineDataOneVarContext,0);
};

DataBlockContext.prototype.inlineDataFull = function() {
    return this.getTypedRuleContext(InlineDataFullContext,0);
};

DataBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterDataBlock(this);
	}
};

DataBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitDataBlock(this);
	}
};




Sparql11Parser.DataBlockContext = DataBlockContext;

Sparql11Parser.prototype.dataBlock = function() {

    var localctx = new DataBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, Sparql11Parser.RULE_dataBlock);
    try {
        this.state = 726;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.QUESTION:
        case Sparql11Parser.DOLLAR:
            this.enterOuterAlt(localctx, 1);
            this.state = 724;
            this.inlineDataOneVar();
            break;
        case Sparql11Parser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 725;
            this.inlineDataFull();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InlineDataOneVarContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_inlineDataOneVar;
    return this;
}

InlineDataOneVarContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InlineDataOneVarContext.prototype.constructor = InlineDataOneVarContext;

InlineDataOneVarContext.prototype.var = function() {
    return this.getTypedRuleContext(VarContext,0);
};

InlineDataOneVarContext.prototype.OPEN_CURLY_BRACE = function() {
    return this.getToken(Sparql11Parser.OPEN_CURLY_BRACE, 0);
};

InlineDataOneVarContext.prototype.CLOSE_CURLY_BRACE = function() {
    return this.getToken(Sparql11Parser.CLOSE_CURLY_BRACE, 0);
};

InlineDataOneVarContext.prototype.dataBlockValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DataBlockValueContext);
    } else {
        return this.getTypedRuleContext(DataBlockValueContext,i);
    }
};

InlineDataOneVarContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterInlineDataOneVar(this);
	}
};

InlineDataOneVarContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitInlineDataOneVar(this);
	}
};




Sparql11Parser.InlineDataOneVarContext = InlineDataOneVarContext;

Sparql11Parser.prototype.inlineDataOneVar = function() {

    var localctx = new InlineDataOneVarContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, Sparql11Parser.RULE_inlineDataOneVar);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 728;
        this.var();
        this.state = 729;
        this.match(Sparql11Parser.OPEN_CURLY_BRACE);
        this.state = 733;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Sparql11Parser.T__44 || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (Sparql11Parser.T__112 - 113)) | (1 << (Sparql11Parser.T__113 - 113)) | (1 << (Sparql11Parser.IRI_REF - 113)) | (1 << (Sparql11Parser.PNAME_NS - 113)) | (1 << (Sparql11Parser.PNAME_LN - 113)) | (1 << (Sparql11Parser.INTEGER - 113)) | (1 << (Sparql11Parser.DECIMAL - 113)) | (1 << (Sparql11Parser.DOUBLE - 113)) | (1 << (Sparql11Parser.INTEGER_POSITIVE - 113)) | (1 << (Sparql11Parser.DECIMAL_POSITIVE - 113)) | (1 << (Sparql11Parser.DOUBLE_POSITIVE - 113)) | (1 << (Sparql11Parser.INTEGER_NEGATIVE - 113)) | (1 << (Sparql11Parser.DECIMAL_NEGATIVE - 113)) | (1 << (Sparql11Parser.DOUBLE_NEGATIVE - 113)) | (1 << (Sparql11Parser.STRING_LITERAL1 - 113)) | (1 << (Sparql11Parser.STRING_LITERAL2 - 113)) | (1 << (Sparql11Parser.STRING_LITERAL_LONG1 - 113)) | (1 << (Sparql11Parser.STRING_LITERAL_LONG2 - 113)))) !== 0)) {
            this.state = 730;
            this.dataBlockValue();
            this.state = 735;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 736;
        this.match(Sparql11Parser.CLOSE_CURLY_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InlineDataFullContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_inlineDataFull;
    return this;
}

InlineDataFullContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InlineDataFullContext.prototype.constructor = InlineDataFullContext;

InlineDataFullContext.prototype.OPEN_CURLY_BRACE = function() {
    return this.getToken(Sparql11Parser.OPEN_CURLY_BRACE, 0);
};

InlineDataFullContext.prototype.CLOSE_CURLY_BRACE = function() {
    return this.getToken(Sparql11Parser.CLOSE_CURLY_BRACE, 0);
};

InlineDataFullContext.prototype.nil = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NilContext);
    } else {
        return this.getTypedRuleContext(NilContext,i);
    }
};

InlineDataFullContext.prototype.OPEN_BRACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Sparql11Parser.OPEN_BRACE);
    } else {
        return this.getToken(Sparql11Parser.OPEN_BRACE, i);
    }
};


InlineDataFullContext.prototype.CLOSE_BRACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Sparql11Parser.CLOSE_BRACE);
    } else {
        return this.getToken(Sparql11Parser.CLOSE_BRACE, i);
    }
};


InlineDataFullContext.prototype.var = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VarContext);
    } else {
        return this.getTypedRuleContext(VarContext,i);
    }
};

InlineDataFullContext.prototype.dataBlockValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DataBlockValueContext);
    } else {
        return this.getTypedRuleContext(DataBlockValueContext,i);
    }
};

InlineDataFullContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterInlineDataFull(this);
	}
};

InlineDataFullContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitInlineDataFull(this);
	}
};




Sparql11Parser.InlineDataFullContext = InlineDataFullContext;

Sparql11Parser.prototype.inlineDataFull = function() {

    var localctx = new InlineDataFullContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, Sparql11Parser.RULE_inlineDataFull);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 747;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
        switch(la_) {
        case 1:
            this.state = 738;
            this.nil();
            break;

        case 2:
            this.state = 739;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 743;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Sparql11Parser.QUESTION || _la===Sparql11Parser.DOLLAR) {
                this.state = 740;
                this.var();
                this.state = 745;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 746;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;

        }
        this.state = 749;
        this.match(Sparql11Parser.OPEN_CURLY_BRACE);
        this.state = 761;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Sparql11Parser.OPEN_BRACE) {
            this.state = 759;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
            switch(la_) {
            case 1:
                this.state = 750;
                this.match(Sparql11Parser.OPEN_BRACE);
                this.state = 754;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===Sparql11Parser.T__44 || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (Sparql11Parser.T__112 - 113)) | (1 << (Sparql11Parser.T__113 - 113)) | (1 << (Sparql11Parser.IRI_REF - 113)) | (1 << (Sparql11Parser.PNAME_NS - 113)) | (1 << (Sparql11Parser.PNAME_LN - 113)) | (1 << (Sparql11Parser.INTEGER - 113)) | (1 << (Sparql11Parser.DECIMAL - 113)) | (1 << (Sparql11Parser.DOUBLE - 113)) | (1 << (Sparql11Parser.INTEGER_POSITIVE - 113)) | (1 << (Sparql11Parser.DECIMAL_POSITIVE - 113)) | (1 << (Sparql11Parser.DOUBLE_POSITIVE - 113)) | (1 << (Sparql11Parser.INTEGER_NEGATIVE - 113)) | (1 << (Sparql11Parser.DECIMAL_NEGATIVE - 113)) | (1 << (Sparql11Parser.DOUBLE_NEGATIVE - 113)) | (1 << (Sparql11Parser.STRING_LITERAL1 - 113)) | (1 << (Sparql11Parser.STRING_LITERAL2 - 113)) | (1 << (Sparql11Parser.STRING_LITERAL_LONG1 - 113)) | (1 << (Sparql11Parser.STRING_LITERAL_LONG2 - 113)))) !== 0)) {
                    this.state = 751;
                    this.dataBlockValue();
                    this.state = 756;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 757;
                this.match(Sparql11Parser.CLOSE_BRACE);
                break;

            case 2:
                this.state = 758;
                this.nil();
                break;

            }
            this.state = 763;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 764;
        this.match(Sparql11Parser.CLOSE_CURLY_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataBlockValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_dataBlockValue;
    return this;
}

DataBlockValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataBlockValueContext.prototype.constructor = DataBlockValueContext;

DataBlockValueContext.prototype.iriRef = function() {
    return this.getTypedRuleContext(IriRefContext,0);
};

DataBlockValueContext.prototype.rdfLiteral = function() {
    return this.getTypedRuleContext(RdfLiteralContext,0);
};

DataBlockValueContext.prototype.numericLiteral = function() {
    return this.getTypedRuleContext(NumericLiteralContext,0);
};

DataBlockValueContext.prototype.booleanLiteral = function() {
    return this.getTypedRuleContext(BooleanLiteralContext,0);
};

DataBlockValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterDataBlockValue(this);
	}
};

DataBlockValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitDataBlockValue(this);
	}
};




Sparql11Parser.DataBlockValueContext = DataBlockValueContext;

Sparql11Parser.prototype.dataBlockValue = function() {

    var localctx = new DataBlockValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, Sparql11Parser.RULE_dataBlockValue);
    try {
        this.state = 771;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.IRI_REF:
        case Sparql11Parser.PNAME_NS:
        case Sparql11Parser.PNAME_LN:
            this.enterOuterAlt(localctx, 1);
            this.state = 766;
            this.iriRef();
            break;
        case Sparql11Parser.STRING_LITERAL1:
        case Sparql11Parser.STRING_LITERAL2:
        case Sparql11Parser.STRING_LITERAL_LONG1:
        case Sparql11Parser.STRING_LITERAL_LONG2:
            this.enterOuterAlt(localctx, 2);
            this.state = 767;
            this.rdfLiteral();
            break;
        case Sparql11Parser.INTEGER:
        case Sparql11Parser.DECIMAL:
        case Sparql11Parser.DOUBLE:
        case Sparql11Parser.INTEGER_POSITIVE:
        case Sparql11Parser.DECIMAL_POSITIVE:
        case Sparql11Parser.DOUBLE_POSITIVE:
        case Sparql11Parser.INTEGER_NEGATIVE:
        case Sparql11Parser.DECIMAL_NEGATIVE:
        case Sparql11Parser.DOUBLE_NEGATIVE:
            this.enterOuterAlt(localctx, 3);
            this.state = 768;
            this.numericLiteral();
            break;
        case Sparql11Parser.T__112:
        case Sparql11Parser.T__113:
            this.enterOuterAlt(localctx, 4);
            this.state = 769;
            this.booleanLiteral();
            break;
        case Sparql11Parser.T__44:
            this.enterOuterAlt(localctx, 5);
            this.state = 770;
            this.match(Sparql11Parser.T__44);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MinusGraphPatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_minusGraphPattern;
    return this;
}

MinusGraphPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MinusGraphPatternContext.prototype.constructor = MinusGraphPatternContext;

MinusGraphPatternContext.prototype.groupGraphPattern = function() {
    return this.getTypedRuleContext(GroupGraphPatternContext,0);
};

MinusGraphPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterMinusGraphPattern(this);
	}
};

MinusGraphPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitMinusGraphPattern(this);
	}
};




Sparql11Parser.MinusGraphPatternContext = MinusGraphPatternContext;

Sparql11Parser.prototype.minusGraphPattern = function() {

    var localctx = new MinusGraphPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, Sparql11Parser.RULE_minusGraphPattern);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 773;
        this.match(Sparql11Parser.T__45);
        this.state = 774;
        this.groupGraphPattern();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GroupOrUnionGraphPatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_groupOrUnionGraphPattern;
    return this;
}

GroupOrUnionGraphPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupOrUnionGraphPatternContext.prototype.constructor = GroupOrUnionGraphPatternContext;

GroupOrUnionGraphPatternContext.prototype.groupGraphPattern = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GroupGraphPatternContext);
    } else {
        return this.getTypedRuleContext(GroupGraphPatternContext,i);
    }
};

GroupOrUnionGraphPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterGroupOrUnionGraphPattern(this);
	}
};

GroupOrUnionGraphPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitGroupOrUnionGraphPattern(this);
	}
};




Sparql11Parser.GroupOrUnionGraphPatternContext = GroupOrUnionGraphPatternContext;

Sparql11Parser.prototype.groupOrUnionGraphPattern = function() {

    var localctx = new GroupOrUnionGraphPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, Sparql11Parser.RULE_groupOrUnionGraphPattern);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 776;
        this.groupGraphPattern();
        this.state = 781;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Sparql11Parser.T__46) {
            this.state = 777;
            this.match(Sparql11Parser.T__46);
            this.state = 778;
            this.groupGraphPattern();
            this.state = 783;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FilterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_filter;
    return this;
}

FilterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FilterContext.prototype.constructor = FilterContext;

FilterContext.prototype.constraint = function() {
    return this.getTypedRuleContext(ConstraintContext,0);
};

FilterContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterFilter(this);
	}
};

FilterContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitFilter(this);
	}
};




Sparql11Parser.FilterContext = FilterContext;

Sparql11Parser.prototype.filter = function() {

    var localctx = new FilterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, Sparql11Parser.RULE_filter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 784;
        this.match(Sparql11Parser.T__47);
        this.state = 785;
        this.constraint();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_constraint;
    return this;
}

ConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstraintContext.prototype.constructor = ConstraintContext;

ConstraintContext.prototype.brackettedExpression = function() {
    return this.getTypedRuleContext(BrackettedExpressionContext,0);
};

ConstraintContext.prototype.builtInCall = function() {
    return this.getTypedRuleContext(BuiltInCallContext,0);
};

ConstraintContext.prototype.functionCall = function() {
    return this.getTypedRuleContext(FunctionCallContext,0);
};

ConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterConstraint(this);
	}
};

ConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitConstraint(this);
	}
};




Sparql11Parser.ConstraintContext = ConstraintContext;

Sparql11Parser.prototype.constraint = function() {

    var localctx = new ConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, Sparql11Parser.RULE_constraint);
    try {
        this.state = 790;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 787;
            this.brackettedExpression();
            break;
        case Sparql11Parser.T__50:
        case Sparql11Parser.T__51:
        case Sparql11Parser.T__52:
        case Sparql11Parser.T__53:
        case Sparql11Parser.T__54:
        case Sparql11Parser.T__55:
        case Sparql11Parser.T__56:
        case Sparql11Parser.T__57:
        case Sparql11Parser.T__58:
        case Sparql11Parser.T__59:
        case Sparql11Parser.T__60:
        case Sparql11Parser.T__61:
        case Sparql11Parser.T__62:
        case Sparql11Parser.T__63:
        case Sparql11Parser.T__64:
        case Sparql11Parser.T__65:
        case Sparql11Parser.T__66:
        case Sparql11Parser.T__67:
        case Sparql11Parser.T__68:
        case Sparql11Parser.T__69:
        case Sparql11Parser.T__70:
        case Sparql11Parser.T__71:
        case Sparql11Parser.T__72:
        case Sparql11Parser.T__73:
        case Sparql11Parser.T__74:
        case Sparql11Parser.T__75:
        case Sparql11Parser.T__76:
        case Sparql11Parser.T__77:
        case Sparql11Parser.T__78:
        case Sparql11Parser.T__79:
        case Sparql11Parser.T__80:
        case Sparql11Parser.T__81:
        case Sparql11Parser.T__82:
        case Sparql11Parser.T__83:
        case Sparql11Parser.T__84:
        case Sparql11Parser.T__85:
        case Sparql11Parser.T__86:
        case Sparql11Parser.T__87:
        case Sparql11Parser.T__88:
        case Sparql11Parser.T__89:
        case Sparql11Parser.T__90:
        case Sparql11Parser.T__91:
        case Sparql11Parser.T__92:
        case Sparql11Parser.T__93:
        case Sparql11Parser.T__94:
        case Sparql11Parser.T__95:
        case Sparql11Parser.T__96:
        case Sparql11Parser.T__97:
        case Sparql11Parser.T__98:
        case Sparql11Parser.T__99:
        case Sparql11Parser.T__100:
        case Sparql11Parser.T__101:
        case Sparql11Parser.T__102:
        case Sparql11Parser.T__103:
        case Sparql11Parser.T__104:
        case Sparql11Parser.T__105:
        case Sparql11Parser.T__106:
        case Sparql11Parser.T__107:
        case Sparql11Parser.T__108:
        case Sparql11Parser.T__109:
        case Sparql11Parser.T__110:
            this.enterOuterAlt(localctx, 2);
            this.state = 788;
            this.builtInCall();
            break;
        case Sparql11Parser.IRI_REF:
        case Sparql11Parser.PNAME_NS:
        case Sparql11Parser.PNAME_LN:
            this.enterOuterAlt(localctx, 3);
            this.state = 789;
            this.functionCall();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionCallContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_functionCall;
    return this;
}

FunctionCallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionCallContext.prototype.constructor = FunctionCallContext;

FunctionCallContext.prototype.iriRef = function() {
    return this.getTypedRuleContext(IriRefContext,0);
};

FunctionCallContext.prototype.argList = function() {
    return this.getTypedRuleContext(ArgListContext,0);
};

FunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterFunctionCall(this);
	}
};

FunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitFunctionCall(this);
	}
};




Sparql11Parser.FunctionCallContext = FunctionCallContext;

Sparql11Parser.prototype.functionCall = function() {

    var localctx = new FunctionCallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, Sparql11Parser.RULE_functionCall);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 792;
        this.iriRef();
        this.state = 793;
        this.argList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_argList;
    return this;
}

ArgListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgListContext.prototype.constructor = ArgListContext;

ArgListContext.prototype.nil = function() {
    return this.getTypedRuleContext(NilContext,0);
};

ArgListContext.prototype.OPEN_BRACE = function() {
    return this.getToken(Sparql11Parser.OPEN_BRACE, 0);
};

ArgListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ArgListContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(Sparql11Parser.CLOSE_BRACE, 0);
};

ArgListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Sparql11Parser.COMMA);
    } else {
        return this.getToken(Sparql11Parser.COMMA, i);
    }
};


ArgListContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterArgList(this);
	}
};

ArgListContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitArgList(this);
	}
};




Sparql11Parser.ArgListContext = ArgListContext;

Sparql11Parser.prototype.argList = function() {

    var localctx = new ArgListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, Sparql11Parser.RULE_argList);
    var _la = 0; // Token type
    try {
        this.state = 810;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 795;
            this.nil();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 796;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 798;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Sparql11Parser.T__3) {
                this.state = 797;
                this.match(Sparql11Parser.T__3);
            }

            this.state = 800;
            this.expression();
            this.state = 805;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Sparql11Parser.COMMA) {
                this.state = 801;
                this.match(Sparql11Parser.COMMA);
                this.state = 802;
                this.expression();
                this.state = 807;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 808;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_expressionList;
    return this;
}

ExpressionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionListContext.prototype.constructor = ExpressionListContext;

ExpressionListContext.prototype.nil = function() {
    return this.getTypedRuleContext(NilContext,0);
};

ExpressionListContext.prototype.OPEN_BRACE = function() {
    return this.getToken(Sparql11Parser.OPEN_BRACE, 0);
};

ExpressionListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionListContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(Sparql11Parser.CLOSE_BRACE, 0);
};

ExpressionListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Sparql11Parser.COMMA);
    } else {
        return this.getToken(Sparql11Parser.COMMA, i);
    }
};


ExpressionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterExpressionList(this);
	}
};

ExpressionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitExpressionList(this);
	}
};




Sparql11Parser.ExpressionListContext = ExpressionListContext;

Sparql11Parser.prototype.expressionList = function() {

    var localctx = new ExpressionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, Sparql11Parser.RULE_expressionList);
    var _la = 0; // Token type
    try {
        this.state = 824;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 812;
            this.nil();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 813;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 814;
            this.expression();
            this.state = 819;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Sparql11Parser.COMMA) {
                this.state = 815;
                this.match(Sparql11Parser.COMMA);
                this.state = 816;
                this.expression();
                this.state = 821;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 822;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstructTemplateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_constructTemplate;
    return this;
}

ConstructTemplateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructTemplateContext.prototype.constructor = ConstructTemplateContext;

ConstructTemplateContext.prototype.OPEN_CURLY_BRACE = function() {
    return this.getToken(Sparql11Parser.OPEN_CURLY_BRACE, 0);
};

ConstructTemplateContext.prototype.CLOSE_CURLY_BRACE = function() {
    return this.getToken(Sparql11Parser.CLOSE_CURLY_BRACE, 0);
};

ConstructTemplateContext.prototype.constructTriples = function() {
    return this.getTypedRuleContext(ConstructTriplesContext,0);
};

ConstructTemplateContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterConstructTemplate(this);
	}
};

ConstructTemplateContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitConstructTemplate(this);
	}
};




Sparql11Parser.ConstructTemplateContext = ConstructTemplateContext;

Sparql11Parser.prototype.constructTemplate = function() {

    var localctx = new ConstructTemplateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, Sparql11Parser.RULE_constructTemplate);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 826;
        this.match(Sparql11Parser.OPEN_CURLY_BRACE);
        this.state = 828;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (Sparql11Parser.T__112 - 113)) | (1 << (Sparql11Parser.T__113 - 113)) | (1 << (Sparql11Parser.IRI_REF - 113)) | (1 << (Sparql11Parser.PNAME_NS - 113)) | (1 << (Sparql11Parser.PNAME_LN - 113)) | (1 << (Sparql11Parser.BLANK_NODE_LABEL - 113)) | (1 << (Sparql11Parser.INTEGER - 113)) | (1 << (Sparql11Parser.DECIMAL - 113)) | (1 << (Sparql11Parser.DOUBLE - 113)) | (1 << (Sparql11Parser.INTEGER_POSITIVE - 113)) | (1 << (Sparql11Parser.DECIMAL_POSITIVE - 113)) | (1 << (Sparql11Parser.DOUBLE_POSITIVE - 113)) | (1 << (Sparql11Parser.INTEGER_NEGATIVE - 113)) | (1 << (Sparql11Parser.DECIMAL_NEGATIVE - 113)) | (1 << (Sparql11Parser.DOUBLE_NEGATIVE - 113)) | (1 << (Sparql11Parser.STRING_LITERAL1 - 113)) | (1 << (Sparql11Parser.STRING_LITERAL2 - 113)) | (1 << (Sparql11Parser.STRING_LITERAL_LONG1 - 113)) | (1 << (Sparql11Parser.STRING_LITERAL_LONG2 - 113)) | (1 << (Sparql11Parser.OPEN_BRACE - 113)))) !== 0) || ((((_la - 149)) & ~0x1f) == 0 && ((1 << (_la - 149)) & ((1 << (Sparql11Parser.QUESTION - 149)) | (1 << (Sparql11Parser.DOLLAR - 149)) | (1 << (Sparql11Parser.OPEN_SQUARE_BRACE - 149)))) !== 0)) {
            this.state = 827;
            this.constructTriples();
        }

        this.state = 830;
        this.match(Sparql11Parser.CLOSE_CURLY_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstructTriplesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_constructTriples;
    return this;
}

ConstructTriplesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructTriplesContext.prototype.constructor = ConstructTriplesContext;

ConstructTriplesContext.prototype.triplesSameSubject = function() {
    return this.getTypedRuleContext(TriplesSameSubjectContext,0);
};

ConstructTriplesContext.prototype.DOT = function() {
    return this.getToken(Sparql11Parser.DOT, 0);
};

ConstructTriplesContext.prototype.constructTriples = function() {
    return this.getTypedRuleContext(ConstructTriplesContext,0);
};

ConstructTriplesContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterConstructTriples(this);
	}
};

ConstructTriplesContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitConstructTriples(this);
	}
};




Sparql11Parser.ConstructTriplesContext = ConstructTriplesContext;

Sparql11Parser.prototype.constructTriples = function() {

    var localctx = new ConstructTriplesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, Sparql11Parser.RULE_constructTriples);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 832;
        this.triplesSameSubject();
        this.state = 837;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Sparql11Parser.DOT) {
            this.state = 833;
            this.match(Sparql11Parser.DOT);
            this.state = 835;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (Sparql11Parser.T__112 - 113)) | (1 << (Sparql11Parser.T__113 - 113)) | (1 << (Sparql11Parser.IRI_REF - 113)) | (1 << (Sparql11Parser.PNAME_NS - 113)) | (1 << (Sparql11Parser.PNAME_LN - 113)) | (1 << (Sparql11Parser.BLANK_NODE_LABEL - 113)) | (1 << (Sparql11Parser.INTEGER - 113)) | (1 << (Sparql11Parser.DECIMAL - 113)) | (1 << (Sparql11Parser.DOUBLE - 113)) | (1 << (Sparql11Parser.INTEGER_POSITIVE - 113)) | (1 << (Sparql11Parser.DECIMAL_POSITIVE - 113)) | (1 << (Sparql11Parser.DOUBLE_POSITIVE - 113)) | (1 << (Sparql11Parser.INTEGER_NEGATIVE - 113)) | (1 << (Sparql11Parser.DECIMAL_NEGATIVE - 113)) | (1 << (Sparql11Parser.DOUBLE_NEGATIVE - 113)) | (1 << (Sparql11Parser.STRING_LITERAL1 - 113)) | (1 << (Sparql11Parser.STRING_LITERAL2 - 113)) | (1 << (Sparql11Parser.STRING_LITERAL_LONG1 - 113)) | (1 << (Sparql11Parser.STRING_LITERAL_LONG2 - 113)) | (1 << (Sparql11Parser.OPEN_BRACE - 113)))) !== 0) || ((((_la - 149)) & ~0x1f) == 0 && ((1 << (_la - 149)) & ((1 << (Sparql11Parser.QUESTION - 149)) | (1 << (Sparql11Parser.DOLLAR - 149)) | (1 << (Sparql11Parser.OPEN_SQUARE_BRACE - 149)))) !== 0)) {
                this.state = 834;
                this.constructTriples();
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TriplesSameSubjectContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_triplesSameSubject;
    return this;
}

TriplesSameSubjectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriplesSameSubjectContext.prototype.constructor = TriplesSameSubjectContext;

TriplesSameSubjectContext.prototype.varOrTerm = function() {
    return this.getTypedRuleContext(VarOrTermContext,0);
};

TriplesSameSubjectContext.prototype.propertyListNotEmpty = function() {
    return this.getTypedRuleContext(PropertyListNotEmptyContext,0);
};

TriplesSameSubjectContext.prototype.triplesNode = function() {
    return this.getTypedRuleContext(TriplesNodeContext,0);
};

TriplesSameSubjectContext.prototype.propertyList = function() {
    return this.getTypedRuleContext(PropertyListContext,0);
};

TriplesSameSubjectContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterTriplesSameSubject(this);
	}
};

TriplesSameSubjectContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitTriplesSameSubject(this);
	}
};




Sparql11Parser.TriplesSameSubjectContext = TriplesSameSubjectContext;

Sparql11Parser.prototype.triplesSameSubject = function() {

    var localctx = new TriplesSameSubjectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, Sparql11Parser.RULE_triplesSameSubject);
    try {
        this.state = 845;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 839;
            this.varOrTerm();
            this.state = 840;
            this.propertyListNotEmpty();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 842;
            this.triplesNode();
            this.state = 843;
            this.propertyList();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_propertyList;
    return this;
}

PropertyListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyListContext.prototype.constructor = PropertyListContext;

PropertyListContext.prototype.propertyListNotEmpty = function() {
    return this.getTypedRuleContext(PropertyListNotEmptyContext,0);
};

PropertyListContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterPropertyList(this);
	}
};

PropertyListContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitPropertyList(this);
	}
};




Sparql11Parser.PropertyListContext = PropertyListContext;

Sparql11Parser.prototype.propertyList = function() {

    var localctx = new PropertyListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, Sparql11Parser.RULE_propertyList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 848;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Sparql11Parser.T__48 || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (Sparql11Parser.IRI_REF - 115)) | (1 << (Sparql11Parser.PNAME_NS - 115)) | (1 << (Sparql11Parser.PNAME_LN - 115)))) !== 0) || _la===Sparql11Parser.QUESTION || _la===Sparql11Parser.DOLLAR) {
            this.state = 847;
            this.propertyListNotEmpty();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyListNotEmptyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_propertyListNotEmpty;
    return this;
}

PropertyListNotEmptyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyListNotEmptyContext.prototype.constructor = PropertyListNotEmptyContext;

PropertyListNotEmptyContext.prototype.verb = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VerbContext);
    } else {
        return this.getTypedRuleContext(VerbContext,i);
    }
};

PropertyListNotEmptyContext.prototype.objectList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ObjectListContext);
    } else {
        return this.getTypedRuleContext(ObjectListContext,i);
    }
};

PropertyListNotEmptyContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Sparql11Parser.SEMICOLON);
    } else {
        return this.getToken(Sparql11Parser.SEMICOLON, i);
    }
};


PropertyListNotEmptyContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterPropertyListNotEmpty(this);
	}
};

PropertyListNotEmptyContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitPropertyListNotEmpty(this);
	}
};




Sparql11Parser.PropertyListNotEmptyContext = PropertyListNotEmptyContext;

Sparql11Parser.prototype.propertyListNotEmpty = function() {

    var localctx = new PropertyListNotEmptyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, Sparql11Parser.RULE_propertyListNotEmpty);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 850;
        this.verb();
        this.state = 851;
        this.objectList();
        this.state = 860;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Sparql11Parser.SEMICOLON) {
            this.state = 852;
            this.match(Sparql11Parser.SEMICOLON);
            this.state = 856;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Sparql11Parser.T__48 || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (Sparql11Parser.IRI_REF - 115)) | (1 << (Sparql11Parser.PNAME_NS - 115)) | (1 << (Sparql11Parser.PNAME_LN - 115)))) !== 0) || _la===Sparql11Parser.QUESTION || _la===Sparql11Parser.DOLLAR) {
                this.state = 853;
                this.verb();
                this.state = 854;
                this.objectList();
            }

            this.state = 862;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VerbContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_verb;
    return this;
}

VerbContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VerbContext.prototype.constructor = VerbContext;

VerbContext.prototype.varOrIriRef = function() {
    return this.getTypedRuleContext(VarOrIriRefContext,0);
};

VerbContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterVerb(this);
	}
};

VerbContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitVerb(this);
	}
};




Sparql11Parser.VerbContext = VerbContext;

Sparql11Parser.prototype.verb = function() {

    var localctx = new VerbContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, Sparql11Parser.RULE_verb);
    try {
        this.state = 865;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.IRI_REF:
        case Sparql11Parser.PNAME_NS:
        case Sparql11Parser.PNAME_LN:
        case Sparql11Parser.QUESTION:
        case Sparql11Parser.DOLLAR:
            this.enterOuterAlt(localctx, 1);
            this.state = 863;
            this.varOrIriRef();
            break;
        case Sparql11Parser.T__48:
            this.enterOuterAlt(localctx, 2);
            this.state = 864;
            this.match(Sparql11Parser.T__48);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ObjectListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_objectList;
    return this;
}

ObjectListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectListContext.prototype.constructor = ObjectListContext;

ObjectListContext.prototype.object = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ObjectContext);
    } else {
        return this.getTypedRuleContext(ObjectContext,i);
    }
};

ObjectListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Sparql11Parser.COMMA);
    } else {
        return this.getToken(Sparql11Parser.COMMA, i);
    }
};


ObjectListContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterObjectList(this);
	}
};

ObjectListContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitObjectList(this);
	}
};




Sparql11Parser.ObjectListContext = ObjectListContext;

Sparql11Parser.prototype.objectList = function() {

    var localctx = new ObjectListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, Sparql11Parser.RULE_objectList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 867;
        this.object();
        this.state = 872;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Sparql11Parser.COMMA) {
            this.state = 868;
            this.match(Sparql11Parser.COMMA);
            this.state = 869;
            this.object();
            this.state = 874;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ObjectContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_object;
    return this;
}

ObjectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectContext.prototype.constructor = ObjectContext;

ObjectContext.prototype.graphNode = function() {
    return this.getTypedRuleContext(GraphNodeContext,0);
};

ObjectContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterObject(this);
	}
};

ObjectContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitObject(this);
	}
};




Sparql11Parser.ObjectContext = ObjectContext;

Sparql11Parser.prototype.object = function() {

    var localctx = new ObjectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, Sparql11Parser.RULE_object);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 875;
        this.graphNode();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TriplesSameSubjectPathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_triplesSameSubjectPath;
    return this;
}

TriplesSameSubjectPathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriplesSameSubjectPathContext.prototype.constructor = TriplesSameSubjectPathContext;

TriplesSameSubjectPathContext.prototype.varOrTerm = function() {
    return this.getTypedRuleContext(VarOrTermContext,0);
};

TriplesSameSubjectPathContext.prototype.propertyListPathNotEmpty = function() {
    return this.getTypedRuleContext(PropertyListPathNotEmptyContext,0);
};

TriplesSameSubjectPathContext.prototype.triplesNodePath = function() {
    return this.getTypedRuleContext(TriplesNodePathContext,0);
};

TriplesSameSubjectPathContext.prototype.propertyListPath = function() {
    return this.getTypedRuleContext(PropertyListPathContext,0);
};

TriplesSameSubjectPathContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterTriplesSameSubjectPath(this);
	}
};

TriplesSameSubjectPathContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitTriplesSameSubjectPath(this);
	}
};




Sparql11Parser.TriplesSameSubjectPathContext = TriplesSameSubjectPathContext;

Sparql11Parser.prototype.triplesSameSubjectPath = function() {

    var localctx = new TriplesSameSubjectPathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, Sparql11Parser.RULE_triplesSameSubjectPath);
    try {
        this.state = 883;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 877;
            this.varOrTerm();
            this.state = 878;
            this.propertyListPathNotEmpty();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 880;
            this.triplesNodePath();
            this.state = 881;
            this.propertyListPath();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyListPathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_propertyListPath;
    return this;
}

PropertyListPathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyListPathContext.prototype.constructor = PropertyListPathContext;

PropertyListPathContext.prototype.propertyListPathNotEmpty = function() {
    return this.getTypedRuleContext(PropertyListPathNotEmptyContext,0);
};

PropertyListPathContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterPropertyListPath(this);
	}
};

PropertyListPathContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitPropertyListPath(this);
	}
};




Sparql11Parser.PropertyListPathContext = PropertyListPathContext;

Sparql11Parser.prototype.propertyListPath = function() {

    var localctx = new PropertyListPathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, Sparql11Parser.RULE_propertyListPath);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 886;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
        if(la_===1) {
            this.state = 885;
            this.propertyListPathNotEmpty();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyListPathNotEmptyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_propertyListPathNotEmpty;
    return this;
}

PropertyListPathNotEmptyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyListPathNotEmptyContext.prototype.constructor = PropertyListPathNotEmptyContext;

PropertyListPathNotEmptyContext.prototype.objectListPath = function() {
    return this.getTypedRuleContext(ObjectListPathContext,0);
};

PropertyListPathNotEmptyContext.prototype.verbPath = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VerbPathContext);
    } else {
        return this.getTypedRuleContext(VerbPathContext,i);
    }
};

PropertyListPathNotEmptyContext.prototype.verbSimple = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VerbSimpleContext);
    } else {
        return this.getTypedRuleContext(VerbSimpleContext,i);
    }
};

PropertyListPathNotEmptyContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Sparql11Parser.SEMICOLON);
    } else {
        return this.getToken(Sparql11Parser.SEMICOLON, i);
    }
};


PropertyListPathNotEmptyContext.prototype.objectList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ObjectListContext);
    } else {
        return this.getTypedRuleContext(ObjectListContext,i);
    }
};

PropertyListPathNotEmptyContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterPropertyListPathNotEmpty(this);
	}
};

PropertyListPathNotEmptyContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitPropertyListPathNotEmpty(this);
	}
};




Sparql11Parser.PropertyListPathNotEmptyContext = PropertyListPathNotEmptyContext;

Sparql11Parser.prototype.propertyListPathNotEmpty = function() {

    var localctx = new PropertyListPathNotEmptyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, Sparql11Parser.RULE_propertyListPathNotEmpty);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 890;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.T__48:
        case Sparql11Parser.IRI_REF:
        case Sparql11Parser.PNAME_NS:
        case Sparql11Parser.PNAME_LN:
        case Sparql11Parser.OPEN_BRACE:
        case Sparql11Parser.HAT:
        case Sparql11Parser.NOT_SIGN:
            this.state = 888;
            this.verbPath();
            break;
        case Sparql11Parser.QUESTION:
        case Sparql11Parser.DOLLAR:
            this.state = 889;
            this.verbSimple();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 892;
        this.objectListPath();
        this.state = 904;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Sparql11Parser.SEMICOLON) {
            this.state = 893;
            this.match(Sparql11Parser.SEMICOLON);
            this.state = 900;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
            if(la_===1) {
                this.state = 896;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case Sparql11Parser.T__48:
                case Sparql11Parser.IRI_REF:
                case Sparql11Parser.PNAME_NS:
                case Sparql11Parser.PNAME_LN:
                case Sparql11Parser.OPEN_BRACE:
                case Sparql11Parser.HAT:
                case Sparql11Parser.NOT_SIGN:
                    this.state = 894;
                    this.verbPath();
                    break;
                case Sparql11Parser.QUESTION:
                case Sparql11Parser.DOLLAR:
                    this.state = 895;
                    this.verbSimple();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 898;
                this.objectList();

            }
            this.state = 906;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VerbPathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_verbPath;
    return this;
}

VerbPathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VerbPathContext.prototype.constructor = VerbPathContext;

VerbPathContext.prototype.path = function() {
    return this.getTypedRuleContext(PathContext,0);
};

VerbPathContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterVerbPath(this);
	}
};

VerbPathContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitVerbPath(this);
	}
};




Sparql11Parser.VerbPathContext = VerbPathContext;

Sparql11Parser.prototype.verbPath = function() {

    var localctx = new VerbPathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, Sparql11Parser.RULE_verbPath);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 907;
        this.path();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VerbSimpleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_verbSimple;
    return this;
}

VerbSimpleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VerbSimpleContext.prototype.constructor = VerbSimpleContext;

VerbSimpleContext.prototype.var = function() {
    return this.getTypedRuleContext(VarContext,0);
};

VerbSimpleContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterVerbSimple(this);
	}
};

VerbSimpleContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitVerbSimple(this);
	}
};




Sparql11Parser.VerbSimpleContext = VerbSimpleContext;

Sparql11Parser.prototype.verbSimple = function() {

    var localctx = new VerbSimpleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, Sparql11Parser.RULE_verbSimple);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 909;
        this.var();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ObjectListPathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_objectListPath;
    return this;
}

ObjectListPathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectListPathContext.prototype.constructor = ObjectListPathContext;

ObjectListPathContext.prototype.objectPath = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ObjectPathContext);
    } else {
        return this.getTypedRuleContext(ObjectPathContext,i);
    }
};

ObjectListPathContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Sparql11Parser.COMMA);
    } else {
        return this.getToken(Sparql11Parser.COMMA, i);
    }
};


ObjectListPathContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterObjectListPath(this);
	}
};

ObjectListPathContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitObjectListPath(this);
	}
};




Sparql11Parser.ObjectListPathContext = ObjectListPathContext;

Sparql11Parser.prototype.objectListPath = function() {

    var localctx = new ObjectListPathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, Sparql11Parser.RULE_objectListPath);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 911;
        this.objectPath();
        this.state = 916;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Sparql11Parser.COMMA) {
            this.state = 912;
            this.match(Sparql11Parser.COMMA);
            this.state = 913;
            this.objectPath();
            this.state = 918;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ObjectPathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_objectPath;
    return this;
}

ObjectPathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectPathContext.prototype.constructor = ObjectPathContext;

ObjectPathContext.prototype.graphNodePath = function() {
    return this.getTypedRuleContext(GraphNodePathContext,0);
};

ObjectPathContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterObjectPath(this);
	}
};

ObjectPathContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitObjectPath(this);
	}
};




Sparql11Parser.ObjectPathContext = ObjectPathContext;

Sparql11Parser.prototype.objectPath = function() {

    var localctx = new ObjectPathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, Sparql11Parser.RULE_objectPath);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 919;
        this.graphNodePath();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_path;
    return this;
}

PathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PathContext.prototype.constructor = PathContext;

PathContext.prototype.pathAlternative = function() {
    return this.getTypedRuleContext(PathAlternativeContext,0);
};

PathContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterPath(this);
	}
};

PathContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitPath(this);
	}
};




Sparql11Parser.PathContext = PathContext;

Sparql11Parser.prototype.path = function() {

    var localctx = new PathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, Sparql11Parser.RULE_path);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 921;
        this.pathAlternative();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PathAlternativeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_pathAlternative;
    return this;
}

PathAlternativeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PathAlternativeContext.prototype.constructor = PathAlternativeContext;

PathAlternativeContext.prototype.pathSequence = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PathSequenceContext);
    } else {
        return this.getTypedRuleContext(PathSequenceContext,i);
    }
};

PathAlternativeContext.prototype.PIPE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Sparql11Parser.PIPE);
    } else {
        return this.getToken(Sparql11Parser.PIPE, i);
    }
};


PathAlternativeContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterPathAlternative(this);
	}
};

PathAlternativeContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitPathAlternative(this);
	}
};




Sparql11Parser.PathAlternativeContext = PathAlternativeContext;

Sparql11Parser.prototype.pathAlternative = function() {

    var localctx = new PathAlternativeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, Sparql11Parser.RULE_pathAlternative);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 923;
        this.pathSequence();
        this.state = 928;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Sparql11Parser.PIPE) {
            this.state = 924;
            this.match(Sparql11Parser.PIPE);
            this.state = 925;
            this.pathSequence();
            this.state = 930;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PathSequenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_pathSequence;
    return this;
}

PathSequenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PathSequenceContext.prototype.constructor = PathSequenceContext;

PathSequenceContext.prototype.pathEltOrInverse = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PathEltOrInverseContext);
    } else {
        return this.getTypedRuleContext(PathEltOrInverseContext,i);
    }
};

PathSequenceContext.prototype.DIVIDE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Sparql11Parser.DIVIDE);
    } else {
        return this.getToken(Sparql11Parser.DIVIDE, i);
    }
};


PathSequenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterPathSequence(this);
	}
};

PathSequenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitPathSequence(this);
	}
};




Sparql11Parser.PathSequenceContext = PathSequenceContext;

Sparql11Parser.prototype.pathSequence = function() {

    var localctx = new PathSequenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, Sparql11Parser.RULE_pathSequence);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 931;
        this.pathEltOrInverse();
        this.state = 936;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Sparql11Parser.DIVIDE) {
            this.state = 932;
            this.match(Sparql11Parser.DIVIDE);
            this.state = 933;
            this.pathEltOrInverse();
            this.state = 938;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PathEltContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_pathElt;
    return this;
}

PathEltContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PathEltContext.prototype.constructor = PathEltContext;

PathEltContext.prototype.pathPrimary = function() {
    return this.getTypedRuleContext(PathPrimaryContext,0);
};

PathEltContext.prototype.pathMod = function() {
    return this.getTypedRuleContext(PathModContext,0);
};

PathEltContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterPathElt(this);
	}
};

PathEltContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitPathElt(this);
	}
};




Sparql11Parser.PathEltContext = PathEltContext;

Sparql11Parser.prototype.pathElt = function() {

    var localctx = new PathEltContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, Sparql11Parser.RULE_pathElt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 939;
        this.pathPrimary();
        this.state = 941;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
        if(la_===1) {
            this.state = 940;
            this.pathMod();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PathEltOrInverseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_pathEltOrInverse;
    return this;
}

PathEltOrInverseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PathEltOrInverseContext.prototype.constructor = PathEltOrInverseContext;

PathEltOrInverseContext.prototype.pathElt = function() {
    return this.getTypedRuleContext(PathEltContext,0);
};

PathEltOrInverseContext.prototype.HAT = function() {
    return this.getToken(Sparql11Parser.HAT, 0);
};

PathEltOrInverseContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterPathEltOrInverse(this);
	}
};

PathEltOrInverseContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitPathEltOrInverse(this);
	}
};




Sparql11Parser.PathEltOrInverseContext = PathEltOrInverseContext;

Sparql11Parser.prototype.pathEltOrInverse = function() {

    var localctx = new PathEltOrInverseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, Sparql11Parser.RULE_pathEltOrInverse);
    try {
        this.state = 946;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.T__48:
        case Sparql11Parser.IRI_REF:
        case Sparql11Parser.PNAME_NS:
        case Sparql11Parser.PNAME_LN:
        case Sparql11Parser.OPEN_BRACE:
        case Sparql11Parser.NOT_SIGN:
            this.enterOuterAlt(localctx, 1);
            this.state = 943;
            this.pathElt();
            break;
        case Sparql11Parser.HAT:
            this.enterOuterAlt(localctx, 2);
            this.state = 944;
            this.match(Sparql11Parser.HAT);
            this.state = 945;
            this.pathElt();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PathModContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_pathMod;
    return this;
}

PathModContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PathModContext.prototype.constructor = PathModContext;

PathModContext.prototype.QUESTION = function() {
    return this.getToken(Sparql11Parser.QUESTION, 0);
};

PathModContext.prototype.ASTERISK = function() {
    return this.getToken(Sparql11Parser.ASTERISK, 0);
};

PathModContext.prototype.PLUS = function() {
    return this.getToken(Sparql11Parser.PLUS, 0);
};

PathModContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterPathMod(this);
	}
};

PathModContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitPathMod(this);
	}
};




Sparql11Parser.PathModContext = PathModContext;

Sparql11Parser.prototype.pathMod = function() {

    var localctx = new PathModContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, Sparql11Parser.RULE_pathMod);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 948;
        _la = this._input.LA(1);
        if(!(((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (Sparql11Parser.ASTERISK - 148)) | (1 << (Sparql11Parser.QUESTION - 148)) | (1 << (Sparql11Parser.PLUS - 148)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PathPrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_pathPrimary;
    return this;
}

PathPrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PathPrimaryContext.prototype.constructor = PathPrimaryContext;

PathPrimaryContext.prototype.iriRef = function() {
    return this.getTypedRuleContext(IriRefContext,0);
};

PathPrimaryContext.prototype.NOT_SIGN = function() {
    return this.getToken(Sparql11Parser.NOT_SIGN, 0);
};

PathPrimaryContext.prototype.pathNegatedPropertySet = function() {
    return this.getTypedRuleContext(PathNegatedPropertySetContext,0);
};

PathPrimaryContext.prototype.OPEN_BRACE = function() {
    return this.getToken(Sparql11Parser.OPEN_BRACE, 0);
};

PathPrimaryContext.prototype.path = function() {
    return this.getTypedRuleContext(PathContext,0);
};

PathPrimaryContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(Sparql11Parser.CLOSE_BRACE, 0);
};

PathPrimaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterPathPrimary(this);
	}
};

PathPrimaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitPathPrimary(this);
	}
};




Sparql11Parser.PathPrimaryContext = PathPrimaryContext;

Sparql11Parser.prototype.pathPrimary = function() {

    var localctx = new PathPrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, Sparql11Parser.RULE_pathPrimary);
    try {
        this.state = 958;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.IRI_REF:
        case Sparql11Parser.PNAME_NS:
        case Sparql11Parser.PNAME_LN:
            this.enterOuterAlt(localctx, 1);
            this.state = 950;
            this.iriRef();
            break;
        case Sparql11Parser.T__48:
            this.enterOuterAlt(localctx, 2);
            this.state = 951;
            this.match(Sparql11Parser.T__48);
            break;
        case Sparql11Parser.NOT_SIGN:
            this.enterOuterAlt(localctx, 3);
            this.state = 952;
            this.match(Sparql11Parser.NOT_SIGN);
            this.state = 953;
            this.pathNegatedPropertySet();
            break;
        case Sparql11Parser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 4);
            this.state = 954;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 955;
            this.path();
            this.state = 956;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PathNegatedPropertySetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_pathNegatedPropertySet;
    return this;
}

PathNegatedPropertySetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PathNegatedPropertySetContext.prototype.constructor = PathNegatedPropertySetContext;

PathNegatedPropertySetContext.prototype.pathOneInPropertySet = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PathOneInPropertySetContext);
    } else {
        return this.getTypedRuleContext(PathOneInPropertySetContext,i);
    }
};

PathNegatedPropertySetContext.prototype.OPEN_BRACE = function() {
    return this.getToken(Sparql11Parser.OPEN_BRACE, 0);
};

PathNegatedPropertySetContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(Sparql11Parser.CLOSE_BRACE, 0);
};

PathNegatedPropertySetContext.prototype.PIPE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Sparql11Parser.PIPE);
    } else {
        return this.getToken(Sparql11Parser.PIPE, i);
    }
};


PathNegatedPropertySetContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterPathNegatedPropertySet(this);
	}
};

PathNegatedPropertySetContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitPathNegatedPropertySet(this);
	}
};




Sparql11Parser.PathNegatedPropertySetContext = PathNegatedPropertySetContext;

Sparql11Parser.prototype.pathNegatedPropertySet = function() {

    var localctx = new PathNegatedPropertySetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, Sparql11Parser.RULE_pathNegatedPropertySet);
    var _la = 0; // Token type
    try {
        this.state = 973;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.T__48:
        case Sparql11Parser.IRI_REF:
        case Sparql11Parser.PNAME_NS:
        case Sparql11Parser.PNAME_LN:
        case Sparql11Parser.HAT:
            this.enterOuterAlt(localctx, 1);
            this.state = 960;
            this.pathOneInPropertySet();
            break;
        case Sparql11Parser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 961;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 970;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Sparql11Parser.T__48 || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (Sparql11Parser.IRI_REF - 115)) | (1 << (Sparql11Parser.PNAME_NS - 115)) | (1 << (Sparql11Parser.PNAME_LN - 115)))) !== 0) || _la===Sparql11Parser.HAT) {
                this.state = 962;
                this.pathOneInPropertySet();
                this.state = 967;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===Sparql11Parser.PIPE) {
                    this.state = 963;
                    this.match(Sparql11Parser.PIPE);
                    this.state = 964;
                    this.pathOneInPropertySet();
                    this.state = 969;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 972;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PathOneInPropertySetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_pathOneInPropertySet;
    return this;
}

PathOneInPropertySetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PathOneInPropertySetContext.prototype.constructor = PathOneInPropertySetContext;

PathOneInPropertySetContext.prototype.iriRef = function() {
    return this.getTypedRuleContext(IriRefContext,0);
};

PathOneInPropertySetContext.prototype.HAT = function() {
    return this.getToken(Sparql11Parser.HAT, 0);
};

PathOneInPropertySetContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterPathOneInPropertySet(this);
	}
};

PathOneInPropertySetContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitPathOneInPropertySet(this);
	}
};




Sparql11Parser.PathOneInPropertySetContext = PathOneInPropertySetContext;

Sparql11Parser.prototype.pathOneInPropertySet = function() {

    var localctx = new PathOneInPropertySetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, Sparql11Parser.RULE_pathOneInPropertySet);
    try {
        this.state = 982;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.IRI_REF:
        case Sparql11Parser.PNAME_NS:
        case Sparql11Parser.PNAME_LN:
            this.enterOuterAlt(localctx, 1);
            this.state = 975;
            this.iriRef();
            break;
        case Sparql11Parser.T__48:
            this.enterOuterAlt(localctx, 2);
            this.state = 976;
            this.match(Sparql11Parser.T__48);
            break;
        case Sparql11Parser.HAT:
            this.enterOuterAlt(localctx, 3);
            this.state = 977;
            this.match(Sparql11Parser.HAT);
            this.state = 980;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case Sparql11Parser.IRI_REF:
            case Sparql11Parser.PNAME_NS:
            case Sparql11Parser.PNAME_LN:
                this.state = 978;
                this.iriRef();
                break;
            case Sparql11Parser.T__48:
                this.state = 979;
                this.match(Sparql11Parser.T__48);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IntegerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_integer;
    return this;
}

IntegerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntegerContext.prototype.constructor = IntegerContext;

IntegerContext.prototype.INTEGER = function() {
    return this.getToken(Sparql11Parser.INTEGER, 0);
};

IntegerContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterInteger(this);
	}
};

IntegerContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitInteger(this);
	}
};




Sparql11Parser.IntegerContext = IntegerContext;

Sparql11Parser.prototype.integer = function() {

    var localctx = new IntegerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, Sparql11Parser.RULE_integer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 984;
        this.match(Sparql11Parser.INTEGER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TriplesNodeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_triplesNode;
    return this;
}

TriplesNodeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriplesNodeContext.prototype.constructor = TriplesNodeContext;

TriplesNodeContext.prototype.collection = function() {
    return this.getTypedRuleContext(CollectionContext,0);
};

TriplesNodeContext.prototype.blankNodePropertyList = function() {
    return this.getTypedRuleContext(BlankNodePropertyListContext,0);
};

TriplesNodeContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterTriplesNode(this);
	}
};

TriplesNodeContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitTriplesNode(this);
	}
};




Sparql11Parser.TriplesNodeContext = TriplesNodeContext;

Sparql11Parser.prototype.triplesNode = function() {

    var localctx = new TriplesNodeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, Sparql11Parser.RULE_triplesNode);
    try {
        this.state = 988;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 986;
            this.collection();
            break;
        case Sparql11Parser.OPEN_SQUARE_BRACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 987;
            this.blankNodePropertyList();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlankNodePropertyListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_blankNodePropertyList;
    return this;
}

BlankNodePropertyListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlankNodePropertyListContext.prototype.constructor = BlankNodePropertyListContext;

BlankNodePropertyListContext.prototype.OPEN_SQUARE_BRACE = function() {
    return this.getToken(Sparql11Parser.OPEN_SQUARE_BRACE, 0);
};

BlankNodePropertyListContext.prototype.propertyListNotEmpty = function() {
    return this.getTypedRuleContext(PropertyListNotEmptyContext,0);
};

BlankNodePropertyListContext.prototype.CLOSE_SQUARE_BRACE = function() {
    return this.getToken(Sparql11Parser.CLOSE_SQUARE_BRACE, 0);
};

BlankNodePropertyListContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterBlankNodePropertyList(this);
	}
};

BlankNodePropertyListContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitBlankNodePropertyList(this);
	}
};




Sparql11Parser.BlankNodePropertyListContext = BlankNodePropertyListContext;

Sparql11Parser.prototype.blankNodePropertyList = function() {

    var localctx = new BlankNodePropertyListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, Sparql11Parser.RULE_blankNodePropertyList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 990;
        this.match(Sparql11Parser.OPEN_SQUARE_BRACE);
        this.state = 991;
        this.propertyListNotEmpty();
        this.state = 992;
        this.match(Sparql11Parser.CLOSE_SQUARE_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TriplesNodePathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_triplesNodePath;
    return this;
}

TriplesNodePathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriplesNodePathContext.prototype.constructor = TriplesNodePathContext;

TriplesNodePathContext.prototype.collectionPath = function() {
    return this.getTypedRuleContext(CollectionPathContext,0);
};

TriplesNodePathContext.prototype.blankNodePropertyListPath = function() {
    return this.getTypedRuleContext(BlankNodePropertyListPathContext,0);
};

TriplesNodePathContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterTriplesNodePath(this);
	}
};

TriplesNodePathContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitTriplesNodePath(this);
	}
};




Sparql11Parser.TriplesNodePathContext = TriplesNodePathContext;

Sparql11Parser.prototype.triplesNodePath = function() {

    var localctx = new TriplesNodePathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, Sparql11Parser.RULE_triplesNodePath);
    try {
        this.state = 996;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 994;
            this.collectionPath();
            break;
        case Sparql11Parser.OPEN_SQUARE_BRACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 995;
            this.blankNodePropertyListPath();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlankNodePropertyListPathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_blankNodePropertyListPath;
    return this;
}

BlankNodePropertyListPathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlankNodePropertyListPathContext.prototype.constructor = BlankNodePropertyListPathContext;

BlankNodePropertyListPathContext.prototype.OPEN_SQUARE_BRACE = function() {
    return this.getToken(Sparql11Parser.OPEN_SQUARE_BRACE, 0);
};

BlankNodePropertyListPathContext.prototype.propertyListPathNotEmpty = function() {
    return this.getTypedRuleContext(PropertyListPathNotEmptyContext,0);
};

BlankNodePropertyListPathContext.prototype.CLOSE_SQUARE_BRACE = function() {
    return this.getToken(Sparql11Parser.CLOSE_SQUARE_BRACE, 0);
};

BlankNodePropertyListPathContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterBlankNodePropertyListPath(this);
	}
};

BlankNodePropertyListPathContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitBlankNodePropertyListPath(this);
	}
};




Sparql11Parser.BlankNodePropertyListPathContext = BlankNodePropertyListPathContext;

Sparql11Parser.prototype.blankNodePropertyListPath = function() {

    var localctx = new BlankNodePropertyListPathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, Sparql11Parser.RULE_blankNodePropertyListPath);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 998;
        this.match(Sparql11Parser.OPEN_SQUARE_BRACE);
        this.state = 999;
        this.propertyListPathNotEmpty();
        this.state = 1000;
        this.match(Sparql11Parser.CLOSE_SQUARE_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CollectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_collection;
    return this;
}

CollectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CollectionContext.prototype.constructor = CollectionContext;

CollectionContext.prototype.OPEN_BRACE = function() {
    return this.getToken(Sparql11Parser.OPEN_BRACE, 0);
};

CollectionContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(Sparql11Parser.CLOSE_BRACE, 0);
};

CollectionContext.prototype.graphNode = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GraphNodeContext);
    } else {
        return this.getTypedRuleContext(GraphNodeContext,i);
    }
};

CollectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterCollection(this);
	}
};

CollectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitCollection(this);
	}
};




Sparql11Parser.CollectionContext = CollectionContext;

Sparql11Parser.prototype.collection = function() {

    var localctx = new CollectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, Sparql11Parser.RULE_collection);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1002;
        this.match(Sparql11Parser.OPEN_BRACE);
        this.state = 1004; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1003;
            this.graphNode();
            this.state = 1006; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (Sparql11Parser.T__112 - 113)) | (1 << (Sparql11Parser.T__113 - 113)) | (1 << (Sparql11Parser.IRI_REF - 113)) | (1 << (Sparql11Parser.PNAME_NS - 113)) | (1 << (Sparql11Parser.PNAME_LN - 113)) | (1 << (Sparql11Parser.BLANK_NODE_LABEL - 113)) | (1 << (Sparql11Parser.INTEGER - 113)) | (1 << (Sparql11Parser.DECIMAL - 113)) | (1 << (Sparql11Parser.DOUBLE - 113)) | (1 << (Sparql11Parser.INTEGER_POSITIVE - 113)) | (1 << (Sparql11Parser.DECIMAL_POSITIVE - 113)) | (1 << (Sparql11Parser.DOUBLE_POSITIVE - 113)) | (1 << (Sparql11Parser.INTEGER_NEGATIVE - 113)) | (1 << (Sparql11Parser.DECIMAL_NEGATIVE - 113)) | (1 << (Sparql11Parser.DOUBLE_NEGATIVE - 113)) | (1 << (Sparql11Parser.STRING_LITERAL1 - 113)) | (1 << (Sparql11Parser.STRING_LITERAL2 - 113)) | (1 << (Sparql11Parser.STRING_LITERAL_LONG1 - 113)) | (1 << (Sparql11Parser.STRING_LITERAL_LONG2 - 113)) | (1 << (Sparql11Parser.OPEN_BRACE - 113)))) !== 0) || ((((_la - 149)) & ~0x1f) == 0 && ((1 << (_la - 149)) & ((1 << (Sparql11Parser.QUESTION - 149)) | (1 << (Sparql11Parser.DOLLAR - 149)) | (1 << (Sparql11Parser.OPEN_SQUARE_BRACE - 149)))) !== 0));
        this.state = 1008;
        this.match(Sparql11Parser.CLOSE_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CollectionPathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_collectionPath;
    return this;
}

CollectionPathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CollectionPathContext.prototype.constructor = CollectionPathContext;

CollectionPathContext.prototype.OPEN_BRACE = function() {
    return this.getToken(Sparql11Parser.OPEN_BRACE, 0);
};

CollectionPathContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(Sparql11Parser.CLOSE_BRACE, 0);
};

CollectionPathContext.prototype.graphNodePath = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GraphNodePathContext);
    } else {
        return this.getTypedRuleContext(GraphNodePathContext,i);
    }
};

CollectionPathContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterCollectionPath(this);
	}
};

CollectionPathContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitCollectionPath(this);
	}
};




Sparql11Parser.CollectionPathContext = CollectionPathContext;

Sparql11Parser.prototype.collectionPath = function() {

    var localctx = new CollectionPathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, Sparql11Parser.RULE_collectionPath);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1010;
        this.match(Sparql11Parser.OPEN_BRACE);
        this.state = 1012; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1011;
            this.graphNodePath();
            this.state = 1014; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (Sparql11Parser.T__112 - 113)) | (1 << (Sparql11Parser.T__113 - 113)) | (1 << (Sparql11Parser.IRI_REF - 113)) | (1 << (Sparql11Parser.PNAME_NS - 113)) | (1 << (Sparql11Parser.PNAME_LN - 113)) | (1 << (Sparql11Parser.BLANK_NODE_LABEL - 113)) | (1 << (Sparql11Parser.INTEGER - 113)) | (1 << (Sparql11Parser.DECIMAL - 113)) | (1 << (Sparql11Parser.DOUBLE - 113)) | (1 << (Sparql11Parser.INTEGER_POSITIVE - 113)) | (1 << (Sparql11Parser.DECIMAL_POSITIVE - 113)) | (1 << (Sparql11Parser.DOUBLE_POSITIVE - 113)) | (1 << (Sparql11Parser.INTEGER_NEGATIVE - 113)) | (1 << (Sparql11Parser.DECIMAL_NEGATIVE - 113)) | (1 << (Sparql11Parser.DOUBLE_NEGATIVE - 113)) | (1 << (Sparql11Parser.STRING_LITERAL1 - 113)) | (1 << (Sparql11Parser.STRING_LITERAL2 - 113)) | (1 << (Sparql11Parser.STRING_LITERAL_LONG1 - 113)) | (1 << (Sparql11Parser.STRING_LITERAL_LONG2 - 113)) | (1 << (Sparql11Parser.OPEN_BRACE - 113)))) !== 0) || ((((_la - 149)) & ~0x1f) == 0 && ((1 << (_la - 149)) & ((1 << (Sparql11Parser.QUESTION - 149)) | (1 << (Sparql11Parser.DOLLAR - 149)) | (1 << (Sparql11Parser.OPEN_SQUARE_BRACE - 149)))) !== 0));
        this.state = 1016;
        this.match(Sparql11Parser.CLOSE_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GraphNodeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_graphNode;
    return this;
}

GraphNodeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GraphNodeContext.prototype.constructor = GraphNodeContext;

GraphNodeContext.prototype.varOrTerm = function() {
    return this.getTypedRuleContext(VarOrTermContext,0);
};

GraphNodeContext.prototype.triplesNode = function() {
    return this.getTypedRuleContext(TriplesNodeContext,0);
};

GraphNodeContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterGraphNode(this);
	}
};

GraphNodeContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitGraphNode(this);
	}
};




Sparql11Parser.GraphNodeContext = GraphNodeContext;

Sparql11Parser.prototype.graphNode = function() {

    var localctx = new GraphNodeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, Sparql11Parser.RULE_graphNode);
    try {
        this.state = 1020;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1018;
            this.varOrTerm();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1019;
            this.triplesNode();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GraphNodePathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_graphNodePath;
    return this;
}

GraphNodePathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GraphNodePathContext.prototype.constructor = GraphNodePathContext;

GraphNodePathContext.prototype.varOrTerm = function() {
    return this.getTypedRuleContext(VarOrTermContext,0);
};

GraphNodePathContext.prototype.triplesNodePath = function() {
    return this.getTypedRuleContext(TriplesNodePathContext,0);
};

GraphNodePathContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterGraphNodePath(this);
	}
};

GraphNodePathContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitGraphNodePath(this);
	}
};




Sparql11Parser.GraphNodePathContext = GraphNodePathContext;

Sparql11Parser.prototype.graphNodePath = function() {

    var localctx = new GraphNodePathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, Sparql11Parser.RULE_graphNodePath);
    try {
        this.state = 1024;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1022;
            this.varOrTerm();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1023;
            this.triplesNodePath();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VarOrTermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_varOrTerm;
    return this;
}

VarOrTermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarOrTermContext.prototype.constructor = VarOrTermContext;

VarOrTermContext.prototype.var = function() {
    return this.getTypedRuleContext(VarContext,0);
};

VarOrTermContext.prototype.graphTerm = function() {
    return this.getTypedRuleContext(GraphTermContext,0);
};

VarOrTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterVarOrTerm(this);
	}
};

VarOrTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitVarOrTerm(this);
	}
};




Sparql11Parser.VarOrTermContext = VarOrTermContext;

Sparql11Parser.prototype.varOrTerm = function() {

    var localctx = new VarOrTermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, Sparql11Parser.RULE_varOrTerm);
    try {
        this.state = 1028;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.QUESTION:
        case Sparql11Parser.DOLLAR:
            this.enterOuterAlt(localctx, 1);
            this.state = 1026;
            this.var();
            break;
        case Sparql11Parser.T__112:
        case Sparql11Parser.T__113:
        case Sparql11Parser.IRI_REF:
        case Sparql11Parser.PNAME_NS:
        case Sparql11Parser.PNAME_LN:
        case Sparql11Parser.BLANK_NODE_LABEL:
        case Sparql11Parser.INTEGER:
        case Sparql11Parser.DECIMAL:
        case Sparql11Parser.DOUBLE:
        case Sparql11Parser.INTEGER_POSITIVE:
        case Sparql11Parser.DECIMAL_POSITIVE:
        case Sparql11Parser.DOUBLE_POSITIVE:
        case Sparql11Parser.INTEGER_NEGATIVE:
        case Sparql11Parser.DECIMAL_NEGATIVE:
        case Sparql11Parser.DOUBLE_NEGATIVE:
        case Sparql11Parser.STRING_LITERAL1:
        case Sparql11Parser.STRING_LITERAL2:
        case Sparql11Parser.STRING_LITERAL_LONG1:
        case Sparql11Parser.STRING_LITERAL_LONG2:
        case Sparql11Parser.OPEN_BRACE:
        case Sparql11Parser.OPEN_SQUARE_BRACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1027;
            this.graphTerm();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VarOrIriRefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_varOrIriRef;
    return this;
}

VarOrIriRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarOrIriRefContext.prototype.constructor = VarOrIriRefContext;

VarOrIriRefContext.prototype.var = function() {
    return this.getTypedRuleContext(VarContext,0);
};

VarOrIriRefContext.prototype.iriRef = function() {
    return this.getTypedRuleContext(IriRefContext,0);
};

VarOrIriRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterVarOrIriRef(this);
	}
};

VarOrIriRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitVarOrIriRef(this);
	}
};




Sparql11Parser.VarOrIriRefContext = VarOrIriRefContext;

Sparql11Parser.prototype.varOrIriRef = function() {

    var localctx = new VarOrIriRefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, Sparql11Parser.RULE_varOrIriRef);
    try {
        this.state = 1032;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.QUESTION:
        case Sparql11Parser.DOLLAR:
            this.enterOuterAlt(localctx, 1);
            this.state = 1030;
            this.var();
            break;
        case Sparql11Parser.IRI_REF:
        case Sparql11Parser.PNAME_NS:
        case Sparql11Parser.PNAME_LN:
            this.enterOuterAlt(localctx, 2);
            this.state = 1031;
            this.iriRef();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VarContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_var;
    return this;
}

VarContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarContext.prototype.constructor = VarContext;

VarContext.prototype.var1 = function() {
    return this.getTypedRuleContext(Var1Context,0);
};

VarContext.prototype.var2 = function() {
    return this.getTypedRuleContext(Var2Context,0);
};

VarContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterVar(this);
	}
};

VarContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitVar(this);
	}
};




Sparql11Parser.VarContext = VarContext;

Sparql11Parser.prototype.var = function() {

    var localctx = new VarContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, Sparql11Parser.RULE_var);
    try {
        this.state = 1036;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.QUESTION:
            this.enterOuterAlt(localctx, 1);
            this.state = 1034;
            this.var1();
            break;
        case Sparql11Parser.DOLLAR:
            this.enterOuterAlt(localctx, 2);
            this.state = 1035;
            this.var2();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GraphTermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_graphTerm;
    return this;
}

GraphTermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GraphTermContext.prototype.constructor = GraphTermContext;

GraphTermContext.prototype.iriRef = function() {
    return this.getTypedRuleContext(IriRefContext,0);
};

GraphTermContext.prototype.rdfLiteral = function() {
    return this.getTypedRuleContext(RdfLiteralContext,0);
};

GraphTermContext.prototype.numericLiteral = function() {
    return this.getTypedRuleContext(NumericLiteralContext,0);
};

GraphTermContext.prototype.booleanLiteral = function() {
    return this.getTypedRuleContext(BooleanLiteralContext,0);
};

GraphTermContext.prototype.blankNode = function() {
    return this.getTypedRuleContext(BlankNodeContext,0);
};

GraphTermContext.prototype.nil = function() {
    return this.getTypedRuleContext(NilContext,0);
};

GraphTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterGraphTerm(this);
	}
};

GraphTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitGraphTerm(this);
	}
};




Sparql11Parser.GraphTermContext = GraphTermContext;

Sparql11Parser.prototype.graphTerm = function() {

    var localctx = new GraphTermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, Sparql11Parser.RULE_graphTerm);
    try {
        this.state = 1044;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.IRI_REF:
        case Sparql11Parser.PNAME_NS:
        case Sparql11Parser.PNAME_LN:
            this.enterOuterAlt(localctx, 1);
            this.state = 1038;
            this.iriRef();
            break;
        case Sparql11Parser.STRING_LITERAL1:
        case Sparql11Parser.STRING_LITERAL2:
        case Sparql11Parser.STRING_LITERAL_LONG1:
        case Sparql11Parser.STRING_LITERAL_LONG2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1039;
            this.rdfLiteral();
            break;
        case Sparql11Parser.INTEGER:
        case Sparql11Parser.DECIMAL:
        case Sparql11Parser.DOUBLE:
        case Sparql11Parser.INTEGER_POSITIVE:
        case Sparql11Parser.DECIMAL_POSITIVE:
        case Sparql11Parser.DOUBLE_POSITIVE:
        case Sparql11Parser.INTEGER_NEGATIVE:
        case Sparql11Parser.DECIMAL_NEGATIVE:
        case Sparql11Parser.DOUBLE_NEGATIVE:
            this.enterOuterAlt(localctx, 3);
            this.state = 1040;
            this.numericLiteral();
            break;
        case Sparql11Parser.T__112:
        case Sparql11Parser.T__113:
            this.enterOuterAlt(localctx, 4);
            this.state = 1041;
            this.booleanLiteral();
            break;
        case Sparql11Parser.BLANK_NODE_LABEL:
        case Sparql11Parser.OPEN_SQUARE_BRACE:
            this.enterOuterAlt(localctx, 5);
            this.state = 1042;
            this.blankNode();
            break;
        case Sparql11Parser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 6);
            this.state = 1043;
            this.nil();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.conditionalOrExpression = function() {
    return this.getTypedRuleContext(ConditionalOrExpressionContext,0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitExpression(this);
	}
};




Sparql11Parser.ExpressionContext = ExpressionContext;

Sparql11Parser.prototype.expression = function() {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, Sparql11Parser.RULE_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1046;
        this.conditionalOrExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConditionalOrExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_conditionalOrExpression;
    return this;
}

ConditionalOrExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionalOrExpressionContext.prototype.constructor = ConditionalOrExpressionContext;

ConditionalOrExpressionContext.prototype.conditionalAndExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConditionalAndExpressionContext);
    } else {
        return this.getTypedRuleContext(ConditionalAndExpressionContext,i);
    }
};

ConditionalOrExpressionContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Sparql11Parser.OR);
    } else {
        return this.getToken(Sparql11Parser.OR, i);
    }
};


ConditionalOrExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterConditionalOrExpression(this);
	}
};

ConditionalOrExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitConditionalOrExpression(this);
	}
};




Sparql11Parser.ConditionalOrExpressionContext = ConditionalOrExpressionContext;

Sparql11Parser.prototype.conditionalOrExpression = function() {

    var localctx = new ConditionalOrExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, Sparql11Parser.RULE_conditionalOrExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1048;
        this.conditionalAndExpression();
        this.state = 1053;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Sparql11Parser.OR) {
            this.state = 1049;
            this.match(Sparql11Parser.OR);
            this.state = 1050;
            this.conditionalAndExpression();
            this.state = 1055;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConditionalAndExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_conditionalAndExpression;
    return this;
}

ConditionalAndExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionalAndExpressionContext.prototype.constructor = ConditionalAndExpressionContext;

ConditionalAndExpressionContext.prototype.valueLogical = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueLogicalContext);
    } else {
        return this.getTypedRuleContext(ValueLogicalContext,i);
    }
};

ConditionalAndExpressionContext.prototype.AND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Sparql11Parser.AND);
    } else {
        return this.getToken(Sparql11Parser.AND, i);
    }
};


ConditionalAndExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterConditionalAndExpression(this);
	}
};

ConditionalAndExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitConditionalAndExpression(this);
	}
};




Sparql11Parser.ConditionalAndExpressionContext = ConditionalAndExpressionContext;

Sparql11Parser.prototype.conditionalAndExpression = function() {

    var localctx = new ConditionalAndExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, Sparql11Parser.RULE_conditionalAndExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1056;
        this.valueLogical();
        this.state = 1061;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Sparql11Parser.AND) {
            this.state = 1057;
            this.match(Sparql11Parser.AND);
            this.state = 1058;
            this.valueLogical();
            this.state = 1063;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ValueLogicalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_valueLogical;
    return this;
}

ValueLogicalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueLogicalContext.prototype.constructor = ValueLogicalContext;

ValueLogicalContext.prototype.relationalExpression = function() {
    return this.getTypedRuleContext(RelationalExpressionContext,0);
};

ValueLogicalContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterValueLogical(this);
	}
};

ValueLogicalContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitValueLogical(this);
	}
};




Sparql11Parser.ValueLogicalContext = ValueLogicalContext;

Sparql11Parser.prototype.valueLogical = function() {

    var localctx = new ValueLogicalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, Sparql11Parser.RULE_valueLogical);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1064;
        this.relationalExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationalExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_relationalExpression;
    return this;
}

RelationalExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationalExpressionContext.prototype.constructor = RelationalExpressionContext;

RelationalExpressionContext.prototype.numericExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NumericExpressionContext);
    } else {
        return this.getTypedRuleContext(NumericExpressionContext,i);
    }
};

RelationalExpressionContext.prototype.EQUAL = function() {
    return this.getToken(Sparql11Parser.EQUAL, 0);
};

RelationalExpressionContext.prototype.NOT_EQUAL = function() {
    return this.getToken(Sparql11Parser.NOT_EQUAL, 0);
};

RelationalExpressionContext.prototype.LESS = function() {
    return this.getToken(Sparql11Parser.LESS, 0);
};

RelationalExpressionContext.prototype.GREATER = function() {
    return this.getToken(Sparql11Parser.GREATER, 0);
};

RelationalExpressionContext.prototype.LESS_EQUAL = function() {
    return this.getToken(Sparql11Parser.LESS_EQUAL, 0);
};

RelationalExpressionContext.prototype.GREATER_EQUAL = function() {
    return this.getToken(Sparql11Parser.GREATER_EQUAL, 0);
};

RelationalExpressionContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

RelationalExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterRelationalExpression(this);
	}
};

RelationalExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitRelationalExpression(this);
	}
};




Sparql11Parser.RelationalExpressionContext = RelationalExpressionContext;

Sparql11Parser.prototype.relationalExpression = function() {

    var localctx = new RelationalExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, Sparql11Parser.RULE_relationalExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1066;
        this.numericExpression();
        this.state = 1084;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case Sparql11Parser.EQUAL:
        	this.state = 1067;
        	this.match(Sparql11Parser.EQUAL);
        	this.state = 1068;
        	this.numericExpression();
        	break;
        case Sparql11Parser.NOT_EQUAL:
        	this.state = 1069;
        	this.match(Sparql11Parser.NOT_EQUAL);
        	this.state = 1070;
        	this.numericExpression();
        	break;
        case Sparql11Parser.LESS:
        	this.state = 1071;
        	this.match(Sparql11Parser.LESS);
        	this.state = 1072;
        	this.numericExpression();
        	break;
        case Sparql11Parser.GREATER:
        	this.state = 1073;
        	this.match(Sparql11Parser.GREATER);
        	this.state = 1074;
        	this.numericExpression();
        	break;
        case Sparql11Parser.LESS_EQUAL:
        	this.state = 1075;
        	this.match(Sparql11Parser.LESS_EQUAL);
        	this.state = 1076;
        	this.numericExpression();
        	break;
        case Sparql11Parser.GREATER_EQUAL:
        	this.state = 1077;
        	this.match(Sparql11Parser.GREATER_EQUAL);
        	this.state = 1078;
        	this.numericExpression();
        	break;
        case Sparql11Parser.T__49:
        	this.state = 1079;
        	this.match(Sparql11Parser.T__49);
        	this.state = 1080;
        	this.expressionList();
        	break;
        case Sparql11Parser.T__50:
        	this.state = 1081;
        	this.match(Sparql11Parser.T__50);
        	this.state = 1082;
        	this.match(Sparql11Parser.T__49);
        	this.state = 1083;
        	this.expressionList();
        	break;
        case Sparql11Parser.T__5:
        case Sparql11Parser.CLOSE_BRACE:
        case Sparql11Parser.COMMA:
        case Sparql11Parser.SEMICOLON:
        case Sparql11Parser.OR:
        case Sparql11Parser.AND:
        	break;
        default:
        	throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumericExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_numericExpression;
    return this;
}

NumericExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumericExpressionContext.prototype.constructor = NumericExpressionContext;

NumericExpressionContext.prototype.additiveExpression = function() {
    return this.getTypedRuleContext(AdditiveExpressionContext,0);
};

NumericExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterNumericExpression(this);
	}
};

NumericExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitNumericExpression(this);
	}
};




Sparql11Parser.NumericExpressionContext = NumericExpressionContext;

Sparql11Parser.prototype.numericExpression = function() {

    var localctx = new NumericExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, Sparql11Parser.RULE_numericExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1086;
        this.additiveExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AdditiveExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_additiveExpression;
    return this;
}

AdditiveExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AdditiveExpressionContext.prototype.constructor = AdditiveExpressionContext;

AdditiveExpressionContext.prototype.multiplicativeExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MultiplicativeExpressionContext);
    } else {
        return this.getTypedRuleContext(MultiplicativeExpressionContext,i);
    }
};

AdditiveExpressionContext.prototype.PLUS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Sparql11Parser.PLUS);
    } else {
        return this.getToken(Sparql11Parser.PLUS, i);
    }
};


AdditiveExpressionContext.prototype.numericLiteralPositive = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NumericLiteralPositiveContext);
    } else {
        return this.getTypedRuleContext(NumericLiteralPositiveContext,i);
    }
};

AdditiveExpressionContext.prototype.numericLiteralNegative = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NumericLiteralNegativeContext);
    } else {
        return this.getTypedRuleContext(NumericLiteralNegativeContext,i);
    }
};

AdditiveExpressionContext.prototype.ASTERISK = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Sparql11Parser.ASTERISK);
    } else {
        return this.getToken(Sparql11Parser.ASTERISK, i);
    }
};


AdditiveExpressionContext.prototype.unaryExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UnaryExpressionContext);
    } else {
        return this.getTypedRuleContext(UnaryExpressionContext,i);
    }
};

AdditiveExpressionContext.prototype.DIVIDE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Sparql11Parser.DIVIDE);
    } else {
        return this.getToken(Sparql11Parser.DIVIDE, i);
    }
};


AdditiveExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterAdditiveExpression(this);
	}
};

AdditiveExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitAdditiveExpression(this);
	}
};




Sparql11Parser.AdditiveExpressionContext = AdditiveExpressionContext;

Sparql11Parser.prototype.additiveExpression = function() {

    var localctx = new AdditiveExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, Sparql11Parser.RULE_additiveExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1088;
        this.multiplicativeExpression();
        this.state = 1108;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Sparql11Parser.T__45 || ((((_la - 123)) & ~0x1f) == 0 && ((1 << (_la - 123)) & ((1 << (Sparql11Parser.INTEGER_POSITIVE - 123)) | (1 << (Sparql11Parser.DECIMAL_POSITIVE - 123)) | (1 << (Sparql11Parser.DOUBLE_POSITIVE - 123)) | (1 << (Sparql11Parser.INTEGER_NEGATIVE - 123)) | (1 << (Sparql11Parser.DECIMAL_NEGATIVE - 123)) | (1 << (Sparql11Parser.DOUBLE_NEGATIVE - 123)))) !== 0) || _la===Sparql11Parser.PLUS) {
            this.state = 1106;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case Sparql11Parser.PLUS:
                this.state = 1089;
                this.match(Sparql11Parser.PLUS);
                this.state = 1090;
                this.multiplicativeExpression();
                break;
            case Sparql11Parser.T__45:
                this.state = 1091;
                this.match(Sparql11Parser.T__45);
                this.state = 1092;
                this.multiplicativeExpression();
                break;
            case Sparql11Parser.INTEGER_POSITIVE:
            case Sparql11Parser.DECIMAL_POSITIVE:
            case Sparql11Parser.DOUBLE_POSITIVE:
            case Sparql11Parser.INTEGER_NEGATIVE:
            case Sparql11Parser.DECIMAL_NEGATIVE:
            case Sparql11Parser.DOUBLE_NEGATIVE:
                this.state = 1095;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case Sparql11Parser.INTEGER_POSITIVE:
                case Sparql11Parser.DECIMAL_POSITIVE:
                case Sparql11Parser.DOUBLE_POSITIVE:
                    this.state = 1093;
                    this.numericLiteralPositive();
                    break;
                case Sparql11Parser.INTEGER_NEGATIVE:
                case Sparql11Parser.DECIMAL_NEGATIVE:
                case Sparql11Parser.DOUBLE_NEGATIVE:
                    this.state = 1094;
                    this.numericLiteralNegative();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 1103;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===Sparql11Parser.ASTERISK || _la===Sparql11Parser.DIVIDE) {
                    this.state = 1101;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case Sparql11Parser.ASTERISK:
                        this.state = 1097;
                        this.match(Sparql11Parser.ASTERISK);
                        this.state = 1098;
                        this.unaryExpression();
                        break;
                    case Sparql11Parser.DIVIDE:
                        this.state = 1099;
                        this.match(Sparql11Parser.DIVIDE);
                        this.state = 1100;
                        this.unaryExpression();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    this.state = 1105;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1110;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MultiplicativeExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_multiplicativeExpression;
    return this;
}

MultiplicativeExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiplicativeExpressionContext.prototype.constructor = MultiplicativeExpressionContext;

MultiplicativeExpressionContext.prototype.unaryExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UnaryExpressionContext);
    } else {
        return this.getTypedRuleContext(UnaryExpressionContext,i);
    }
};

MultiplicativeExpressionContext.prototype.ASTERISK = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Sparql11Parser.ASTERISK);
    } else {
        return this.getToken(Sparql11Parser.ASTERISK, i);
    }
};


MultiplicativeExpressionContext.prototype.DIVIDE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Sparql11Parser.DIVIDE);
    } else {
        return this.getToken(Sparql11Parser.DIVIDE, i);
    }
};


MultiplicativeExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterMultiplicativeExpression(this);
	}
};

MultiplicativeExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitMultiplicativeExpression(this);
	}
};




Sparql11Parser.MultiplicativeExpressionContext = MultiplicativeExpressionContext;

Sparql11Parser.prototype.multiplicativeExpression = function() {

    var localctx = new MultiplicativeExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, Sparql11Parser.RULE_multiplicativeExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1111;
        this.unaryExpression();
        this.state = 1118;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Sparql11Parser.ASTERISK || _la===Sparql11Parser.DIVIDE) {
            this.state = 1116;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case Sparql11Parser.ASTERISK:
                this.state = 1112;
                this.match(Sparql11Parser.ASTERISK);
                this.state = 1113;
                this.unaryExpression();
                break;
            case Sparql11Parser.DIVIDE:
                this.state = 1114;
                this.match(Sparql11Parser.DIVIDE);
                this.state = 1115;
                this.unaryExpression();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1120;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_unaryExpression;
    return this;
}

UnaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryExpressionContext.prototype.constructor = UnaryExpressionContext;

UnaryExpressionContext.prototype.NOT_SIGN = function() {
    return this.getToken(Sparql11Parser.NOT_SIGN, 0);
};

UnaryExpressionContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};

UnaryExpressionContext.prototype.PLUS = function() {
    return this.getToken(Sparql11Parser.PLUS, 0);
};

UnaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterUnaryExpression(this);
	}
};

UnaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitUnaryExpression(this);
	}
};




Sparql11Parser.UnaryExpressionContext = UnaryExpressionContext;

Sparql11Parser.prototype.unaryExpression = function() {

    var localctx = new UnaryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, Sparql11Parser.RULE_unaryExpression);
    try {
        this.state = 1128;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.NOT_SIGN:
            this.enterOuterAlt(localctx, 1);
            this.state = 1121;
            this.match(Sparql11Parser.NOT_SIGN);
            this.state = 1122;
            this.primaryExpression();
            break;
        case Sparql11Parser.PLUS:
            this.enterOuterAlt(localctx, 2);
            this.state = 1123;
            this.match(Sparql11Parser.PLUS);
            this.state = 1124;
            this.primaryExpression();
            break;
        case Sparql11Parser.T__45:
            this.enterOuterAlt(localctx, 3);
            this.state = 1125;
            this.match(Sparql11Parser.T__45);
            this.state = 1126;
            this.primaryExpression();
            break;
        case Sparql11Parser.T__50:
        case Sparql11Parser.T__51:
        case Sparql11Parser.T__52:
        case Sparql11Parser.T__53:
        case Sparql11Parser.T__54:
        case Sparql11Parser.T__55:
        case Sparql11Parser.T__56:
        case Sparql11Parser.T__57:
        case Sparql11Parser.T__58:
        case Sparql11Parser.T__59:
        case Sparql11Parser.T__60:
        case Sparql11Parser.T__61:
        case Sparql11Parser.T__62:
        case Sparql11Parser.T__63:
        case Sparql11Parser.T__64:
        case Sparql11Parser.T__65:
        case Sparql11Parser.T__66:
        case Sparql11Parser.T__67:
        case Sparql11Parser.T__68:
        case Sparql11Parser.T__69:
        case Sparql11Parser.T__70:
        case Sparql11Parser.T__71:
        case Sparql11Parser.T__72:
        case Sparql11Parser.T__73:
        case Sparql11Parser.T__74:
        case Sparql11Parser.T__75:
        case Sparql11Parser.T__76:
        case Sparql11Parser.T__77:
        case Sparql11Parser.T__78:
        case Sparql11Parser.T__79:
        case Sparql11Parser.T__80:
        case Sparql11Parser.T__81:
        case Sparql11Parser.T__82:
        case Sparql11Parser.T__83:
        case Sparql11Parser.T__84:
        case Sparql11Parser.T__85:
        case Sparql11Parser.T__86:
        case Sparql11Parser.T__87:
        case Sparql11Parser.T__88:
        case Sparql11Parser.T__89:
        case Sparql11Parser.T__90:
        case Sparql11Parser.T__91:
        case Sparql11Parser.T__92:
        case Sparql11Parser.T__93:
        case Sparql11Parser.T__94:
        case Sparql11Parser.T__95:
        case Sparql11Parser.T__96:
        case Sparql11Parser.T__97:
        case Sparql11Parser.T__98:
        case Sparql11Parser.T__99:
        case Sparql11Parser.T__100:
        case Sparql11Parser.T__101:
        case Sparql11Parser.T__102:
        case Sparql11Parser.T__103:
        case Sparql11Parser.T__104:
        case Sparql11Parser.T__105:
        case Sparql11Parser.T__106:
        case Sparql11Parser.T__107:
        case Sparql11Parser.T__108:
        case Sparql11Parser.T__109:
        case Sparql11Parser.T__110:
        case Sparql11Parser.T__112:
        case Sparql11Parser.T__113:
        case Sparql11Parser.IRI_REF:
        case Sparql11Parser.PNAME_NS:
        case Sparql11Parser.PNAME_LN:
        case Sparql11Parser.INTEGER:
        case Sparql11Parser.DECIMAL:
        case Sparql11Parser.DOUBLE:
        case Sparql11Parser.INTEGER_POSITIVE:
        case Sparql11Parser.DECIMAL_POSITIVE:
        case Sparql11Parser.DOUBLE_POSITIVE:
        case Sparql11Parser.INTEGER_NEGATIVE:
        case Sparql11Parser.DECIMAL_NEGATIVE:
        case Sparql11Parser.DOUBLE_NEGATIVE:
        case Sparql11Parser.STRING_LITERAL1:
        case Sparql11Parser.STRING_LITERAL2:
        case Sparql11Parser.STRING_LITERAL_LONG1:
        case Sparql11Parser.STRING_LITERAL_LONG2:
        case Sparql11Parser.OPEN_BRACE:
        case Sparql11Parser.QUESTION:
        case Sparql11Parser.DOLLAR:
            this.enterOuterAlt(localctx, 4);
            this.state = 1127;
            this.primaryExpression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrimaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_primaryExpression;
    return this;
}

PrimaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryExpressionContext.prototype.constructor = PrimaryExpressionContext;

PrimaryExpressionContext.prototype.brackettedExpression = function() {
    return this.getTypedRuleContext(BrackettedExpressionContext,0);
};

PrimaryExpressionContext.prototype.builtInCall = function() {
    return this.getTypedRuleContext(BuiltInCallContext,0);
};

PrimaryExpressionContext.prototype.iriRefOrFunction = function() {
    return this.getTypedRuleContext(IriRefOrFunctionContext,0);
};

PrimaryExpressionContext.prototype.rdfLiteral = function() {
    return this.getTypedRuleContext(RdfLiteralContext,0);
};

PrimaryExpressionContext.prototype.numericLiteral = function() {
    return this.getTypedRuleContext(NumericLiteralContext,0);
};

PrimaryExpressionContext.prototype.booleanLiteral = function() {
    return this.getTypedRuleContext(BooleanLiteralContext,0);
};

PrimaryExpressionContext.prototype.var = function() {
    return this.getTypedRuleContext(VarContext,0);
};

PrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterPrimaryExpression(this);
	}
};

PrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitPrimaryExpression(this);
	}
};




Sparql11Parser.PrimaryExpressionContext = PrimaryExpressionContext;

Sparql11Parser.prototype.primaryExpression = function() {

    var localctx = new PrimaryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, Sparql11Parser.RULE_primaryExpression);
    try {
        this.state = 1137;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1130;
            this.brackettedExpression();
            break;
        case Sparql11Parser.T__50:
        case Sparql11Parser.T__51:
        case Sparql11Parser.T__52:
        case Sparql11Parser.T__53:
        case Sparql11Parser.T__54:
        case Sparql11Parser.T__55:
        case Sparql11Parser.T__56:
        case Sparql11Parser.T__57:
        case Sparql11Parser.T__58:
        case Sparql11Parser.T__59:
        case Sparql11Parser.T__60:
        case Sparql11Parser.T__61:
        case Sparql11Parser.T__62:
        case Sparql11Parser.T__63:
        case Sparql11Parser.T__64:
        case Sparql11Parser.T__65:
        case Sparql11Parser.T__66:
        case Sparql11Parser.T__67:
        case Sparql11Parser.T__68:
        case Sparql11Parser.T__69:
        case Sparql11Parser.T__70:
        case Sparql11Parser.T__71:
        case Sparql11Parser.T__72:
        case Sparql11Parser.T__73:
        case Sparql11Parser.T__74:
        case Sparql11Parser.T__75:
        case Sparql11Parser.T__76:
        case Sparql11Parser.T__77:
        case Sparql11Parser.T__78:
        case Sparql11Parser.T__79:
        case Sparql11Parser.T__80:
        case Sparql11Parser.T__81:
        case Sparql11Parser.T__82:
        case Sparql11Parser.T__83:
        case Sparql11Parser.T__84:
        case Sparql11Parser.T__85:
        case Sparql11Parser.T__86:
        case Sparql11Parser.T__87:
        case Sparql11Parser.T__88:
        case Sparql11Parser.T__89:
        case Sparql11Parser.T__90:
        case Sparql11Parser.T__91:
        case Sparql11Parser.T__92:
        case Sparql11Parser.T__93:
        case Sparql11Parser.T__94:
        case Sparql11Parser.T__95:
        case Sparql11Parser.T__96:
        case Sparql11Parser.T__97:
        case Sparql11Parser.T__98:
        case Sparql11Parser.T__99:
        case Sparql11Parser.T__100:
        case Sparql11Parser.T__101:
        case Sparql11Parser.T__102:
        case Sparql11Parser.T__103:
        case Sparql11Parser.T__104:
        case Sparql11Parser.T__105:
        case Sparql11Parser.T__106:
        case Sparql11Parser.T__107:
        case Sparql11Parser.T__108:
        case Sparql11Parser.T__109:
        case Sparql11Parser.T__110:
            this.enterOuterAlt(localctx, 2);
            this.state = 1131;
            this.builtInCall();
            break;
        case Sparql11Parser.IRI_REF:
        case Sparql11Parser.PNAME_NS:
        case Sparql11Parser.PNAME_LN:
            this.enterOuterAlt(localctx, 3);
            this.state = 1132;
            this.iriRefOrFunction();
            break;
        case Sparql11Parser.STRING_LITERAL1:
        case Sparql11Parser.STRING_LITERAL2:
        case Sparql11Parser.STRING_LITERAL_LONG1:
        case Sparql11Parser.STRING_LITERAL_LONG2:
            this.enterOuterAlt(localctx, 4);
            this.state = 1133;
            this.rdfLiteral();
            break;
        case Sparql11Parser.INTEGER:
        case Sparql11Parser.DECIMAL:
        case Sparql11Parser.DOUBLE:
        case Sparql11Parser.INTEGER_POSITIVE:
        case Sparql11Parser.DECIMAL_POSITIVE:
        case Sparql11Parser.DOUBLE_POSITIVE:
        case Sparql11Parser.INTEGER_NEGATIVE:
        case Sparql11Parser.DECIMAL_NEGATIVE:
        case Sparql11Parser.DOUBLE_NEGATIVE:
            this.enterOuterAlt(localctx, 5);
            this.state = 1134;
            this.numericLiteral();
            break;
        case Sparql11Parser.T__112:
        case Sparql11Parser.T__113:
            this.enterOuterAlt(localctx, 6);
            this.state = 1135;
            this.booleanLiteral();
            break;
        case Sparql11Parser.QUESTION:
        case Sparql11Parser.DOLLAR:
            this.enterOuterAlt(localctx, 7);
            this.state = 1136;
            this.var();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BrackettedExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_brackettedExpression;
    return this;
}

BrackettedExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BrackettedExpressionContext.prototype.constructor = BrackettedExpressionContext;

BrackettedExpressionContext.prototype.OPEN_BRACE = function() {
    return this.getToken(Sparql11Parser.OPEN_BRACE, 0);
};

BrackettedExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

BrackettedExpressionContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(Sparql11Parser.CLOSE_BRACE, 0);
};

BrackettedExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterBrackettedExpression(this);
	}
};

BrackettedExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitBrackettedExpression(this);
	}
};




Sparql11Parser.BrackettedExpressionContext = BrackettedExpressionContext;

Sparql11Parser.prototype.brackettedExpression = function() {

    var localctx = new BrackettedExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, Sparql11Parser.RULE_brackettedExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1139;
        this.match(Sparql11Parser.OPEN_BRACE);
        this.state = 1140;
        this.expression();
        this.state = 1141;
        this.match(Sparql11Parser.CLOSE_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BuiltInCallContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_builtInCall;
    return this;
}

BuiltInCallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BuiltInCallContext.prototype.constructor = BuiltInCallContext;

BuiltInCallContext.prototype.aggregate = function() {
    return this.getTypedRuleContext(AggregateContext,0);
};

BuiltInCallContext.prototype.OPEN_BRACE = function() {
    return this.getToken(Sparql11Parser.OPEN_BRACE, 0);
};

BuiltInCallContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

BuiltInCallContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(Sparql11Parser.CLOSE_BRACE, 0);
};

BuiltInCallContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Sparql11Parser.COMMA);
    } else {
        return this.getToken(Sparql11Parser.COMMA, i);
    }
};


BuiltInCallContext.prototype.var = function() {
    return this.getTypedRuleContext(VarContext,0);
};

BuiltInCallContext.prototype.nil = function() {
    return this.getTypedRuleContext(NilContext,0);
};

BuiltInCallContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

BuiltInCallContext.prototype.substringExpression = function() {
    return this.getTypedRuleContext(SubstringExpressionContext,0);
};

BuiltInCallContext.prototype.strReplaceExpression = function() {
    return this.getTypedRuleContext(StrReplaceExpressionContext,0);
};

BuiltInCallContext.prototype.regexExpression = function() {
    return this.getTypedRuleContext(RegexExpressionContext,0);
};

BuiltInCallContext.prototype.existsFunc = function() {
    return this.getTypedRuleContext(ExistsFuncContext,0);
};

BuiltInCallContext.prototype.notExistsFunc = function() {
    return this.getTypedRuleContext(NotExistsFuncContext,0);
};

BuiltInCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterBuiltInCall(this);
	}
};

BuiltInCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitBuiltInCall(this);
	}
};




Sparql11Parser.BuiltInCallContext = BuiltInCallContext;

Sparql11Parser.prototype.builtInCall = function() {

    var localctx = new BuiltInCallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, Sparql11Parser.RULE_builtInCall);
    try {
        this.state = 1401;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.T__104:
        case Sparql11Parser.T__105:
        case Sparql11Parser.T__106:
        case Sparql11Parser.T__107:
        case Sparql11Parser.T__108:
        case Sparql11Parser.T__109:
        case Sparql11Parser.T__110:
            this.enterOuterAlt(localctx, 1);
            this.state = 1143;
            this.aggregate();
            break;
        case Sparql11Parser.T__51:
            this.enterOuterAlt(localctx, 2);
            this.state = 1144;
            this.match(Sparql11Parser.T__51);
            this.state = 1145;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1146;
            this.expression();
            this.state = 1147;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__52:
            this.enterOuterAlt(localctx, 3);
            this.state = 1149;
            this.match(Sparql11Parser.T__52);
            this.state = 1150;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1151;
            this.expression();
            this.state = 1152;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__53:
            this.enterOuterAlt(localctx, 4);
            this.state = 1154;
            this.match(Sparql11Parser.T__53);
            this.state = 1155;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1156;
            this.expression();
            this.state = 1157;
            this.match(Sparql11Parser.COMMA);
            this.state = 1158;
            this.expression();
            this.state = 1159;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__54:
            this.enterOuterAlt(localctx, 5);
            this.state = 1161;
            this.match(Sparql11Parser.T__54);
            this.state = 1162;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1163;
            this.expression();
            this.state = 1164;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__55:
            this.enterOuterAlt(localctx, 6);
            this.state = 1166;
            this.match(Sparql11Parser.T__55);
            this.state = 1167;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1168;
            this.var();
            this.state = 1169;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__56:
            this.enterOuterAlt(localctx, 7);
            this.state = 1171;
            this.match(Sparql11Parser.T__56);
            this.state = 1172;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1173;
            this.expression();
            this.state = 1174;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__57:
            this.enterOuterAlt(localctx, 8);
            this.state = 1176;
            this.match(Sparql11Parser.T__57);
            this.state = 1177;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1178;
            this.expression();
            this.state = 1179;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__58:
            this.enterOuterAlt(localctx, 9);
            this.state = 1181;
            this.match(Sparql11Parser.T__58);
            this.state = 1187;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,133,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1182;
                this.match(Sparql11Parser.OPEN_BRACE);
                this.state = 1183;
                this.expression();
                this.state = 1184;
                this.match(Sparql11Parser.CLOSE_BRACE);
                break;

            case 2:
                this.state = 1186;
                this.nil();
                break;

            }
            break;
        case Sparql11Parser.T__59:
            this.enterOuterAlt(localctx, 10);
            this.state = 1189;
            this.match(Sparql11Parser.T__59);
            this.state = 1190;
            this.nil();
            break;
        case Sparql11Parser.T__60:
            this.enterOuterAlt(localctx, 11);
            this.state = 1191;
            this.match(Sparql11Parser.T__60);
            this.state = 1192;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1193;
            this.expression();
            this.state = 1194;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__61:
            this.enterOuterAlt(localctx, 12);
            this.state = 1196;
            this.match(Sparql11Parser.T__61);
            this.state = 1197;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1198;
            this.expression();
            this.state = 1199;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__62:
            this.enterOuterAlt(localctx, 13);
            this.state = 1201;
            this.match(Sparql11Parser.T__62);
            this.state = 1202;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1203;
            this.expression();
            this.state = 1204;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__63:
            this.enterOuterAlt(localctx, 14);
            this.state = 1206;
            this.match(Sparql11Parser.T__63);
            this.state = 1207;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1208;
            this.expression();
            this.state = 1209;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__64:
            this.enterOuterAlt(localctx, 15);
            this.state = 1211;
            this.match(Sparql11Parser.T__64);
            this.state = 1212;
            this.expressionList();
            break;
        case Sparql11Parser.T__101:
            this.enterOuterAlt(localctx, 16);
            this.state = 1213;
            this.substringExpression();
            break;
        case Sparql11Parser.T__65:
            this.enterOuterAlt(localctx, 17);
            this.state = 1214;
            this.match(Sparql11Parser.T__65);
            this.state = 1215;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1216;
            this.expression();
            this.state = 1217;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__102:
            this.enterOuterAlt(localctx, 18);
            this.state = 1219;
            this.strReplaceExpression();
            break;
        case Sparql11Parser.T__66:
            this.enterOuterAlt(localctx, 19);
            this.state = 1220;
            this.match(Sparql11Parser.T__66);
            this.state = 1221;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1222;
            this.expression();
            this.state = 1223;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__67:
            this.enterOuterAlt(localctx, 20);
            this.state = 1225;
            this.match(Sparql11Parser.T__67);
            this.state = 1226;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1227;
            this.expression();
            this.state = 1228;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__68:
            this.enterOuterAlt(localctx, 21);
            this.state = 1230;
            this.match(Sparql11Parser.T__68);
            this.state = 1231;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1232;
            this.expression();
            this.state = 1233;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__69:
            this.enterOuterAlt(localctx, 22);
            this.state = 1235;
            this.match(Sparql11Parser.T__69);
            this.state = 1236;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1237;
            this.expression();
            this.state = 1238;
            this.match(Sparql11Parser.COMMA);
            this.state = 1239;
            this.expression();
            this.state = 1240;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__70:
            this.enterOuterAlt(localctx, 23);
            this.state = 1242;
            this.match(Sparql11Parser.T__70);
            this.state = 1243;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1244;
            this.expression();
            this.state = 1245;
            this.match(Sparql11Parser.COMMA);
            this.state = 1246;
            this.expression();
            this.state = 1247;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__71:
            this.enterOuterAlt(localctx, 24);
            this.state = 1249;
            this.match(Sparql11Parser.T__71);
            this.state = 1250;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1251;
            this.expression();
            this.state = 1252;
            this.match(Sparql11Parser.COMMA);
            this.state = 1253;
            this.expression();
            this.state = 1254;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__72:
            this.enterOuterAlt(localctx, 25);
            this.state = 1256;
            this.match(Sparql11Parser.T__72);
            this.state = 1257;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1258;
            this.expression();
            this.state = 1259;
            this.match(Sparql11Parser.COMMA);
            this.state = 1260;
            this.expression();
            this.state = 1261;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__73:
            this.enterOuterAlt(localctx, 26);
            this.state = 1263;
            this.match(Sparql11Parser.T__73);
            this.state = 1264;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1265;
            this.expression();
            this.state = 1266;
            this.match(Sparql11Parser.COMMA);
            this.state = 1267;
            this.expression();
            this.state = 1268;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__74:
            this.enterOuterAlt(localctx, 27);
            this.state = 1270;
            this.match(Sparql11Parser.T__74);
            this.state = 1271;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1272;
            this.expression();
            this.state = 1273;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__75:
            this.enterOuterAlt(localctx, 28);
            this.state = 1275;
            this.match(Sparql11Parser.T__75);
            this.state = 1276;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1277;
            this.expression();
            this.state = 1278;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__76:
            this.enterOuterAlt(localctx, 29);
            this.state = 1280;
            this.match(Sparql11Parser.T__76);
            this.state = 1281;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1282;
            this.expression();
            this.state = 1283;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__77:
            this.enterOuterAlt(localctx, 30);
            this.state = 1285;
            this.match(Sparql11Parser.T__77);
            this.state = 1286;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1287;
            this.expression();
            this.state = 1288;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__78:
            this.enterOuterAlt(localctx, 31);
            this.state = 1290;
            this.match(Sparql11Parser.T__78);
            this.state = 1291;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1292;
            this.expression();
            this.state = 1293;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__79:
            this.enterOuterAlt(localctx, 32);
            this.state = 1295;
            this.match(Sparql11Parser.T__79);
            this.state = 1296;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1297;
            this.expression();
            this.state = 1298;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__80:
            this.enterOuterAlt(localctx, 33);
            this.state = 1300;
            this.match(Sparql11Parser.T__80);
            this.state = 1301;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1302;
            this.expression();
            this.state = 1303;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__81:
            this.enterOuterAlt(localctx, 34);
            this.state = 1305;
            this.match(Sparql11Parser.T__81);
            this.state = 1306;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1307;
            this.expression();
            this.state = 1308;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__82:
            this.enterOuterAlt(localctx, 35);
            this.state = 1310;
            this.match(Sparql11Parser.T__82);
            this.state = 1311;
            this.nil();
            break;
        case Sparql11Parser.T__83:
            this.enterOuterAlt(localctx, 36);
            this.state = 1312;
            this.match(Sparql11Parser.T__83);
            this.state = 1313;
            this.nil();
            break;
        case Sparql11Parser.T__84:
            this.enterOuterAlt(localctx, 37);
            this.state = 1314;
            this.match(Sparql11Parser.T__84);
            this.state = 1315;
            this.nil();
            break;
        case Sparql11Parser.T__85:
            this.enterOuterAlt(localctx, 38);
            this.state = 1316;
            this.match(Sparql11Parser.T__85);
            this.state = 1317;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1318;
            this.expression();
            this.state = 1319;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__86:
            this.enterOuterAlt(localctx, 39);
            this.state = 1321;
            this.match(Sparql11Parser.T__86);
            this.state = 1322;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1323;
            this.expression();
            this.state = 1324;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__87:
            this.enterOuterAlt(localctx, 40);
            this.state = 1326;
            this.match(Sparql11Parser.T__87);
            this.state = 1327;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1328;
            this.expression();
            this.state = 1329;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__88:
            this.enterOuterAlt(localctx, 41);
            this.state = 1331;
            this.match(Sparql11Parser.T__88);
            this.state = 1332;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1333;
            this.expression();
            this.state = 1334;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__89:
            this.enterOuterAlt(localctx, 42);
            this.state = 1336;
            this.match(Sparql11Parser.T__89);
            this.state = 1337;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1338;
            this.expression();
            this.state = 1339;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__90:
            this.enterOuterAlt(localctx, 43);
            this.state = 1341;
            this.match(Sparql11Parser.T__90);
            this.state = 1342;
            this.expressionList();
            break;
        case Sparql11Parser.T__91:
            this.enterOuterAlt(localctx, 44);
            this.state = 1343;
            this.match(Sparql11Parser.T__91);
            this.state = 1344;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1345;
            this.expression();
            this.state = 1346;
            this.match(Sparql11Parser.COMMA);
            this.state = 1347;
            this.expression();
            this.state = 1348;
            this.match(Sparql11Parser.COMMA);
            this.state = 1349;
            this.expression();
            this.state = 1350;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__92:
            this.enterOuterAlt(localctx, 45);
            this.state = 1352;
            this.match(Sparql11Parser.T__92);
            this.state = 1353;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1354;
            this.expression();
            this.state = 1355;
            this.match(Sparql11Parser.COMMA);
            this.state = 1356;
            this.expression();
            this.state = 1357;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__93:
            this.enterOuterAlt(localctx, 46);
            this.state = 1359;
            this.match(Sparql11Parser.T__93);
            this.state = 1360;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1361;
            this.expression();
            this.state = 1362;
            this.match(Sparql11Parser.COMMA);
            this.state = 1363;
            this.expression();
            this.state = 1364;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__94:
            this.enterOuterAlt(localctx, 47);
            this.state = 1366;
            this.match(Sparql11Parser.T__94);
            this.state = 1367;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1368;
            this.expression();
            this.state = 1369;
            this.match(Sparql11Parser.COMMA);
            this.state = 1370;
            this.expression();
            this.state = 1371;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__95:
            this.enterOuterAlt(localctx, 48);
            this.state = 1373;
            this.match(Sparql11Parser.T__95);
            this.state = 1374;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1375;
            this.expression();
            this.state = 1376;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__96:
            this.enterOuterAlt(localctx, 49);
            this.state = 1378;
            this.match(Sparql11Parser.T__96);
            this.state = 1379;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1380;
            this.expression();
            this.state = 1381;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__97:
            this.enterOuterAlt(localctx, 50);
            this.state = 1383;
            this.match(Sparql11Parser.T__97);
            this.state = 1384;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1385;
            this.expression();
            this.state = 1386;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__98:
            this.enterOuterAlt(localctx, 51);
            this.state = 1388;
            this.match(Sparql11Parser.T__98);
            this.state = 1389;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1390;
            this.expression();
            this.state = 1391;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__99:
            this.enterOuterAlt(localctx, 52);
            this.state = 1393;
            this.match(Sparql11Parser.T__99);
            this.state = 1394;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1395;
            this.expression();
            this.state = 1396;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__100:
            this.enterOuterAlt(localctx, 53);
            this.state = 1398;
            this.regexExpression();
            break;
        case Sparql11Parser.T__103:
            this.enterOuterAlt(localctx, 54);
            this.state = 1399;
            this.existsFunc();
            break;
        case Sparql11Parser.T__50:
            this.enterOuterAlt(localctx, 55);
            this.state = 1400;
            this.notExistsFunc();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RegexExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_regexExpression;
    return this;
}

RegexExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RegexExpressionContext.prototype.constructor = RegexExpressionContext;

RegexExpressionContext.prototype.OPEN_BRACE = function() {
    return this.getToken(Sparql11Parser.OPEN_BRACE, 0);
};

RegexExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

RegexExpressionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Sparql11Parser.COMMA);
    } else {
        return this.getToken(Sparql11Parser.COMMA, i);
    }
};


RegexExpressionContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(Sparql11Parser.CLOSE_BRACE, 0);
};

RegexExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterRegexExpression(this);
	}
};

RegexExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitRegexExpression(this);
	}
};




Sparql11Parser.RegexExpressionContext = RegexExpressionContext;

Sparql11Parser.prototype.regexExpression = function() {

    var localctx = new RegexExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, Sparql11Parser.RULE_regexExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1403;
        this.match(Sparql11Parser.T__100);
        this.state = 1404;
        this.match(Sparql11Parser.OPEN_BRACE);
        this.state = 1405;
        this.expression();
        this.state = 1406;
        this.match(Sparql11Parser.COMMA);
        this.state = 1407;
        this.expression();
        this.state = 1410;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Sparql11Parser.COMMA) {
            this.state = 1408;
            this.match(Sparql11Parser.COMMA);
            this.state = 1409;
            this.expression();
        }

        this.state = 1412;
        this.match(Sparql11Parser.CLOSE_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubstringExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_substringExpression;
    return this;
}

SubstringExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubstringExpressionContext.prototype.constructor = SubstringExpressionContext;

SubstringExpressionContext.prototype.OPEN_BRACE = function() {
    return this.getToken(Sparql11Parser.OPEN_BRACE, 0);
};

SubstringExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

SubstringExpressionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Sparql11Parser.COMMA);
    } else {
        return this.getToken(Sparql11Parser.COMMA, i);
    }
};


SubstringExpressionContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(Sparql11Parser.CLOSE_BRACE, 0);
};

SubstringExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterSubstringExpression(this);
	}
};

SubstringExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitSubstringExpression(this);
	}
};




Sparql11Parser.SubstringExpressionContext = SubstringExpressionContext;

Sparql11Parser.prototype.substringExpression = function() {

    var localctx = new SubstringExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, Sparql11Parser.RULE_substringExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1414;
        this.match(Sparql11Parser.T__101);
        this.state = 1415;
        this.match(Sparql11Parser.OPEN_BRACE);
        this.state = 1416;
        this.expression();
        this.state = 1417;
        this.match(Sparql11Parser.COMMA);
        this.state = 1418;
        this.expression();
        this.state = 1421;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Sparql11Parser.COMMA) {
            this.state = 1419;
            this.match(Sparql11Parser.COMMA);
            this.state = 1420;
            this.expression();
        }

        this.state = 1423;
        this.match(Sparql11Parser.CLOSE_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StrReplaceExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_strReplaceExpression;
    return this;
}

StrReplaceExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StrReplaceExpressionContext.prototype.constructor = StrReplaceExpressionContext;

StrReplaceExpressionContext.prototype.OPEN_BRACE = function() {
    return this.getToken(Sparql11Parser.OPEN_BRACE, 0);
};

StrReplaceExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

StrReplaceExpressionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Sparql11Parser.COMMA);
    } else {
        return this.getToken(Sparql11Parser.COMMA, i);
    }
};


StrReplaceExpressionContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(Sparql11Parser.CLOSE_BRACE, 0);
};

StrReplaceExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterStrReplaceExpression(this);
	}
};

StrReplaceExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitStrReplaceExpression(this);
	}
};




Sparql11Parser.StrReplaceExpressionContext = StrReplaceExpressionContext;

Sparql11Parser.prototype.strReplaceExpression = function() {

    var localctx = new StrReplaceExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, Sparql11Parser.RULE_strReplaceExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1425;
        this.match(Sparql11Parser.T__102);
        this.state = 1426;
        this.match(Sparql11Parser.OPEN_BRACE);
        this.state = 1427;
        this.expression();
        this.state = 1428;
        this.match(Sparql11Parser.COMMA);
        this.state = 1429;
        this.expression();
        this.state = 1430;
        this.match(Sparql11Parser.COMMA);
        this.state = 1431;
        this.expression();
        this.state = 1434;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Sparql11Parser.COMMA) {
            this.state = 1432;
            this.match(Sparql11Parser.COMMA);
            this.state = 1433;
            this.expression();
        }

        this.state = 1436;
        this.match(Sparql11Parser.CLOSE_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExistsFuncContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_existsFunc;
    return this;
}

ExistsFuncContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExistsFuncContext.prototype.constructor = ExistsFuncContext;

ExistsFuncContext.prototype.groupGraphPattern = function() {
    return this.getTypedRuleContext(GroupGraphPatternContext,0);
};

ExistsFuncContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterExistsFunc(this);
	}
};

ExistsFuncContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitExistsFunc(this);
	}
};




Sparql11Parser.ExistsFuncContext = ExistsFuncContext;

Sparql11Parser.prototype.existsFunc = function() {

    var localctx = new ExistsFuncContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, Sparql11Parser.RULE_existsFunc);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1438;
        this.match(Sparql11Parser.T__103);
        this.state = 1439;
        this.groupGraphPattern();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NotExistsFuncContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_notExistsFunc;
    return this;
}

NotExistsFuncContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NotExistsFuncContext.prototype.constructor = NotExistsFuncContext;

NotExistsFuncContext.prototype.groupGraphPattern = function() {
    return this.getTypedRuleContext(GroupGraphPatternContext,0);
};

NotExistsFuncContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterNotExistsFunc(this);
	}
};

NotExistsFuncContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitNotExistsFunc(this);
	}
};




Sparql11Parser.NotExistsFuncContext = NotExistsFuncContext;

Sparql11Parser.prototype.notExistsFunc = function() {

    var localctx = new NotExistsFuncContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, Sparql11Parser.RULE_notExistsFunc);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1441;
        this.match(Sparql11Parser.T__50);
        this.state = 1442;
        this.match(Sparql11Parser.T__103);
        this.state = 1443;
        this.groupGraphPattern();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AggregateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_aggregate;
    return this;
}

AggregateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AggregateContext.prototype.constructor = AggregateContext;

AggregateContext.prototype.OPEN_BRACE = function() {
    return this.getToken(Sparql11Parser.OPEN_BRACE, 0);
};

AggregateContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(Sparql11Parser.CLOSE_BRACE, 0);
};

AggregateContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

AggregateContext.prototype.ASTERISK = function() {
    return this.getToken(Sparql11Parser.ASTERISK, 0);
};

AggregateContext.prototype.SEMICOLON = function() {
    return this.getToken(Sparql11Parser.SEMICOLON, 0);
};

AggregateContext.prototype.EQUAL = function() {
    return this.getToken(Sparql11Parser.EQUAL, 0);
};

AggregateContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

AggregateContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterAggregate(this);
	}
};

AggregateContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitAggregate(this);
	}
};




Sparql11Parser.AggregateContext = AggregateContext;

Sparql11Parser.prototype.aggregate = function() {

    var localctx = new AggregateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, Sparql11Parser.RULE_aggregate);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1509;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.T__104:
            this.state = 1445;
            this.match(Sparql11Parser.T__104);
            this.state = 1446;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1448;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Sparql11Parser.T__3) {
                this.state = 1447;
                this.match(Sparql11Parser.T__3);
            }

            this.state = 1452;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case Sparql11Parser.ASTERISK:
                this.state = 1450;
                this.match(Sparql11Parser.ASTERISK);
                break;
            case Sparql11Parser.T__45:
            case Sparql11Parser.T__50:
            case Sparql11Parser.T__51:
            case Sparql11Parser.T__52:
            case Sparql11Parser.T__53:
            case Sparql11Parser.T__54:
            case Sparql11Parser.T__55:
            case Sparql11Parser.T__56:
            case Sparql11Parser.T__57:
            case Sparql11Parser.T__58:
            case Sparql11Parser.T__59:
            case Sparql11Parser.T__60:
            case Sparql11Parser.T__61:
            case Sparql11Parser.T__62:
            case Sparql11Parser.T__63:
            case Sparql11Parser.T__64:
            case Sparql11Parser.T__65:
            case Sparql11Parser.T__66:
            case Sparql11Parser.T__67:
            case Sparql11Parser.T__68:
            case Sparql11Parser.T__69:
            case Sparql11Parser.T__70:
            case Sparql11Parser.T__71:
            case Sparql11Parser.T__72:
            case Sparql11Parser.T__73:
            case Sparql11Parser.T__74:
            case Sparql11Parser.T__75:
            case Sparql11Parser.T__76:
            case Sparql11Parser.T__77:
            case Sparql11Parser.T__78:
            case Sparql11Parser.T__79:
            case Sparql11Parser.T__80:
            case Sparql11Parser.T__81:
            case Sparql11Parser.T__82:
            case Sparql11Parser.T__83:
            case Sparql11Parser.T__84:
            case Sparql11Parser.T__85:
            case Sparql11Parser.T__86:
            case Sparql11Parser.T__87:
            case Sparql11Parser.T__88:
            case Sparql11Parser.T__89:
            case Sparql11Parser.T__90:
            case Sparql11Parser.T__91:
            case Sparql11Parser.T__92:
            case Sparql11Parser.T__93:
            case Sparql11Parser.T__94:
            case Sparql11Parser.T__95:
            case Sparql11Parser.T__96:
            case Sparql11Parser.T__97:
            case Sparql11Parser.T__98:
            case Sparql11Parser.T__99:
            case Sparql11Parser.T__100:
            case Sparql11Parser.T__101:
            case Sparql11Parser.T__102:
            case Sparql11Parser.T__103:
            case Sparql11Parser.T__104:
            case Sparql11Parser.T__105:
            case Sparql11Parser.T__106:
            case Sparql11Parser.T__107:
            case Sparql11Parser.T__108:
            case Sparql11Parser.T__109:
            case Sparql11Parser.T__110:
            case Sparql11Parser.T__112:
            case Sparql11Parser.T__113:
            case Sparql11Parser.IRI_REF:
            case Sparql11Parser.PNAME_NS:
            case Sparql11Parser.PNAME_LN:
            case Sparql11Parser.INTEGER:
            case Sparql11Parser.DECIMAL:
            case Sparql11Parser.DOUBLE:
            case Sparql11Parser.INTEGER_POSITIVE:
            case Sparql11Parser.DECIMAL_POSITIVE:
            case Sparql11Parser.DOUBLE_POSITIVE:
            case Sparql11Parser.INTEGER_NEGATIVE:
            case Sparql11Parser.DECIMAL_NEGATIVE:
            case Sparql11Parser.DOUBLE_NEGATIVE:
            case Sparql11Parser.STRING_LITERAL1:
            case Sparql11Parser.STRING_LITERAL2:
            case Sparql11Parser.STRING_LITERAL_LONG1:
            case Sparql11Parser.STRING_LITERAL_LONG2:
            case Sparql11Parser.OPEN_BRACE:
            case Sparql11Parser.QUESTION:
            case Sparql11Parser.DOLLAR:
            case Sparql11Parser.PLUS:
            case Sparql11Parser.NOT_SIGN:
                this.state = 1451;
                this.expression();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1454;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__105:
            this.state = 1455;
            this.match(Sparql11Parser.T__105);
            this.state = 1456;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1458;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Sparql11Parser.T__3) {
                this.state = 1457;
                this.match(Sparql11Parser.T__3);
            }

            this.state = 1460;
            this.expression();
            this.state = 1461;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__106:
            this.state = 1463;
            this.match(Sparql11Parser.T__106);
            this.state = 1464;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1466;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Sparql11Parser.T__3) {
                this.state = 1465;
                this.match(Sparql11Parser.T__3);
            }

            this.state = 1468;
            this.expression();
            this.state = 1469;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__107:
            this.state = 1471;
            this.match(Sparql11Parser.T__107);
            this.state = 1472;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1474;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Sparql11Parser.T__3) {
                this.state = 1473;
                this.match(Sparql11Parser.T__3);
            }

            this.state = 1476;
            this.expression();
            this.state = 1477;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__108:
            this.state = 1479;
            this.match(Sparql11Parser.T__108);
            this.state = 1480;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1482;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Sparql11Parser.T__3) {
                this.state = 1481;
                this.match(Sparql11Parser.T__3);
            }

            this.state = 1484;
            this.expression();
            this.state = 1485;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__109:
            this.state = 1487;
            this.match(Sparql11Parser.T__109);
            this.state = 1488;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1490;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Sparql11Parser.T__3) {
                this.state = 1489;
                this.match(Sparql11Parser.T__3);
            }

            this.state = 1492;
            this.expression();
            this.state = 1493;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        case Sparql11Parser.T__110:
            this.state = 1495;
            this.match(Sparql11Parser.T__110);
            this.state = 1496;
            this.match(Sparql11Parser.OPEN_BRACE);
            this.state = 1498;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Sparql11Parser.T__3) {
                this.state = 1497;
                this.match(Sparql11Parser.T__3);
            }

            this.state = 1500;
            this.expression();
            this.state = 1505;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Sparql11Parser.SEMICOLON) {
                this.state = 1501;
                this.match(Sparql11Parser.SEMICOLON);
                this.state = 1502;
                this.match(Sparql11Parser.T__111);
                this.state = 1503;
                this.match(Sparql11Parser.EQUAL);
                this.state = 1504;
                this.string();
            }

            this.state = 1507;
            this.match(Sparql11Parser.CLOSE_BRACE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IriRefOrFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_iriRefOrFunction;
    return this;
}

IriRefOrFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IriRefOrFunctionContext.prototype.constructor = IriRefOrFunctionContext;

IriRefOrFunctionContext.prototype.iriRef = function() {
    return this.getTypedRuleContext(IriRefContext,0);
};

IriRefOrFunctionContext.prototype.argList = function() {
    return this.getTypedRuleContext(ArgListContext,0);
};

IriRefOrFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterIriRefOrFunction(this);
	}
};

IriRefOrFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitIriRefOrFunction(this);
	}
};




Sparql11Parser.IriRefOrFunctionContext = IriRefOrFunctionContext;

Sparql11Parser.prototype.iriRefOrFunction = function() {

    var localctx = new IriRefOrFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, Sparql11Parser.RULE_iriRefOrFunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1511;
        this.iriRef();
        this.state = 1513;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Sparql11Parser.OPEN_BRACE) {
            this.state = 1512;
            this.argList();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RdfLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_rdfLiteral;
    return this;
}

RdfLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RdfLiteralContext.prototype.constructor = RdfLiteralContext;

RdfLiteralContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

RdfLiteralContext.prototype.LANGTAG = function() {
    return this.getToken(Sparql11Parser.LANGTAG, 0);
};

RdfLiteralContext.prototype.REFERENCE = function() {
    return this.getToken(Sparql11Parser.REFERENCE, 0);
};

RdfLiteralContext.prototype.iriRef = function() {
    return this.getTypedRuleContext(IriRefContext,0);
};

RdfLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterRdfLiteral(this);
	}
};

RdfLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitRdfLiteral(this);
	}
};




Sparql11Parser.RdfLiteralContext = RdfLiteralContext;

Sparql11Parser.prototype.rdfLiteral = function() {

    var localctx = new RdfLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, Sparql11Parser.RULE_rdfLiteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1515;
        this.string();
        this.state = 1519;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case Sparql11Parser.LANGTAG:
        	this.state = 1516;
        	this.match(Sparql11Parser.LANGTAG);
        	break;
        case Sparql11Parser.REFERENCE:
        	this.state = 1517;
        	this.match(Sparql11Parser.REFERENCE);
        	this.state = 1518;
        	this.iriRef();
        	break;
        case Sparql11Parser.T__5:
        case Sparql11Parser.T__20:
        case Sparql11Parser.T__39:
        case Sparql11Parser.T__41:
        case Sparql11Parser.T__42:
        case Sparql11Parser.T__43:
        case Sparql11Parser.T__44:
        case Sparql11Parser.T__45:
        case Sparql11Parser.T__47:
        case Sparql11Parser.T__48:
        case Sparql11Parser.T__49:
        case Sparql11Parser.T__50:
        case Sparql11Parser.T__112:
        case Sparql11Parser.T__113:
        case Sparql11Parser.IRI_REF:
        case Sparql11Parser.PNAME_NS:
        case Sparql11Parser.PNAME_LN:
        case Sparql11Parser.BLANK_NODE_LABEL:
        case Sparql11Parser.INTEGER:
        case Sparql11Parser.DECIMAL:
        case Sparql11Parser.DOUBLE:
        case Sparql11Parser.INTEGER_POSITIVE:
        case Sparql11Parser.DECIMAL_POSITIVE:
        case Sparql11Parser.DOUBLE_POSITIVE:
        case Sparql11Parser.INTEGER_NEGATIVE:
        case Sparql11Parser.DECIMAL_NEGATIVE:
        case Sparql11Parser.DOUBLE_NEGATIVE:
        case Sparql11Parser.STRING_LITERAL1:
        case Sparql11Parser.STRING_LITERAL2:
        case Sparql11Parser.STRING_LITERAL_LONG1:
        case Sparql11Parser.STRING_LITERAL_LONG2:
        case Sparql11Parser.OPEN_BRACE:
        case Sparql11Parser.CLOSE_BRACE:
        case Sparql11Parser.OPEN_CURLY_BRACE:
        case Sparql11Parser.CLOSE_CURLY_BRACE:
        case Sparql11Parser.ASTERISK:
        case Sparql11Parser.QUESTION:
        case Sparql11Parser.DOLLAR:
        case Sparql11Parser.DOT:
        case Sparql11Parser.COMMA:
        case Sparql11Parser.SEMICOLON:
        case Sparql11Parser.DIVIDE:
        case Sparql11Parser.HAT:
        case Sparql11Parser.PLUS:
        case Sparql11Parser.NOT_SIGN:
        case Sparql11Parser.OPEN_SQUARE_BRACE:
        case Sparql11Parser.CLOSE_SQUARE_BRACE:
        case Sparql11Parser.OR:
        case Sparql11Parser.AND:
        case Sparql11Parser.EQUAL:
        case Sparql11Parser.NOT_EQUAL:
        case Sparql11Parser.LESS:
        case Sparql11Parser.GREATER:
        case Sparql11Parser.LESS_EQUAL:
        case Sparql11Parser.GREATER_EQUAL:
        	break;
        default:
        	throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumericLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_numericLiteral;
    return this;
}

NumericLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumericLiteralContext.prototype.constructor = NumericLiteralContext;

NumericLiteralContext.prototype.numericLiteralUnsigned = function() {
    return this.getTypedRuleContext(NumericLiteralUnsignedContext,0);
};

NumericLiteralContext.prototype.numericLiteralPositive = function() {
    return this.getTypedRuleContext(NumericLiteralPositiveContext,0);
};

NumericLiteralContext.prototype.numericLiteralNegative = function() {
    return this.getTypedRuleContext(NumericLiteralNegativeContext,0);
};

NumericLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterNumericLiteral(this);
	}
};

NumericLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitNumericLiteral(this);
	}
};




Sparql11Parser.NumericLiteralContext = NumericLiteralContext;

Sparql11Parser.prototype.numericLiteral = function() {

    var localctx = new NumericLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, Sparql11Parser.RULE_numericLiteral);
    try {
        this.state = 1524;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.INTEGER:
        case Sparql11Parser.DECIMAL:
        case Sparql11Parser.DOUBLE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1521;
            this.numericLiteralUnsigned();
            break;
        case Sparql11Parser.INTEGER_POSITIVE:
        case Sparql11Parser.DECIMAL_POSITIVE:
        case Sparql11Parser.DOUBLE_POSITIVE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1522;
            this.numericLiteralPositive();
            break;
        case Sparql11Parser.INTEGER_NEGATIVE:
        case Sparql11Parser.DECIMAL_NEGATIVE:
        case Sparql11Parser.DOUBLE_NEGATIVE:
            this.enterOuterAlt(localctx, 3);
            this.state = 1523;
            this.numericLiteralNegative();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumericLiteralUnsignedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_numericLiteralUnsigned;
    return this;
}

NumericLiteralUnsignedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumericLiteralUnsignedContext.prototype.constructor = NumericLiteralUnsignedContext;

NumericLiteralUnsignedContext.prototype.INTEGER = function() {
    return this.getToken(Sparql11Parser.INTEGER, 0);
};

NumericLiteralUnsignedContext.prototype.DECIMAL = function() {
    return this.getToken(Sparql11Parser.DECIMAL, 0);
};

NumericLiteralUnsignedContext.prototype.DOUBLE = function() {
    return this.getToken(Sparql11Parser.DOUBLE, 0);
};

NumericLiteralUnsignedContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterNumericLiteralUnsigned(this);
	}
};

NumericLiteralUnsignedContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitNumericLiteralUnsigned(this);
	}
};




Sparql11Parser.NumericLiteralUnsignedContext = NumericLiteralUnsignedContext;

Sparql11Parser.prototype.numericLiteralUnsigned = function() {

    var localctx = new NumericLiteralUnsignedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, Sparql11Parser.RULE_numericLiteralUnsigned);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1526;
        _la = this._input.LA(1);
        if(!(((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (Sparql11Parser.INTEGER - 120)) | (1 << (Sparql11Parser.DECIMAL - 120)) | (1 << (Sparql11Parser.DOUBLE - 120)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumericLiteralPositiveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_numericLiteralPositive;
    return this;
}

NumericLiteralPositiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumericLiteralPositiveContext.prototype.constructor = NumericLiteralPositiveContext;

NumericLiteralPositiveContext.prototype.INTEGER_POSITIVE = function() {
    return this.getToken(Sparql11Parser.INTEGER_POSITIVE, 0);
};

NumericLiteralPositiveContext.prototype.DECIMAL_POSITIVE = function() {
    return this.getToken(Sparql11Parser.DECIMAL_POSITIVE, 0);
};

NumericLiteralPositiveContext.prototype.DOUBLE_POSITIVE = function() {
    return this.getToken(Sparql11Parser.DOUBLE_POSITIVE, 0);
};

NumericLiteralPositiveContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterNumericLiteralPositive(this);
	}
};

NumericLiteralPositiveContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitNumericLiteralPositive(this);
	}
};




Sparql11Parser.NumericLiteralPositiveContext = NumericLiteralPositiveContext;

Sparql11Parser.prototype.numericLiteralPositive = function() {

    var localctx = new NumericLiteralPositiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, Sparql11Parser.RULE_numericLiteralPositive);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1528;
        _la = this._input.LA(1);
        if(!(((((_la - 123)) & ~0x1f) == 0 && ((1 << (_la - 123)) & ((1 << (Sparql11Parser.INTEGER_POSITIVE - 123)) | (1 << (Sparql11Parser.DECIMAL_POSITIVE - 123)) | (1 << (Sparql11Parser.DOUBLE_POSITIVE - 123)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumericLiteralNegativeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_numericLiteralNegative;
    return this;
}

NumericLiteralNegativeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumericLiteralNegativeContext.prototype.constructor = NumericLiteralNegativeContext;

NumericLiteralNegativeContext.prototype.INTEGER_NEGATIVE = function() {
    return this.getToken(Sparql11Parser.INTEGER_NEGATIVE, 0);
};

NumericLiteralNegativeContext.prototype.DECIMAL_NEGATIVE = function() {
    return this.getToken(Sparql11Parser.DECIMAL_NEGATIVE, 0);
};

NumericLiteralNegativeContext.prototype.DOUBLE_NEGATIVE = function() {
    return this.getToken(Sparql11Parser.DOUBLE_NEGATIVE, 0);
};

NumericLiteralNegativeContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterNumericLiteralNegative(this);
	}
};

NumericLiteralNegativeContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitNumericLiteralNegative(this);
	}
};




Sparql11Parser.NumericLiteralNegativeContext = NumericLiteralNegativeContext;

Sparql11Parser.prototype.numericLiteralNegative = function() {

    var localctx = new NumericLiteralNegativeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, Sparql11Parser.RULE_numericLiteralNegative);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1530;
        _la = this._input.LA(1);
        if(!(((((_la - 126)) & ~0x1f) == 0 && ((1 << (_la - 126)) & ((1 << (Sparql11Parser.INTEGER_NEGATIVE - 126)) | (1 << (Sparql11Parser.DECIMAL_NEGATIVE - 126)) | (1 << (Sparql11Parser.DOUBLE_NEGATIVE - 126)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BooleanLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_booleanLiteral;
    return this;
}

BooleanLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanLiteralContext.prototype.constructor = BooleanLiteralContext;


BooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterBooleanLiteral(this);
	}
};

BooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitBooleanLiteral(this);
	}
};




Sparql11Parser.BooleanLiteralContext = BooleanLiteralContext;

Sparql11Parser.prototype.booleanLiteral = function() {

    var localctx = new BooleanLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, Sparql11Parser.RULE_booleanLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1532;
        _la = this._input.LA(1);
        if(!(_la===Sparql11Parser.T__112 || _la===Sparql11Parser.T__113)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_string;
    return this;
}

StringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringContext.prototype.constructor = StringContext;

StringContext.prototype.STRING_LITERAL1 = function() {
    return this.getToken(Sparql11Parser.STRING_LITERAL1, 0);
};

StringContext.prototype.STRING_LITERAL2 = function() {
    return this.getToken(Sparql11Parser.STRING_LITERAL2, 0);
};

StringContext.prototype.STRING_LITERAL_LONG1 = function() {
    return this.getToken(Sparql11Parser.STRING_LITERAL_LONG1, 0);
};

StringContext.prototype.STRING_LITERAL_LONG2 = function() {
    return this.getToken(Sparql11Parser.STRING_LITERAL_LONG2, 0);
};

StringContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterString(this);
	}
};

StringContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitString(this);
	}
};




Sparql11Parser.StringContext = StringContext;

Sparql11Parser.prototype.string = function() {

    var localctx = new StringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, Sparql11Parser.RULE_string);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1534;
        _la = this._input.LA(1);
        if(!(((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (Sparql11Parser.STRING_LITERAL1 - 130)) | (1 << (Sparql11Parser.STRING_LITERAL2 - 130)) | (1 << (Sparql11Parser.STRING_LITERAL_LONG1 - 130)) | (1 << (Sparql11Parser.STRING_LITERAL_LONG2 - 130)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IriRefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_iriRef;
    return this;
}

IriRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IriRefContext.prototype.constructor = IriRefContext;

IriRefContext.prototype.IRI_REF = function() {
    return this.getToken(Sparql11Parser.IRI_REF, 0);
};

IriRefContext.prototype.prefixedName = function() {
    return this.getTypedRuleContext(PrefixedNameContext,0);
};

IriRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterIriRef(this);
	}
};

IriRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitIriRef(this);
	}
};




Sparql11Parser.IriRefContext = IriRefContext;

Sparql11Parser.prototype.iriRef = function() {

    var localctx = new IriRefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, Sparql11Parser.RULE_iriRef);
    try {
        this.state = 1538;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.IRI_REF:
            this.enterOuterAlt(localctx, 1);
            this.state = 1536;
            this.match(Sparql11Parser.IRI_REF);
            break;
        case Sparql11Parser.PNAME_NS:
        case Sparql11Parser.PNAME_LN:
            this.enterOuterAlt(localctx, 2);
            this.state = 1537;
            this.prefixedName();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrefixedNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_prefixedName;
    return this;
}

PrefixedNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrefixedNameContext.prototype.constructor = PrefixedNameContext;

PrefixedNameContext.prototype.PNAME_LN = function() {
    return this.getToken(Sparql11Parser.PNAME_LN, 0);
};

PrefixedNameContext.prototype.PNAME_NS = function() {
    return this.getToken(Sparql11Parser.PNAME_NS, 0);
};

PrefixedNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterPrefixedName(this);
	}
};

PrefixedNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitPrefixedName(this);
	}
};




Sparql11Parser.PrefixedNameContext = PrefixedNameContext;

Sparql11Parser.prototype.prefixedName = function() {

    var localctx = new PrefixedNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, Sparql11Parser.RULE_prefixedName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1540;
        _la = this._input.LA(1);
        if(!(_la===Sparql11Parser.PNAME_NS || _la===Sparql11Parser.PNAME_LN)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlankNodeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_blankNode;
    return this;
}

BlankNodeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlankNodeContext.prototype.constructor = BlankNodeContext;

BlankNodeContext.prototype.BLANK_NODE_LABEL = function() {
    return this.getToken(Sparql11Parser.BLANK_NODE_LABEL, 0);
};

BlankNodeContext.prototype.anon = function() {
    return this.getTypedRuleContext(AnonContext,0);
};

BlankNodeContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterBlankNode(this);
	}
};

BlankNodeContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitBlankNode(this);
	}
};




Sparql11Parser.BlankNodeContext = BlankNodeContext;

Sparql11Parser.prototype.blankNode = function() {

    var localctx = new BlankNodeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, Sparql11Parser.RULE_blankNode);
    try {
        this.state = 1544;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Sparql11Parser.BLANK_NODE_LABEL:
            this.enterOuterAlt(localctx, 1);
            this.state = 1542;
            this.match(Sparql11Parser.BLANK_NODE_LABEL);
            break;
        case Sparql11Parser.OPEN_SQUARE_BRACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1543;
            this.anon();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Var1Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_var1;
    return this;
}

Var1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Var1Context.prototype.constructor = Var1Context;

Var1Context.prototype.QUESTION = function() {
    return this.getToken(Sparql11Parser.QUESTION, 0);
};

Var1Context.prototype.VARNAME = function() {
    return this.getToken(Sparql11Parser.VARNAME, 0);
};

Var1Context.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterVar1(this);
	}
};

Var1Context.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitVar1(this);
	}
};




Sparql11Parser.Var1Context = Var1Context;

Sparql11Parser.prototype.var1 = function() {

    var localctx = new Var1Context(this, this._ctx, this.state);
    this.enterRule(localctx, 276, Sparql11Parser.RULE_var1);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1546;
        this.match(Sparql11Parser.QUESTION);
        this.state = 1547;
        this.match(Sparql11Parser.VARNAME);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Var2Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_var2;
    return this;
}

Var2Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Var2Context.prototype.constructor = Var2Context;

Var2Context.prototype.DOLLAR = function() {
    return this.getToken(Sparql11Parser.DOLLAR, 0);
};

Var2Context.prototype.VARNAME = function() {
    return this.getToken(Sparql11Parser.VARNAME, 0);
};

Var2Context.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterVar2(this);
	}
};

Var2Context.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitVar2(this);
	}
};




Sparql11Parser.Var2Context = Var2Context;

Sparql11Parser.prototype.var2 = function() {

    var localctx = new Var2Context(this, this._ctx, this.state);
    this.enterRule(localctx, 278, Sparql11Parser.RULE_var2);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1549;
        this.match(Sparql11Parser.DOLLAR);
        this.state = 1550;
        this.match(Sparql11Parser.VARNAME);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NilContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_nil;
    return this;
}

NilContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NilContext.prototype.constructor = NilContext;

NilContext.prototype.OPEN_BRACE = function() {
    return this.getToken(Sparql11Parser.OPEN_BRACE, 0);
};

NilContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(Sparql11Parser.CLOSE_BRACE, 0);
};

NilContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Sparql11Parser.WS);
    } else {
        return this.getToken(Sparql11Parser.WS, i);
    }
};


NilContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterNil(this);
	}
};

NilContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitNil(this);
	}
};




Sparql11Parser.NilContext = NilContext;

Sparql11Parser.prototype.nil = function() {

    var localctx = new NilContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, Sparql11Parser.RULE_nil);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1552;
        this.match(Sparql11Parser.OPEN_BRACE);
        this.state = 1556;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Sparql11Parser.WS) {
            this.state = 1553;
            this.match(Sparql11Parser.WS);
            this.state = 1558;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1559;
        this.match(Sparql11Parser.CLOSE_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnonContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Sparql11Parser.RULE_anon;
    return this;
}

AnonContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnonContext.prototype.constructor = AnonContext;

AnonContext.prototype.OPEN_SQUARE_BRACE = function() {
    return this.getToken(Sparql11Parser.OPEN_SQUARE_BRACE, 0);
};

AnonContext.prototype.CLOSE_SQUARE_BRACE = function() {
    return this.getToken(Sparql11Parser.CLOSE_SQUARE_BRACE, 0);
};

AnonContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Sparql11Parser.WS);
    } else {
        return this.getToken(Sparql11Parser.WS, i);
    }
};


AnonContext.prototype.enterRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.enterAnon(this);
	}
};

AnonContext.prototype.exitRule = function(listener) {
    if(listener instanceof Sparql11Listener ) {
        listener.exitAnon(this);
	}
};




Sparql11Parser.AnonContext = AnonContext;

Sparql11Parser.prototype.anon = function() {

    var localctx = new AnonContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, Sparql11Parser.RULE_anon);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1561;
        this.match(Sparql11Parser.OPEN_SQUARE_BRACE);
        this.state = 1565;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Sparql11Parser.WS) {
            this.state = 1562;
            this.match(Sparql11Parser.WS);
            this.state = 1567;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1568;
        this.match(Sparql11Parser.CLOSE_SQUARE_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.Sparql11Parser = Sparql11Parser;
