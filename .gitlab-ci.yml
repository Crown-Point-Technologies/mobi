# This file is a template, and might need editing before it works on your project.
# Build JAVA applications using Apache Maven (http://maven.apache.org)
# For docker image tags see https://hub.docker.com/_/maven/
#
# For general lifecycle information see https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html

# This template will build and test your projects
# * Caches downloaded dependencies and plugins between invocation.
# * Verify but don't deploy merge requests.
# * Deploy built artifacts from master branch only.

stages:
  - test
  - update_master
  - new_master_version
  - new_release

variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

# This template uses jdk8 for verifying and deploying images
image: gitlab.inovexcorp.com:4567/ilab/docker-images/maven-node-jdk8

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository
    - com.mobi.web/node_modules/
  key: one-key-to-rule-them-all

# For merge requests do not `deploy` but only run `verify`.
# See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
test:
  stage: test
  script:
    - 'mvn $MAVEN_CLI_OPTS -pl -mobi-distribution,-mobi-itests,-:itests-support,-:itests-orm,-:itests-web,-:itests-platform,-:itests-etl,-:itests-rest,-:itests-vfs test'
  except:
    - master
  only:
    - merge_requests


# Verify merge requests using JDK8
# test:jdk8:
#   <<: *test

version_extract:
  stage: test
  only:
    variables:
      - $CI_COMMIT_TITLE =~ /Merge .* to master/
    refs:
      - master
  script:
    - export POM_VERSION=$(mvn org.apache.maven.plugins:maven-help-plugin:evaluate -Dexpression=project.version -q -DforceStdout)
    - export REGEX="([0-9]+)\.([0-9]+)\.([0-9]+)"
    - export MAJOR=$([[ $POM_VERSION =~ $REGEX ]] && echo ${BASH_REMATCH[1]})
    - export MINOR=$([[ $POM_VERSION =~ $REGEX ]] && echo ${BASH_REMATCH[2]})
    - export MICRO=$([[ $POM_VERSION =~ $REGEX ]] && echo ${BASH_REMATCH[3]})

update_master:
  stage: update_master
  only:
    variables:
      - $CI_COMMIT_TITLE =~ /Merge .* to master/
    refs:
      - master
  script:
    - NEW_VERSION="MAJOR.MINOR.$((MICRO+1))"
    - export $NEW_VERSION
    - mvn versions:set -DnewVersion=$NEW_VERSION
    - git add .
    - git commit -m"AUTOMATED COMMIT - Updates version to $NEW_VERSION"
    - git push origin master
    - mvn versions:set -DnewVersion=$NEW_VERSION-SNAPSHOT
    - git add .
    - git commit -m"AUTOMATED COMMIT - Updates version to $NEW_VERSION-SNAPSHOT"
    - git push origin master

unit_integration_test:
  stage: new_master_version
  only:
    variables:
      - $CI_COMMIT_TITLE =~ /AUTOMATED COMMIT - Updates Version to $NEW_VERSION/
    refs:
      - master
  script:
    - mvn clean install -DskipTests=false

update_release:
  stage: new_release
  only:
    - tags
    - /release\d*\.\d*/
  script:
    - NEW_MASTER_VERSION="$MAJOR.$((MINOR+1)).0-SNAPSHOT"
    - mvn versions:set -DnewVersion=$NEW_MASTER_VERSION
    - git add .
    - git commit -m"AUTOMATED RELEASE COMMIT - Updates version to $NEW_MASTER_VERSION"
    - git push origin master

build_release_jar:
  stage: new_release
  only:
    - tags
    - /release\d*\.\d*/
  script:
    - mvn clean build
    - echo "PUSHING TO ARTIFACTORY"

build_release_docker:
  stage: new_release
  only:
    - tags
    - /release\d*\.\d*/
  script:
    - docker build -t mobi:$MAJOR.$MINOR.$MICRO .
    - echo "PUSHING TO DOCKER"

# To deploy packages from CI, create a ci_settings.xml file
# For deploying packages to GitLab's Maven Repository: See https://docs.gitlab.com/ee/user/project/packages/maven_repository.html#creating-maven-packages-with-gitlab-cicd for more details.
# Please note: The GitLab Maven Repository is currently only available in GitLab Premium / Ultimate.
# For `master` branch run `mvn deploy` automatically.
#deploy:jdk8:
#  stage: deploy
#  script:
#    - if [ ! -f ci_settings.xml ];
#        then echo "CI settings missing\! If deploying to GitLab Maven Repository, please see https://docs.gitlab.com/ee/user/project/packages/maven_repository.html#creating-maven-packages-with-gitlab-cicd for instructions.";
#      fi
#    - 'mvn $MAVEN_CLI_OPTS deploy -s ci_settings.xml'
#  only:
#    - master
