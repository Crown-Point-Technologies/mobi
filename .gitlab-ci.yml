image: gitlab.inovexcorp.com:4567/ilab/docker-images/maven-node-jdk8

stages:
  - test
  - deploy
  - deploy-docker

variables:
  ARTIFACTORY_BASE_URL: "https://artifactory.inovexcorp.com/artifactory/"
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log. `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  MAVEN_CLI_OPTS: "--batch-mode --errors --show-version"

before_script:
  # Sets Version variables for use in job steps and updates pom to correct version for run
  - REGEX="^v([0-9]+)\.([0-9]+)\.([0-9]+)" #Uses bash regex
  - set -xv
  - |- 
    if [[ $CI_COMMIT_TAG =~ $REGEX ]]; then
      VERSION=`echo $CI_COMMIT_TAG | sed -e "s/^v//"`
      MAJOR=`echo $VERSION | cut -d. -f1`
      MINOR=`echo $VERSION | cut -d. -f2`
      MICRO=`echo $VERSION | cut -d. -f3`
      mvn $MAVEN_CLI_OPTS versions:set -DnewVersion=$VERSION -DprocessAllModules -DgenerateBackupPoms=false
      MESSAGE="Building release"
    elif [[ $CI_COMMIT_REF_NAME == "master" ]]
    then
      POM_VERSION=$(mvn org.apache.maven.plugins:maven-help-plugin:evaluate -Dexpression=project.version -q -DforceStdout)
      MAJOR=$(echo $POM_VERSION | cut -d- -f1 | cut -d. -f1)
      MINOR=$(echo $POM_VERSION | cut -d- -f1 | cut -d. -f2)
      MICRO=$(echo $POM_VERSION | cut -d- -f1 | cut -d. -f3)
      VERSION=$MAJOR.$MINOR.$MICRO-rc-$CI_PIPELINE_IID
      mvn $MAVEN_CLI_OPTS versions:set -DnewVersion=$VERSION -DprocessAllModules -DgenerateBackupPoms=false
      MESSAGE="Building release candidate"
    else 
      VERSION=$(mvn org.apache.maven.plugins:maven-help-plugin:evaluate -Dexpression=project.version -q -DforceStdout)
      MESSAGE="Building snapshot"
    fi
  - echo "$MESSAGE - $VERSION"
  - cp /m2/settings.xml ~/.m2/settings.xml

# For merge requests, just do an initial test
unit_test:
  tags:
    - test
  stage: test
  script:
    - mvn $MAVEN_CLI_OPTS -pl '!mobi-distribution,!mobi-itests,!:itests-support,!:itests-orm,!:itests-web,!:itests-platform,!:itests-etl,!:itests-rest,!:itests-vfs' test
  only:
    - branches
  except:
    - merge_requests
    - master

# For commits to master and releases do a full test
full_test:
  tags:
    - test
  stage: test
  only: 
    - merge_requests
    - master
    - /v(\d+)\.(\d+)\.(\d+)/  #Release tags are in the form "vX.X.X"
  except:
    variables:
      - $CI_COMMIT_TITLE =~ /^AUTOMATED COMMIT - Update version to \d+\.\d+\.\d+$/ #Should not run on automated commits
  script:
    - apt-get update
    # Redirect calls to localhost:9080 to host machines (not this container), a 2nd container running mobi will be bound to the host at port 9080 (by functional tests).
    - apt-get install -y redir
    - HOST_IP=$(ip route show | awk '/default/ {print $3}')
    - redir :9080 $HOST_IP:9080
    # Update Chrome Version
    - apt-get -y install google-chrome-stable
    # Run unit, integration, and functional tests
    - mvn $MAVEN_CLI_OPTS clean install -DskipFunctional=false -DskipITs=false
  artifacts:
    when: on_failure
    paths:
      - mobi-itests/itests-web/target/nightwatch-screenshots #in the event that the functional tests fail, screenshots of failures are stored in the directory

# Happens after commit to master
deploy_artifacts:
  tags:
    - test
  stage: deploy
  only:
    - master
    - /v(\d+)\.(\d+)\.(\d+)/  #Release tags are in the form "vX.X.X"
  except:
    variables:
      - $CI_COMMIT_TITLE =~ /^AUTOMATED COMMIT - Update version to \d+\.\d+\.\d+$/
  script:
    # - mvn $MAVEN_CLI_OPTS deploy
    - cd rdf-orm/rdf-orm-gradle-plugin
    # - ./gradlew publish -Pversion=$MAJOR.$MINOR.$MICRO -PnexusUsername=$NEXUS_USERNAME -PnexusPassword=$NEXUS_PW

artifactory_release:
  tags:
    - test
  stage: deploy
  only:
    - /v(\d+)\.(\d+)\.(\d+)/  #Release tags are in the form "vX.X.X"
  except:
    - branches
  script:
    - mvn $MAVEN_CLI_OPTS clean install -P release-build -DproductId=$GA_KEY
    - curl -u $ARTIFACTORY_USER:$ARTIFACTORY_PW -X PUT "$ARTIFACTORY_BASE_URL/mobi-binaries/win/mobi-distribution-$MAJOR.$MINOR.$MICRO.zip" -T mobi-distribution/target/mobi-distribution-$MAJOR.$MINOR.$MICRO.zip
    - curl -u $ARTIFACTORY_USER:$ARTIFACTORY_PW -X PUT "$ARTIFACTORY_BASE_URL/mobi-binaries/nix/mobi-distribution-$MAJOR.$MINOR.$MICRO.tar.gz" -T mobi-distribution/target/mobi-distribution-$MAJOR.$MINOR.$MICRO.tar.gz
  artifacts:
    paths:
      - mobi-distribution/target/mobi-distribution-$VERSION* 
      - mobi-distribution/target/assembly/docker #Required for docker_release

# build and push the docker image, per instructions in mobi-distribution README
# tag used to specify we want this job to happen w/ the docker builder runner
docker_release:
  tags:
    - test
    - docker-image-builder
  stage: deploy-docker
  only:
    - /v(\d+)\.(\d+)\.(\d+)/  #Release tags are in the form "vX.X.X"
  except:
    - branches
  script:
    - cd mobi-distribution
    - mvn $MAVEN_CLI_OPTS docker:build -DpushImageTag

increment_version:
  tags:
    - test
  stage: deploy
  only:
    - /v(\d+)\.(\d+)\.(\d+)/  #Release tags are in the form "vX.X.X"
  except:
    - branches
  script:
    # Configure git
    - PRIVATE_URL="$(echo $CI_PROJECT_URL | sed "s|https://|https://gitlab-ci-token:$ACCESS_TOKEN@|g").git"
    - git remote set-url origin $PRIVATE_URL
    - git config --global user.email 'gitlab.runner@inovexcorp.com'
    - git config --global user.name 'Gitlab Runner'
    # Ensure working on latest commit on master
    - git pull
    # Update Version
    - NEW_MINOR=$((MINOR + 1))
    - NEW_VERSION="$MAJOR.$NEW_MINOR.0-SNAPSHOT"
    - mvn $MAVEN_CLI_OPTS versions:set -DnewVersion=$NEW_VERSION -DprocessAllModules -DgenerateBackupPoms=false
    # Commit change to git
    - git commit -am "AUTOMATED COMMIT - Update version to $NEW_VERSION"
    # Push change to master (gitlab)
    - git push origin HEAD:master
    # Push change to github
    - git remote add github https://$GITHUB_NAME:$GITHUB_TOKEN@github.com:inovexcorp/mobi.git
    - git push github HEAD:master
